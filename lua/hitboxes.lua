GAME_KOF96 = 0;
GAME_KOF97 = 1;
GAME_QF = 3;

-- Options
config = {}
config['game'] = GAME_KOF96

-- The rest
collision_data_96 = {0x00,0x00,0x00,0x00,0x00,0xFC,0x08,0x10,0xF7,0x00,0x0D,0x09,0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x12,0x00,0x00,0xA0,0x7F,0x0D,0x02,0x10,0x08,0x00,0x09,0x08,0x08,0xFE,0xF0,0x12,0x20,0x00,0xEE,0x10,0x20,0x00,0x00,0x08,0x08,0x00,0x00,0x06,0x12,0x03,0x00,0x08,0x1D,0x00,0xF0,0x20,0x20,0x00,0xC2,0x28,0x4F,0x00,0x10,0xA0,0x06,0x00,0xC2,0x08,0x6F,0x00,0x00,0x0C,0x0C,0x0D,0x00,0x15,0x1D,0x00,0xF4,0x11,0x1C,0xEA,0xFC,0x08,0x0E,0xF2,0xFC,0x0E,0x14,0xF9,0xF9,0x19,0x14,0x00,0xFC,0x0B,0x0B,0x00,0xF5,0x12,0x12,0x00,0xEE,0x18,0x18,0x00,0x0C,0x0B,0x0B,0x00,0x05,0x12,0x12,0x00,0xFE,0x18,0x18,0xF5,0xFB,0x11,0x09,0xF5,0x02,0x13,0x11,0xEA,0xFA,0x0F,0x0D,0xF3,0xFB,0x0D,0x0F,0xF7,0xF4,0x0E,0x0D,0x00,0xF9,0x11,0x18,0xF3,0xE3,0x0C,0x09,0xEE,0x07,0x0E,0x0A,0xFD,0xF8,0x0D,0x10,0xF8,0xF8,0x0D,0x0F,0xFA,0xFF,0x0B,0x0B,0xFB,0xFC,0x0E,0x14,0xE0,0xFC,0x0B,0x08,0xDD,0xFC,0x0E,0x08,0xFA,0x00,0x12,0x13,0xE8,0xFB,0x0B,0x10,0xFB,0xF4,0x0D,0x16,0xED,0xF9,0x0D,0x10,0x00,0x04,0x0C,0x0C,0xE8,0x00,0x0E,0x09,0xE8,0xFE,0x0A,0x0B,0xF5,0xEE,0x0C,0x17,0xEC,0x00,0x0D,0x0D,0xEB,0xFA,0x0D,0x12,0xFE,0xFC,0x14,0x0E,0xF6,0xFA,0x14,0x0E,0xF7,0x02,0x11,0x0F,0xF9,0xFA,0x12,0x10,0xFB,0x09,0x0D,0x0B,0xFE,0xFC,0x14,0x13,0xF4,0xF7,0x09,0x09,0x00,0xFC,0x10,0x17,0xF0,0xFB,0x0D,0x16,0xE8,0xF8,0x10,0x18,0xF5,0xFE,0x14,0x0D,0xF4,0xFE,0x13,0x09,0xF8,0x00,0x15,0x09,0xFE,0xF5,0x1A,0x09,0xEC,0xFE,0x13,0x05,0xEE,0x00,0x0D,0x09,0xF0,0xFD,0x13,0x0D,0xEF,0xF8,0x0D,0x12,0xED,0x05,0x0D,0x0C,0xF3,0xFC,0x0D,0x13,0xF6,0xFA,0x0C,0x13,0xF0,0x00,0x0D,0x09,0xFA,0xED,0x0D,0x09,0xF7,0x09,0x0D,0x09,0xF2,0x09,0x0D,0x09,0xF1,0x05,0x0D,0x09,0xF0,0xF5,0x0D,0x09,0xEE,0x00,0x0D,0x09,0xF3,0x00,0x0D,0x09,0xF5,0x09,0x0D,0x09,0xEE,0x07,0x0D,0x09,0xFF,0xF5,0x0D,0x09,0xFB,0x00,0x0D,0x09,0xF9,0x09,0x0D,0x09,0xF2,0x00,0x0D,0x09,0xEB,0x00,0x0D,0x09,0xF2,0xF3,0x0D,0x09,0xFD,0xF1,0x0D,0x09,0xEF,0x09,0x0D,0x09,0xFC,0x00,0x0D,0x09,0xF7,0xF5,0x0D,0x09,0xF4,0x09,0x0D,0x09,0xF4,0xF6,0x0D,0x09,0xFC,0xFC,0x0D,0x09,0xF3,0xFD,0x0D,0x09,0xF4,0xF9,0x0D,0x09,0xFD,0xEB,0x0D,0x09,0xF8,0x09,0x0D,0x09,0xEA,0x09,0x0D,0x09,0xED,0xFA,0x0D,0x09,0xE7,0x00,0x0D,0x09,0xF4,0x09,0x0D,0x09,0xF2,0xF8,0x0D,0x09,0xED,0x09,0x0D,0x09,0xFA,0x09,0x0D,0x09,0xFC,0x09,0x0D,0x09,0xFC,0xF3,0x0D,0x09,0xEF,0xFC,0x0D,0x09,0xF6,0xF4,0x0D,0x09,0xF8,0xF5,0x0D,0x09,0xFA,0x00,0x0D,0x09,}
collision_data_97 = {0x00,0x00,0x00,0x00,0x00,0xFC,0x08,0x10,0xF7,0x00,0x0D,0x09,0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x12,0x00,0x00,0xA0,0x7F,0x0D,0x02,0x10,0x08,0x00,0x09,0x08,0x08,0xFE,0xF0,0x12,0x20,0x00,0xEE,0x10,0x20,0x00,0x00,0x08,0x08,0x00,0x00,0x06,0x12,0x03,0x00,0x08,0x1D,0x00,0xF0,0x20,0x20,0x00,0xC2,0x28,0x4F,0x00,0x10,0xA0,0x06,0x00,0xC2,0x08,0x6F,0x00,0x00,0x0C,0x0C,0x0D,0x00,0x15,0x1D,0x00,0xF4,0x11,0x1C,0xEA,0xFC,0x08,0x0E,0xF2,0xFC,0x0E,0x14,0xF9,0xF9,0x19,0x14,0x00,0xFC,0x0B,0x0B,0x00,0xF5,0x12,0x12,0x00,0xEE,0x18,0x18,0x00,0x0C,0x0B,0x0B,0x00,0x05,0x12,0x12,0x00,0xFE,0x18,0x18,0xF5,0xFB,0x11,0x09,0xF5,0x02,0x13,0x11,0xEA,0xFA,0x0F,0x0D,0xF3,0xFB,0x0D,0x0F,0xF7,0xF4,0x0E,0x0D,0x00,0xF9,0x11,0x18,0xF3,0xE3,0x0C,0x09,0xEE,0x07,0x0E,0x0A,0xFD,0xF8,0x0D,0x10,0xF8,0xF8,0x0D,0x0F,0xFA,0xFF,0x0B,0x0B,0xFB,0xFC,0x0E,0x14,0xE0,0xFC,0x0B,0x08,0xDD,0xFC,0x0E,0x08,0xFA,0x00,0x12,0x13,0xE8,0xFB,0x0B,0x10,0xFB,0xF4,0x0D,0x16,0xED,0xF9,0x0D,0x10,0x00,0x04,0x0C,0x0C,0xE8,0x00,0x0E,0x09,0xE8,0xFE,0x0A,0x0B,0xF5,0xEE,0x0C,0x17,0xEC,0x00,0x0D,0x0D,0xEB,0xFA,0x0D,0x12,0xFE,0xFC,0x14,0x0E,0xF6,0xFA,0x14,0x0E,0xF7,0x02,0x11,0x0F,0xF9,0xFA,0x12,0x10,0xFB,0x09,0x0D,0x0B,0xFE,0xFC,0x14,0x13,0xF4,0xF7,0x09,0x09,0x00,0xFC,0x10,0x17,0xF0,0xFB,0x0D,0x16,0xE8,0xF8,0x10,0x18,0xF5,0xFE,0x14,0x0D,0xF4,0xFE,0x13,0x09,0xF8,0x00,0x15,0x09,0xFE,0xF5,0x1A,0x09,0xEC,0xFE,0x13,0x05,0xEE,0x00,0x0D,0x09,0xF0,0xFD,0x13,0x0D,0xEF,0xF8,0x0D,0x12,0xED,0x05,0x0D,0x0C,0xF3,0xFC,0x0D,0x13,0xF6,0xFA,0x0C,0x13,0xF0,0x00,0x0D,0x09,0xFA,0xED,0x0D,0x09,0xF7,0x09,0x0D,0x09,0xF2,0x09,0x0D,0x09,0xF1,0x05,0x0D,0x09,0xF0,0xF5,0x0D,0x09,0xEE,0x00,0x0D,0x09,0xF3,0x00,0x0D,0x09,0xF5,0x09,0x0D,0x09,0xEE,0x07,0x0D,0x09,0xFF,0xF5,0x0D,0x09,0xFB,0x00,0x0D,0x09,0xF9,0x09,0x0D,0x09,0xF2,0x00,0x0D,0x09,0xEB,0x00,0x0D,0x09,0xF2,0xF3,0x0D,0x09,0xFD,0xF1,0x0D,0x09,0xEF,0x09,0x0D,0x09,0xFC,0x00,0x0D,0x09,0xF7,0xF5,0x0D,0x09,0xF4,0x09,0x0D,0x09,0xF4,0xF6,0x0D,0x09,0xFC,0xFC,0x0D,0x09,0xF3,0xFD,0x0D,0x09,0xF4,0xF9,0x0D,0x09,0xFD,0xEB,0x0D,0x09,0xF8,0x09,0x0D,0x09,0xEA,0x09,0x0D,0x09,0xED,0xFA,0x0D,0x09,0xE7,0x00,0x0D,0x09,0xF4,0x09,0x0D,0x09,0xF2,0xF8,0x0D,0x09,0xED,0x09,0x0D,0x09,0xFA,0x09,0x0D,0x09,0xFC,0x09,0x0D,0x09,0xFC,0xF3,0x0D,0x09,0xEF,0xFC,0x0D,0x09,0xF6,0xF4,0x0D,0x09,0xF8,0xF5,0x0D,0x09,0xFA,0x00,0x0D,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x08,0x10,0xF7,0x00,0x0D,0x09,0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x12,0x00,0x00,0x7F,0x7F,0x0D,0x02,0x10,0x08,0x00,0x04,0x08,0x08,0x00,0xF8,0x10,0x18,0x00,0xEE,0x10,0x20,0x00,0xFC,0x08,0x08,0x00,0xFC,0x06,0x10,0x00,0xFC,0x0A,0x10,0x00,0xFC,0x14,0x14,0x00,0x00,0x10,0x7F,0xE1,0xFC,0x13,0x08,0xD4,0xFC,0x22,0x08,0xCC,0xFC,0x28,0x08,0xE2,0xE1,0x12,0x11,0xFF,0xFE,0x13,0x11,0xEA,0xFC,0x08,0x0E,0xF5,0xF4,0x0D,0x10,0xF9,0xF9,0x19,0x14,0xEB,0xF9,0x0A,0x0A,0xEC,0xF9,0x10,0x11,0xF0,0xFC,0x0D,0x09,0x10,0xFC,0x0D,0x09,0x00,0xFF,0x0C,0x09,0xE9,0xFC,0x0D,0x09,0xF1,0xF4,0x0D,0x09,0xF0,0x00,0x13,0x11,0xEF,0xEC,0x0F,0x0D,0xE9,0xF8,0x0D,0x12,0x02,0xEE,0x13,0x0D,0xF4,0xF7,0x0E,0x16,0xE9,0xF7,0x0F,0x12,0xEE,0x00,0x0E,0x09,0xFE,0xEC,0x13,0x0F,0xF2,0xFC,0x0D,0x0D,0xEB,0xFD,0x0E,0x13,0xFE,0xFC,0x14,0x0E,0xF0,0xFC,0x0D,0x0F,0xE1,0xF7,0x0D,0x09,0xEE,0xF9,0x0D,0x09,0xEE,0xF7,0x0D,0x0D,0xFB,0xF4,0x13,0x13,0xFF,0xF3,0x18,0x14,0xF7,0x03,0x14,0x0B,0x03,0x02,0x0E,0x0A,0xFE,0xF8,0x13,0x11,0xEF,0xF9,0x0D,0x15,0x00,0x00,0x11,0x11,0x01,0xFD,0x12,0x11,0x8A,0xFF,0x0E,0x02,0x01,0x08,0x07,0xA3,0x08,0x0F,0x08,0x3F,0x03,0x7F,0x30,0x70,0x6A,0x1F,0x08,0x30,0xFE,0x30,0xFC,0x20,0xF8,0xAB,0x08,0xF0,0x08,0xE0,0x08,0xC0,0x0A,0xD9,0xFB,0xB0,0x0A,0xC0,0x30,0x09,0x0F,0x30,0x09,0xF7,0xF0,0x09,0x40,0x09,0x3F,0x0B,0x60,0x0D,0x55,0xF0,0xD8,0xFE,0x08,0xFF,0x09,0xF8,0x08,0xEE,0x04,0xB0,0x08,0x01,0x62,0x0F,0x0B,0x38,0x23,0x1F,0x30,0x0A,0x70,0x3F,0x60,0x0F,0x0E,0xEA,0x89,0xBB,0xE9,0x00,0x04,0x01,0x08,0x03,0xDB,0x10,0x09,0x07,0x10,0x09,0x0F,0x10,0x0B,0xD6,0xB0,0x10,0x1E,0x08,0x1C,0x0A,0xF9,0xC0,0x80,0xC8,0xBF,0x40,0x7E,0x3D,0x7F,0x3B,0x7C,0x22,0x37,0x72,0x68,0x51,0x3F,0x50,0x08,0x4B,0x0E,0x3C,0x4C,0x30,0x70,0x98,0x07,0x03,0xF8,0x92,0x08,0x08,0xF0,0x00,0xE0,0x10,0x08,0x20,0x1E,0xC0,0x40,0x80,0x00,0xA7,0x07,0x00,0x71,0x08,0x3F,0x30,0x1F,0x38,0x08,0x18,0x0F,0x1C,0x89,0x08,0x0C,0x07,0x0E,0x08,0x06,0x03,0x10,0xDD,0x08,0x00,0x01,0x00,0xE7,0x02,0x80,0x0A,0x6A,0xC0,0x10,0x09,0xE0,0x10,0x60,0x08,0x30,0x88,0x20,0x38,0xF0,0x18,0x08,0x1C,0xF8,0x8E,0x20,0xFC,0x86,0x08,0xC7,0xFE,0xC3,0x7E,0xE3,0x02,0x7F,0x61,0x3F,0x6E,0x3C,0x66,0x08,0x37,0x09,0x1E,0x33,0x1F,0x39,0x08,0x19,0x0F,0xC8,0x94,0x08,0x0C,0x07,0x09,0x0E,0x08,0x06,0x03,0xED,0x10,0x08,0x00,0x01,0x09,0x00,0x00,0x09,0xD5,0x07,0x07,0x80,0x08,0xC0,0x08,0x60,0x20,0x52,0xE0,0x20,0xB0,0x10,0xD8,0x70,0x09,0xCC,0x75,0x78,0xBF,0x07,0x01,0x02,0x08,0x03,0x09,0x78,0x01,0x09,0x00,0x28,0x0B,0x83,0xFF,0xC3,0xA2,0x08,0xC1,0x08,0xE1,0x7F,0xE0,0x08,0x70,0x49,0x3F,0x09,0x38,0x1F,0x09,0x1C,0x0F,0x09}
collision_data_qf = {0x00,0x00,0x00,0x00,0x00,0xFC,0x08,0x10,0xF7,0x00,0x13,0x09,0x00,0x00,0x10,0x10,0xE0,0x10,0x0C,0x20,0x00,0x00,0xA0,0x7F,0x0D,0x02,0x10,0x08,0x00,0x09,0x08,0x08,0xF8,0xF0,0x08,0x20,0xE8,0xF0,0x10,0x28,0x00,0x00,0x08,0x08,0x00,0x00,0x06,0x12,0x03,0x00,0x08,0x1D,0x00,0xF0,0x20,0x20,0xE8,0xF0,0x14,0x10,0xF8,0x00,0x2E,0x20,0xF0,0x08,0x18,0x30,0x00,0x00,0x0C,0x0C,0x0D,0x00,0x15,0x1D,0x00,0xF4,0x16,0x1C,0xEC,0xFC,0x08,0x0E,0xF2,0x00,0x0E,0x40,0xF9,0x00,0x19,0x24,0x00,0xFC,0x0B,0x0B,0x00,0xF5,0x12,0x12,0x00,0xEE,0x18,0x18,0x00,0x0C,0x0B,0x0B,0x00,0x05,0x12,0x12,0x00,0xFE,0x18,0x18,0xF5,0xFB,0x11,0x09,0xF5,0x02,0x13,0x11,0xF0,0xFA,0x13,0x09,0xF3,0xFB,0x0D,0x0F,0xF7,0xF4,0x0E,0x0D,0x00,0xF9,0x11,0x18,0xF3,0xE3,0x0C,0x09,0xEE,0x07,0x14,0x0A,0xFD,0xF8,0x0D,0x10,0xF8,0xF8,0x0D,0x0F,0xFA,0xFF,0x0B,0x0B,0xFB,0xFC,0x0E,0x14,0xE0,0xFC,0x1B,0x0C,0xDD,0xFC,0x1C,0x18,0xE0,0x00,0x12,0x13,0xE4,0xF8,0x0B,0x10,0xFB,0xF4,0x0D,0x16,0xED,0xF9,0x0D,0x10,0x00,0x04,0x0C,0x0C,0xE8,0x00,0x0E,0x09,0xE8,0xFE,0x0A,0x0B,0xF5,0xEE,0x0C,0x17,0xEC,0x00,0x0D,0x0D,0xEB,0xFA,0x0D,0x12,0xFE,0xFC,0x14,0x0E,0xF6,0xFA,0x14,0x0E,0xF7,0x02,0x11,0x0F,0xF9,0xFA,0x12,0x10,0xFB,0x09,0x14,0x0B,0xFE,0xFC,0x14,0x13,0xF4,0xF7,0x09,0x09,0x00,0xFC,0x10,0x17,0xF0,0xFB,0x0D,0x16,0xDA,0xF8,0x10,0x18,0xF5,0xFE,0x14,0x0D,0xF4,0xFE,0x13,0x09,0xF8,0x00,0x15,0x09,0xFE,0xF5,0x1A,0x09,0xEC,0xF8,0x13,0x09,0xEE,0x00,0x0D,0x09,0xF0,0xFD,0x1C,0x0D,0xE5,0xF4,0x0D,0x12,0xED,0x05,0x0D,0x0C,0xF3,0xFC,0x0D,0x13,0xF6,0xFA,0x0C,0x13,0xF0,0x00,0x0D,0x09,0xFA,0xED,0x0D,0x09,0xF7,0x09,0x0D,0x09,0x00,0x09,0x20,0x09,0xF1,0x05,0x0D,0x09,0xF0,0xF5,0x0D,0x09,0xEE,0x00,0x0D,0x09,0xF3,0x00,0x0D,0x09,0xF5,0x09,0x0D,0x09,0xEE,0x07,0x0D,0x09,0xFF,0xF5,0x0D,0x09,0xFB,0x00,0x0D,0x09,0xF9,0x09,0x0D,0x09,0xF2,0x00,0x0D,0x09,0xEB,0x00,0x0D,0x09,0xF2,0xF3,0x0D,0x09,0xFD,0xF1,0x0D,0x09,0xEF,0x09,0x0D,0x09,0xFC,0x00,0x0D,0x09,0xF7,0xF5,0x0D,0x09,0xF4,0x09,0x0D,0x09,0xF4,0xF6,0x0D,0x09,0xFC,0xFC,0x0D,0x09,0xF3,0xFD,0x0D,0x09,0xF4,0xF9,0x0D,0x09,0xFD,0xEB,0x0D,0x09,0xEE,0x08,0x1C,0x0C,0xEA,0x09,0x0D,0x09,0xED,0xFA,0x0D,0x09,0xE7,0x00,0x0D,0x09,0xF4,0x09,0x0D,0x09,0xF2,0xF8,0x0D,0x09,0xED,0x09,0x0D,0x09,0xFA,0x09,0x0D,0x09,0xFC,0x09,0x0D,0x09,0xFC,0xF3,0x0D,0x09,0xEF,0xFC,0x0D,0x09,0xF6,0xF4,0x0D,0x09,0xF8,0xF5,0x0D,0x09,0xF0,0x00,0x10,0x48}
OST_VISIBLE = 0x80
SPR_XFLIP = 0x20
PI22_NOHURTBOX = 0x40
PI22_NOCOLIBOX = 0x80

-- Ram addresses
ram = {}
ram['objScrollX']   = 0xC155
ram['objScrollY']   = 0xC157
ram['objInfo']      = 0xD680
ram['plInfo']       = 0xD900

if config['game'] == GAME_KOF96 then
	print "KOF96 mode"
	collision_array = collision_data_96
elseif config['game'] == GAME_KOF97 then
	print "KOF97 mode"
	collision_array = collision_data_97
elseif config['game'] == GAME_QF then
	print "QF mode"
	collision_array = collision_data_qf
end

function in_range(val, min, max)
	return val >= min and val <= max;
end

function num_range(val, min, max)
	return math.min(math.max(val, min), max);
end

function memory.readsignedbyte(memAddr)
	local x = memory.readbyte(memAddr)
	if x <= 0x80 then
		return x
	else
		return -(0x100 - x)
	end
end

function memory.readwordinv(memAddr)
	return (memory.readbyte(memAddr) * 0x100) + memory.readbyte(memAddr+1)
end

function get_objinfo(slotNum)
	local baseAddr = ram['objInfo'] + (0x40 * slotNum);
	return {
		status = memory.readbyte(baseAddr),
		objLstFlags = memory.readbyte(baseAddr+0x01),
		objLstFlagsOld = memory.readbyte(baseAddr+0x02),
		x = memory.readbyte(baseAddr+0x03),
		--xSub = memory.readbyte(baseAddr+0x04),
		y = memory.readbyte(baseAddr+0x05),
		--ySub = memory.readbyte(baseAddr+0x06),
		--speedX = memory.readbyte(baseAddr+0x07),
		--speedXSub = memory.readbyte(baseAddr+0x08),
		--unknown_09 = memory.readbyte(baseAddr+0x09),
		--unknown_0A = memory.readbyte(baseAddr+0x0A),
		--relX = memory.readbyte(baseAddr+0x0B),
		--relY = memory.readbyte(baseAddr+0x0C),
		--tileIDBase = memory.readbyte(baseAddr+0x0D),
		--vRAMPtr_Low = memory.readbyte(baseAddr+0x0E),
		--vRAMPtr_High = memory.readbyte(baseAddr+0x0F),
		--bankNum = memory.readbyte(baseAddr+0x10),
		--oBJLstPtrTbl_Low = memory.readbyte(baseAddr+0x11),
		--oBJLstPtrTbl_High = memory.readbyte(baseAddr+0x12),
		--oBJLstPtrTblOffset = memory.readbyte(baseAddr+0x13),
		--bankNumOld = memory.readbyte(baseAddr+0x14),
		--oBJLstPtrTbl_LowOld = memory.readbyte(baseAddr+0x15),
		--oBJLstPtrTbl_HighOld = memory.readbyte(baseAddr+0x16),
		--oBJLstPtrTblOffsetOld = memory.readbyte(baseAddr+0x17),
		coliBoxId = memory.readbyte(baseAddr+0x18),
		hitboxId = memory.readbyte(baseAddr+0x19),
		forceHitboxId = memory.readbyte(baseAddr+0x1A),
		--frameLeft = memory.readbyte(baseAddr+0x1B),
		--frameTotal = memory.readbyte(baseAddr+0x1C),
		--bufInfoPtr_Low = memory.readbyte(baseAddr+0x1D),
		--bufInfoPtr_High = memory.readbyte(baseAddr+0x1E),
		--rangeMoveAmount = memory.readbyte(baseAddr+0x1F),
		--custom = memory.readbyte(baseAddr+0x20),
		projActive = memory.readbyte(baseAddr+0x23),
	}
end

function get_plinfo(slotNum)
	local baseAddr = ram['plInfo'] + (0x100 * slotNum);
	return {
		status = memory.readbyte(baseAddr+0x20),
		flags21 = memory.readbyte(baseAddr+0x21),
		flags22 = memory.readbyte(baseAddr+0x22),
	}
end

function render_colibox(obj, flags, coliId, color)
	--gui.text(20, (8 * 1), string.format("%04X", coliId));
	if (coliId ~= 0) then
		coliId = (coliId * 4) + 1; -- lua indexing :(
		
		
		--gui.text(20, (8 * 2), string.format("%04X", flags));
		--gui.text(20, (8 * 3), string.format("%04X %04X", obj.x, obj.y));
		--print(coliId)
		local coliOrgX = collision_array[coliId];
		--gui.text(20, (8 * 5), string.format("%04X", coliOrgX));
		if coliOrgX > 0x7F then -- hex to signed
			coliOrgX = -(0x100 - coliOrgX);
		end
		if bit.band(flags, SPR_XFLIP) ~= 0 then -- X flipping
			coliOrgX = -coliOrgX;
		end
		local coliOrgY = collision_array[coliId+1];
		--gui.text(20, (8 * 6), string.format("%04X", coliOrgY));
		if coliOrgY > 0x7F then -- hex to signed
			coliOrgY = -(0x100 - coliOrgY);
		end
		-- relative to absolute
		coliOrgX = coliOrgX + obj.x;
		coliOrgY = coliOrgY + obj.y;
		
		local radH = collision_array[coliId+2];
		local radV = collision_array[coliId+3];

		
		--gui.text(0, (16 * i)+8, string.format("%04X %04X", act['coliBoxU'], act['coliBoxD']));
		
		-- draw the collision box with the specified color (green or red)
		gui.box(coliOrgX - radH - objScrollX, coliOrgY - radV - objScrollY, coliOrgX + radH - objScrollX, coliOrgY + radV - objScrollY, "#00000000", color);
		
		-- draw box origin
		gui.pixel(coliOrgX - objScrollX, coliOrgY - objScrollY, 'orange');
	end
	
	-- draw main origin
	gui.pixel(obj.x - objScrollX, obj.y - objScrollY, 'yellow');
end

print ("Hello");

while (true) do
	keys = input.get()

	objScrollX = memory.readbytesigned(ram['objScrollX']);
	objScrollY = memory.readbytesigned(ram['objScrollY']);
	-- iOBJLstHdrA_XOffset & the other are never copied to the struct :(
	-- so this uses an approximation
	objScrollX = objScrollX;
	objScrollY = objScrollY - 0x23;


	p1char = get_objinfo(0);
	p2char = get_objinfo(1);
	p1proj = get_objinfo(2);
	p2proj = get_objinfo(3);
	
	p1 = get_plinfo(0);
	p2 = get_plinfo(1);
	
	
	
	
	-- hurtbox/collision box
	
	-- hurtbox and collision box checks are different even if they point to the same "data".
	-- a character may have PI22_NOCOLIBOX set (so players can move through it), but still
	-- have PI22_NOHURTBOX clear, meaning that aforemented collision box can be hit.
	--	gui.text(20, (18 * 1), string.format("%02X", objScrollX));
	--	gui.text(20, (18 * 2), string.format("%02X", objScrollY));
		
	--gui.text(70, (18 * 1), string.format("%02X", p1char.forceHitboxId));
	if bit.band(p1.flags22, PI22_NOHURTBOX) ~= 0 then
		render_colibox(p1char, p1char.objLstFlagsOld, p1char.coliBoxId, 'yellow') -- white
	elseif bit.band(p1.flags22, PI22_NOCOLIBOX) == 0 then
		render_colibox(p1char, p1char.objLstFlagsOld, p1char.coliBoxId, 'green')
	end
	
	if bit.band(p2.flags22, PI22_NOHURTBOX) ~= 0 then
		render_colibox(p2char, p2char.objLstFlagsOld, p2char.coliBoxId, 'yellow') -- white
	elseif bit.band(p2.flags22, PI22_NOCOLIBOX) == 0 then
		render_colibox(p2char, p2char.objLstFlagsOld, p2char.coliBoxId, 'green')
	end
	
	-- hitbox
	if p1char.forceHitboxId ~= 0 then
		render_colibox(p1char, p1char.objLstFlagsOld, p1char.forceHitboxId, 'purple')
	else
		render_colibox(p1char, p1char.objLstFlagsOld, p1char.hitboxId, 'red')
	end
	
	if p2char.forceHitboxId ~= 0 then
		render_colibox(p2char, p2char.objLstFlagsOld, p2char.forceHitboxId, 'purple')
	else
		render_colibox(p2char, p2char.objLstFlagsOld, p2char.hitboxId, 'red')
	end
	
	-- projectiles
	-- TODO: not accurate to the "can be hit" checks, which are different between proj/pl hurtbox and proj/pl hitbox
	if bit.band(p1proj.status, OST_VISIBLE) ~= 0 and p1proj.projActive ~= 0 then 
		render_colibox(p1proj, p1proj.objLstFlags, p1proj.hitboxId, 'red')
	end
	if bit.band(p2proj.status, OST_VISIBLE) ~= 0 and p1proj.projActive ~= 0 then 
		render_colibox(p2proj, p2proj.objLstFlags, p2proj.hitboxId, 'red')
	end
	
	emu.frameadvance()
end