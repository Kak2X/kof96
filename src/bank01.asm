GFXLZ_Play_PreRoundText: db $7B
L014001: db $40
L014002: db $60
L014003: db $00
L014004: db $07
L014005: db $01
L014006: db $1F
L014007: db $0F
L014008: db $30
L014009: db $18
L01400A: db $27
L01400B: db $00
L01400C: db $13
L01400D: db $6C
L01400E: db $33
L01400F: db $4C
L014010: db $3F
L014011: db $DF
L014012: db $7F
L014013: db $9E
L014014: db $AA
L014015: db $08
L014016: db $B6
L014017: db $08
L014018: db $B3
L014019: db $08
L01401A: db $80
L01401B: db $98
L01401C: db $FF
L01401D: db $E9
L01401E: db $E7
L01401F: db $02
L014020: db $58
L014021: db $CF
L014022: db $F8
L014023: db $78
L014024: db $87
L014025: db $E8
L014026: db $7B
L014027: db $CC
L014028: db $09
L014029: db $40
L01402A: db $E8
L01402B: db $08
L01402C: db $18
L01402D: db $08
L01402E: db $58
L01402F: db $B8
L014030: db $08
L014031: db $3E
L014032: db $E2
L014033: db $FF
L014034: db $FE
L014035: db $59
L014036: db $A6
L014037: db $F1
L014038: db $15
L014039: db $0E
L01403A: db $E9
L01403B: db $16
L01403C: db $40
L01403D: db $26
L01403E: db $08
L01403F: db $7C
L014040: db $08
L014041: db $58
L014042: db $ED
L014043: db $08
L014044: db $CD
L014045: db $FF
L014046: db $FF
L014047: db $7F
L014048: db $80
L014049: db $C3
L01404A: db $1A
L01404B: db $3C
L01404C: db $93
L01404D: db $6C
L01404E: db $09
L01404F: db $40
L014050: db $CC
L014051: db $08
L014052: db $C8
L014053: db $A3
L014054: db $08
L014055: db $99
L014056: db $08
L014057: db $F1
L014058: db $FB
L014059: db $04
L01405A: db $FF
L01405B: db $FD
L01405C: db $00
L01405D: db $FE
L01405E: db $01
L01405F: db $32
L014060: db $CD
L014061: db $26
L014062: db $D9
L014063: db $0C
L014064: db $F3
L014065: db $00
L014066: db $F8
L014067: db $E6
L014068: db $F0
L014069: db $CC
L01406A: db $E0
L01406B: db $98
L01406C: db $C0
L01406D: db $B0
L01406E: db $BC
L01406F: db $08
L014070: db $20
L014071: db $98
L014072: db $30
L014073: db $E7
L014074: db $02
L014075: db $0F
L014076: db $07
L014077: db $40
L014078: db $18
L014079: db $D8
L01407A: db $33
L01407B: db $19
L01407C: db $26
L01407D: db $13
L01407E: db $6C
L01407F: db $3F
L014080: db $54
L014081: db $4D
L014082: db $08
L014083: db $58
L014084: db $08
L014085: db $59
L014086: db $08
L014087: db $4F
L014088: db $1F
L014089: db $79
L01408A: db $60
L01408B: db $98
L01408C: db $20
L01408D: db $E7
L01408E: db $02
L01408F: db $FF
L014090: db $E7
L014091: db $F8
L014092: db $02
L014093: db $3C
L014094: db $C3
L014095: db $99
L014096: db $66
L014097: db $F3
L014098: db $0C
L014099: db $40
L01409A: db $CC
L01409B: db $B9
L01409C: db $08
L01409D: db $D8
L01409E: db $08
L01409F: db $40
L0140A0: db $08
L0140A1: db $0F
L0140A2: db $9F
L0140A3: db $F9
L0140A4: db $FE
L0140A5: db $20
L0140A6: db $E7
L0140A7: db $FF
L0140A8: db $F9
L0140A9: db $09
L0140AA: db $FA
L0140AB: db $09
L0140AC: db $80
L0140AD: db $8C
L0140AE: db $08
L0140AF: db $19
L0140B0: db $BF
L0140B1: db $40
L0140B2: db $FF
L0140B3: db $04
L0140B4: db $FC
L0140B5: db $F8
L0140B6: db $00
L0140B7: db $04
L0140B8: db $C8
L0140B9: db $34
L0140BA: db $98
L0140BB: db $64
L0140BC: db $90
L0140BD: db $6C
L0140BE: db $F0
L0140BF: db $91
L0140C0: db $30
L0140C1: db $E0
L0140C2: db $D8
L0140C3: db $08
L0140C4: db $10
L0140C5: db $C0
L0140C6: db $B0
L0140C7: db $08
L0140C8: db $60
L0140C9: db $20
L0140CA: db $98
L0140CB: db $30
L0140CC: db $06
L0140CD: db $19
L0140CE: db $0C
L0140CF: db $13
L0140D0: db $08
L0140D1: db $00
L0140D2: db $37
L0140D3: db $1A
L0140D4: db $27
L0140D5: db $15
L0140D6: db $6F
L0140D7: db $3A
L0140D8: db $4F
L0140D9: db $35
L0140DA: db $11
L0140DB: db $DE
L0140DC: db $7F
L0140DD: db $9E
L0140DE: db $08
L0140DF: db $BC
L0140E0: db $7E
L0140E1: db $BD
L0140E2: db $08
L0140E3: db $50
L0140E4: db $B9
L0140E5: db $28
L0140E6: db $B8
L0140E7: db $08
L0140E8: db $9F
L0140E9: db $3F
L0140EA: db $CF
L0140EB: db $1F
L0140EC: db $64
L0140ED: db $60
L0140EE: db $F8
L0140EF: db $20
L0140F0: db $01
L0140F1: db $FE
L0140F2: db $09
L0140F3: db $78
L0140F4: db $87
L0140F5: db $0D
L0140F6: db $DA
L0140F7: db $A7
L0140F8: db $D5
L0140F9: db $2F
L0140FA: db $80
L0140FB: db $68
L0140FC: db $FF
L0140FD: db $70
L0140FE: db $EC
L0140FF: db $08
L014100: db $D0
L014101: db $08
L014102: db $3C
L014103: db $0A
L014104: db $80
L014105: db $FD
L014106: db $7A
L014107: db $83
L014108: db $08
L014109: db $F2
L01410A: db $F8
L01410B: db $E7
L01410C: db $F0
L01410D: db $0D
L01410E: db $80
L01410F: db $20
L014110: db $40
L014111: db $18
L014112: db $28
L014113: db $B0
L014114: db $4F
L014115: db $A1
L014116: db $5E
L014117: db $EB
L014118: db $1E
L014119: db $42
L01411A: db $D7
L01411B: db $A8
L01411C: db $EA
L01411D: db $3D
L01411E: db $D6
L01411F: db $79
L014120: db $BB
L014121: db $FB
L014122: db $45
L014123: db $F4
L014124: db $08
L014125: db $E5
L014126: db $FF
L014127: db $E1
L014128: db $08
L014129: db $7F
L01412A: db $08
L01412B: db $58
L01412C: db $3F
L01412D: db $10
L01412E: db $80
L01412F: db $F8
L014130: db $20
L014131: db $0C
L014132: db $F3
L014133: db $06
L014134: db $01
L014135: db $F9
L014136: db $E2
L014137: db $1D
L014138: db $6A
L014139: db $9D
L01413A: db $56
L01413B: db $BD
L01413C: db $FF
L01413D: db $90
L01413E: db $FB
L01413F: db $F7
L014140: db $E9
L014141: db $08
L014142: db $CB
L014143: db $E7
L014144: db $9B
L014145: db $C7
L014146: db $40
L014147: db $38
L014148: db $F8
L014149: db $EF
L01414A: db $10
L01414B: db $6F
L01414C: db $30
L01414D: db $4F
L01414E: db $21
L01414F: db $00
L014150: db $DE
L014151: db $6B
L014152: db $9E
L014153: db $57
L014154: db $BC
L014155: db $EB
L014156: db $3C
L014157: db $D7
L014158: db $AF
L014159: db $F8
L01415A: db $FF
L01415B: db $09
L01415C: db $F3
L01415D: db $08
L01415E: db $A0
L01415F: db $08
L014160: db $D0
L014161: db $B9
L014162: db $0A
L014163: db $CF
L014164: db $0A
L014165: db $48
L014166: db $51
L014167: db $C2
L014168: db $3D
L014169: db $09
L01416A: db $40
L01416B: db $86
L01416C: db $A8
L01416D: db $AC
L01416E: db $7B
L01416F: db $5C
L014170: db $F2
L014171: db $A8
L014172: db $F6
L014173: db $08
L014174: db $58
L014175: db $E4
L014176: db $F0
L014177: db $EC
L014178: db $08
L014179: db $C8
L01417A: db $E0
L01417B: db $18
L01417C: db $28
L01417D: db $C0
L01417E: db $B0
L01417F: db $08
L014180: db $A0
L014181: db $08
L014182: db $20
L014183: db $80
L014184: db $60
L014185: db $BF
L014186: db $08
L014187: db $40
L014188: db $F8
L014189: db $30
L01418A: db $08
L01418B: db $07
L01418C: db $07
L01418D: db $07
L01418E: db $8F
L01418F: db $03
L014190: db $07
L014191: db $03
L014192: db $0C
L014193: db $57
L014194: db $07
L014195: db $07
L014196: db $04
L014197: db $7C
L014198: db $FF
L014199: db $00
L01419A: db $4F
L01419B: db $07
L01419C: db $07
L01419D: db $05
L01419E: db $9F
L01419F: db $0F
L0141A0: db $78
L0141A1: db $B0
L0141A2: db $57
L0141A3: db $07
L0141A4: db $07
L0141A5: db $04
L0141A6: db $FC
L0141A7: db $F8
L0141A8: db $06
L0141A9: db $F1
L0141AA: db $57
L0141AB: db $07
L0141AC: db $07
L0141AD: db $04
L0141AE: db $3F
L0141AF: db $1F
L0141B0: db $20
L0141B1: db $57
L0141B2: db $E3
L0141B3: db $07
L0141B4: db $07
L0141B5: db $04
L0141B6: db $FF
L0141B7: db $FE
L0141B8: db $01
L0141B9: db $57
L0141BA: db $02
L0141BB: db $00
L0141BC: db $1F
L0141BD: db $0F
L0141BE: db $30
L0141BF: db $18
L0141C0: db $27
L0141C1: db $13
L0141C2: db $6C
L0141C3: db $33
L0141C4: db $00
L0141C5: db $4C
L0141C6: db $3F
L0141C7: db $DF
L0141C8: db $7F
L0141C9: db $98
L0141CA: db $7C
L0141CB: db $B3
L0141CC: db $78
L0141CD: db $56
L0141CE: db $B6
L0141CF: db $08
L0141D0: db $84
L0141D1: db $98
L0141D2: db $FC
L0141D3: db $E7
L0141D4: db $02
L0141D5: db $FF
L0141D6: db $03
L0141D7: db $EF
L0141D8: db $10
L0141D9: db $39
L0141DA: db $C6
L0141DB: db $F3
L0141DC: db $0C
L0141DD: db $09
L0141DE: db $40
L0141DF: db $43
L0141E0: db $18
L0141E1: db $09
L0141E2: db $7F
L0141E3: db $B1
L0141E4: db $7B
L0141E5: db $B5
L0141E6: db $08
L0141E7: db $F9
L0141E8: db $F0
L0141E9: db $40
L0141EA: db $E7
L0141EB: db $FB
L0141EC: db $98
L0141ED: db $80
L0141EE: db $CC
L0141EF: db $33
L0141F0: db $89
L0141F1: db $15
L0141F2: db $76
L0141F3: db $81
L0141F4: db $7E
L0141F5: db $40
L0141F6: db $FC
L0141F7: db $08
L0141F8: db $DC
L0141F9: db $08
L0141FA: db $16
L0141FB: db $98
L0141FC: db $FD
L0141FD: db $9A
L0141FE: db $08
L0141FF: db $02
L014200: db $FF
L014201: db $04
L014202: db $DF
L014203: db $00
L014204: db $8F
L014205: db $70
L014206: db $99
L014207: db $66
L014208: db $B1
L014209: db $4E
L01420A: db $69
L01420B: db $96
L01420C: db $AA
L01420D: db $A0
L01420E: db $26
L01420F: db $08
L014210: db $7C
L014211: db $08
L014212: db $EC
L014213: db $08
L014214: db $CC
L014215: db $E0
L014216: db $E2
L014217: db $FF
L014218: db $03
L014219: db $FE
L01421A: db $3C
L01421B: db $C2
L01421C: db $64
L01421D: db $9A
L01421E: db $00
L01421F: db $4C
L014220: db $B2
L014221: db $C8
L014222: db $36
L014223: db $F8
L014224: db $65
L014225: db $F0
L014226: db $6F
L014227: db $2B
L014228: db $FC
L014229: db $C3
L01422A: db $08
L01422B: db $FB
L01422C: db $08
L01422D: db $03
L01422E: db $FF
L01422F: db $04
L014230: db $08
L014231: db $3F
L014232: db $1F
L014233: db $60
L014234: db $33
L014235: db $F0
L014236: db $26
L014237: db $D9
L014238: db $66
L014239: db $1F
L01423A: db $99
L01423B: db $7F
L01423C: db $B3
L01423D: db $B0
L01423E: db $40
L01423F: db $C1
L014240: db $08
L014241: db $40
L014242: db $E0
L014243: db $E2
L014244: db $FF
L014245: db $03
L014246: db $F0
L014247: db $E0
L014248: db $10
L014249: db $20
L01424A: db $D0
L01424B: db $05
L01424C: db $60
L01424D: db $90
L01424E: db $40
L01424F: db $B0
L014250: db $C0
L014251: db $30
L014252: db $80
L014253: db $30
L014254: db $FF
L014255: db $08
L014256: db $30
L014257: db $78
L014258: db $30
L014259: db $08
L01425A: db $20
L01425B: db $0A
L01425C: db $07
L01425D: db $80
L01425E: db $01
L01425F: db $1F
L014260: db $0F
L014261: db $30
L014262: db $18
L014263: db $27
L014264: db $13
L014265: db $6C
L014266: db $02
L014267: db $33
L014268: db $4C
L014269: db $3F
L01426A: db $DF
L01426B: db $7F
L01426C: db $9E
L01426D: db $08
L01426E: db $B6
L01426F: db $B6
L014270: db $08
L014271: db $B3
L014272: db $08
L014273: db $E9
L014274: db $FF
L014275: db $E7
L014276: db $02
L014277: db $CF
L014278: db $CB
L014279: db $00
L01427A: db $F8
L01427B: db $78
L01427C: db $87
L01427D: db $E8
L01427E: db $CC
L01427F: db $09
L014280: db $A0
L014281: db $44
L014282: db $98
L014283: db $08
L014284: db $19
L014285: db $BF
L014286: db $59
L014287: db $08
L014288: db $4F
L014289: db $9F
L01428A: db $58
L01428B: db $60
L01428C: db $98
L01428D: db $DF
L01428E: db $E7
L01428F: db $FD
L014290: db $79
L014291: db $86
L014292: db $39
L014293: db $6B
L014294: db $C6
L014295: db $FA
L014296: db $09
L014297: db $99
L014298: db $0A
L014299: db $0F
L01429A: db $FA
L01429B: db $10
L01429C: db $FC
L01429D: db $E7
L01429E: db $02
L01429F: db $80
L0142A0: db $00
L0142A1: db $10
L0142A2: db $A0
L0142A3: db $66
L0142A4: db $91
L0142A5: db $15
L0142A6: db $6E
L0142A7: db $30
L0142A8: db $CF
L0142A9: db $38
L0142AA: db $DF
L0142AB: db $08
L0142AC: db $9B
L0142AD: db $08
L0142AE: db $5E
L0142AF: db $B3
L0142B0: db $08
L0142B1: db $33
L0142B2: db $79
L0142B3: db $99
L0142B4: db $E7
L0142B5: db $FD
L0142B6: db $90
L0142B7: db $05
L0142B8: db $6F
L0142B9: db $36
L0142BA: db $C9
L0142BB: db $26
L0142BC: db $D9
L0142BD: db $38
L0142BE: db $91
L0142BF: db $EC
L0142C0: db $62
L0142C1: db $7E
L0142C2: db $FF
L0142C3: db $06
L0142C4: db $C0
L0142C5: db $80
L0142C6: db $60
L0142C7: db $10
L0142C8: db $20
L0142C9: db $3F
L0142CA: db $40
L0142CB: db $A0
L0142CC: db $09
L0142CD: db $28
L0142CE: db $09
L0142CF: db $38
L0142D0: db $59
L0142D1: db $08
L0142D2: db $F2
L0142D3: db $40
L0142D4: db $89
L0142D5: db $08
L0142D6: db $20
L0142D7: db $10
L0142D8: db $2F
L0142D9: db $09
L0142DA: db $1E
L0142DB: db $06
L0142DC: db $23
L0142DD: db $05
L0142DE: db $3B
L0142DF: db $06
L0142E0: db $0B
L0142E1: db $18
L0142E2: db $08
L0142E3: db $07
L0142E4: db $D1
L0142E5: db $0F
L0142E6: db $0F
L0142E7: db $08
L0142E8: db $F8
L0142E9: db $0F
L0142EA: db $20
L0142EB: db $D0
L0142EC: db $09
L0142ED: db $56
L0142EE: db $A0
L0142EF: db $08
L0142F0: db $60
L0142F1: db $1C
L0142F2: db $E0
L0142F3: db $0F
L0142F4: db $0F
L0142F5: db $10
L0142F6: db $BC
L0142F7: db $F8
L0142F8: db $F0
L0142F9: db $08
L0142FA: db $07
L0142FB: db $07
L0142FC: db $07
L0142FD: db $0F
L0142FE: db $07
L0142FF: db $17
L014300: db $18
L014301: db $0C
L014302: db $33
L014303: db $10
L014304: db $27
L014305: db $77
L014306: db $07
L014307: db $07
L014308: db $82
L014309: db $00
L01430A: db $F0
L01430B: db $E0
L01430C: db $10
L01430D: db $20
L01430E: db $D0
L01430F: db $09
L014310: db $43
L014311: db $0A
L014312: db $BC
L014313: db $42
L014314: db $BD
L014315: db $6A
L014316: db $08
L014317: db $56
L014318: db $08
L014319: db $7F
L01431A: db $00
L01431B: db $80
L01431C: db $03
L01431D: db $FC
L01431E: db $07
L01431F: db $19
L014320: db $0F
L014321: db $33
L014322: db $1F
L014323: db $17
L014324: db $67
L014325: db $3F
L014326: db $CF
L014327: db $58
L014328: db $9E
L014329: db $08
L01432A: db $A8
L01432B: db $08
L01432C: db $61
L01432D: db $BF
L01432E: db $0A
L01432F: db $98
L014330: db $00
L014331: db $FF
L014332: db $C2
L014333: db $3D
L014334: db $FB
L014335: db $40
L014336: db $D6
L014337: db $28
L014338: db $AE
L014339: db $79
L01433A: db $5C
L01433B: db $F3
L01433C: db $F8
L01433D: db $E6
L01433E: db $03
L01433F: db $F0
L014340: db $CC
L014341: db $E0
L014342: db $98
L014343: db $C0
L014344: db $30
L014345: db $B0
L014346: db $C0
L014347: db $2F
L014348: db $FE
L014349: db $01
L01434A: db $08
L01434B: db $FD
L01434C: db $0A
L01434D: db $28
L01434E: db $F9
L01434F: db $08
L014350: db $E0
L014351: db $07
L014352: db $07
L014353: db $07
L014354: db $3F
L014355: db $1F
L014356: db $60
L014357: db $30
L014358: db $CF
L014359: db $BC
L01435A: db $10
L01435B: db $9F
L01435C: db $77
L01435D: db $07
L01435E: db $07
L01435F: db $00
L014360: db $FC
L014361: db $F8
L014362: db $10
L014363: db $06
L014364: db $0C
L014365: db $F3
L014366: db $10
L014367: db $F9
L014368: db $43
L014369: db $BC
L01436A: db $42
L01436B: db $09
L01436C: db $BD
L01436D: db $7E
L01436E: db $81
L01436F: db $07
L014370: db $61
L014371: db $0B
L014372: db $05
L014373: db $08
L014374: db $FB
L014375: db $29
L014376: db $49
L014377: db $08
L014378: db $69
L014379: db $0A
L01437A: db $7F
L01437B: db $A8
L01437C: db $08
L01437D: db $02
L01437E: db $9F
L01437F: db $3F
L014380: db $CF
L014381: db $1F
L014382: db $60
L014383: db $00
L014384: db $20
L014385: db $C2
L014386: db $54
L014387: db $3D
L014388: db $F9
L014389: db $6A
L01438A: db $08
L01438B: db $D6
L01438C: db $28
L01438D: db $AE
L01438E: db $F9
L01438F: db $5F
L014390: db $56
L014391: db $08
L014392: db $FE
L014393: db $28
L014394: db $ED
L014395: db $09
L014396: db $49
L014397: db $08
L014398: db $87
L014399: db $68
L01439A: db $FC
L01439B: db $F3
L01439C: db $F8
L01439D: db $06
L01439E: db $F8
L01439F: db $20
L0143A0: db $08
L0143A1: db $E0
L0143A2: db $07
L0143A3: db $07
L0143A4: db $07
L0143A5: db $3F
L0143A6: db $1F
L0143A7: db $60
L0143A8: db $30
L0143A9: db $CF
L0143AA: db $BC
L0143AB: db $10
L0143AC: db $9F
L0143AD: db $77
L0143AE: db $07
L0143AF: db $07
L0143B0: db $00
L0143B1: db $FC
L0143B2: db $F8
L0143B3: db $11
L0143B4: db $06
L0143B5: db $0C
L0143B6: db $F3
L0143B7: db $10
L0143B8: db $F9
L0143B9: db $04
L0143BA: db $1B
L0143BB: db $28
L0143BC: db $10
L0143BD: db $13
L0143BE: db $0D
L0143BF: db $36
L0143C0: db $20
L0143C1: db $24
L0143C2: db $17
L0143C3: db $6C
L0143C4: db $3F
L0143C5: db $05
L0143C6: db $48
L0143C7: db $3D
L0143C8: db $DA
L0143C9: db $7F
L0143CA: db $90
L0143CB: db $08
L0143CC: db $BF
L0143CD: db $0C
L0143CE: db $14
L0143CF: db $80
L0143D0: db $01
L0143D1: db $FE
L0143D2: db $08
L0143D3: db $02
L0143D4: db $09
L0143D5: db $00
L0143D6: db $03
L0143D7: db $2A
L0143D8: db $08
L0143D9: db $F4
L0143DA: db $09
L0143DB: db $58
L0143DC: db $08
L0143DD: db $A8
L0143DE: db $1C
L0143DF: db $F8
L0143E0: db $57
L0143E1: db $F7
L0143E2: db $A0
L0143E3: db $F1
L0143E4: db $08
L0143E5: db $FD
L0143E6: db $0C
L0143E7: db $38
L0143E8: db $59
L0143E9: db $D7
L0143EA: db $08
L0143EB: db $79
L0143EC: db $04
L0143ED: db $F8
L0143EE: db $FC
L0143EF: db $08
L0143F0: db $07
L0143F1: db $07
L0143F2: db $90
L0143F3: db $07
L0143F4: db $07
L0143F5: db $03
L0143F6: db $E8
L0143F7: db $02
L0143F8: db $0D
L0143F9: db $06
L0143FA: db $09
L0143FB: db $F2
L0143FC: db $77
L0143FD: db $07
L0143FE: db $07
L0143FF: db $00
L014400: db $FC
L014401: db $F8
L014402: db $F8
L014403: db $08
L014404: db $41
L014405: db $F4
L014406: db $09
L014407: db $43
L014408: db $BC
L014409: db $42
L01440A: db $BD
L01440B: db $6A
L01440C: db $08
L01440D: db $65
L01440E: db $57
L01440F: db $28
L014410: db $18
L014411: db $BF
L014412: db $55
L014413: db $08
L014414: db $7F
L014415: db $28
L014416: db $2F
L014417: db $7E
L014418: db $81
L014419: db $B8
L01441A: db $FF
L01441B: db $19
L01441C: db $08
L01441D: db $78
L01441E: db $49
L01441F: db $83
L014420: db $08
L014421: db $9F
L014422: db $3F
L014423: db $CF
L014424: db $1F
L014425: db $60
L014426: db $68
L014427: db $20
L014428: db $38
L014429: db $FE
L01442A: db $01
L01442B: db $18
L01442C: db $10
L01442D: db $08
L01442E: db $FC
L01442F: db $F8
L014430: db $06
L014431: db $0B
L014432: db $AC
L014433: db $F3
L014434: db $56
L014435: db $F9
L014436: db $40
L014437: db $3D
L014438: db $C9
L014439: db $0D
L01443A: db $FF
L01443B: db $49
L01443C: db $08
L01443D: db $68
L01443E: db $A0
L01443F: db $88
L014440: db $A9
L014441: db $C9
L014442: db $08
L014443: db $E0
L014444: db $07
L014445: db $07
L014446: db $07
L014447: db $FF
L014448: db $7F
L014449: db $80
L01444A: db $40
L01444B: db $BF
L01444C: db $F8
L01444D: db $09
L01444E: db $77
L01444F: db $07
L014450: db $07
L014451: db $F9
L014452: db $FE
L014453: db $01
L014454: db $02
L014455: db $40
L014456: db $FD
L014457: db $09
L014458: db $79
L014459: db $40
L01445A: db $00
L01445B: db $70
L01445C: db $20
L01445D: db $38
L01445E: db $10
L01445F: db $3C
L014460: db $18
L014461: db $1E
L014462: db $0C
L014463: db $02
L014464: db $0E
L014465: db $04
L014466: db $0F
L014467: db $06
L014468: db $07
L014469: db $03
L01446A: db $00
L01446B: db $01
L01446C: db $A0
L01446D: db $19
L01446E: db $1F
L01446F: db $38
L014470: db $3E
L014471: db $1C
L014472: db $7C
L014473: db $30
L014474: db $F0
L014475: db $17
L014476: db $60
L014477: db $E0
L014478: db $80
L014479: db $00
L01447A: db $00
L01447B: db $03
L01447C: db $90
L01447D: db $08
L01447E: db $E0
L01447F: db $A9
L014480: db $D8
L014481: db $A9
L014482: db $0E
L014483: db $7E
L014484: db $18
L014485: db $F8
L014486: db $70
L014487: db $BE
L014488: db $A8
L014489: db $C0
L01448A: db $00
L01448B: db $A0
L01448C: db $B8
L01448D: db $10
L01448E: db $08
L01448F: db $40
L014490: db $82
L014491: db $E9
L014492: db $78
L014493: db $30
L014494: db $38
L014495: db $10
L014496: db $3C
L014497: db $88
L014498: db $1E
L014499: db $28
L01449A: db $0C
L01449B: db $3E
L01449C: db $E8
L01449D: db $7F
L01449E: db $10
L01449F: db $FE
L0144A0: db $7D
L0144A1: db $FC
L0144A2: db $09
L0144A3: db $7B
L0144A4: db $7C
L0144A5: db $3B
L0144A6: db $3F
L0144A7: db $48
L0144A8: db $0F
L0144A9: db $07
L0144AA: db $00
L0144AB: db $7E
L0144AC: db $01
L0144AD: db $00
L0144AE: db $28
L0144AF: db $07
L0144B0: db $07
L0144B1: db $07
L0144B2: db $05
L0144B3: db $80
L0144B4: db $AF
L0144B5: db $0E
L0144B6: db $C0
L0144B7: db $10
L0144B8: db $E0
L0144B9: db $10
L0144BA: db $09
L0144BB: db $00
L0144BC: db $B7
L0144BD: db $80
L0144BE: db $03
L0144BF: db $7F
L0144C0: db $3F
L0144C1: db $40
L0144C2: db $20
L0144C3: db $5F
L0144C4: db $33
L0144C5: db $4C
L0144C6: db $02
L0144C7: db $32
L0144C8: db $4D
L0144C9: db $3E
L0144CA: db $D9
L0144CB: db $7D
L0144CC: db $9A
L0144CD: db $08
L0144CE: db $B2
L0144CF: db $2B
L0144D0: db $79
L0144D1: db $B6
L0144D2: db $08
L0144D3: db $86
L0144D4: db $98
L0144D5: db $FF
L0144D6: db $E7
L0144D7: db $02
L0144D8: db $C3
L0144D9: db $58
L0144DA: db $61
L0144DB: db $66
L0144DC: db $99
L0144DD: db $CC
L0144DE: db $33
L0144DF: db $09
L0144E0: db $38
L0144E1: db $E5
L0144E2: db $30
L0144E3: db $0A
L0144E4: db $30
L0144E5: db $FE
L0144E6: db $CD
L0144E7: db $08
L0144E8: db $01
L0144E9: db $FF
L0144EA: db $A0
L0144EB: db $04
L0144EC: db $CF
L0144ED: db $00
L0144EE: db $30
L0144EF: db $79
L0144F0: db $86
L0144F1: db $63
L0144F2: db $9C
L0144F3: db $28
L0144F4: db $03
L0144F5: db $FC
L0144F6: db $A0
L0144F7: db $D9
L0144F8: db $08
L0144F9: db $19
L0144FA: db $7F
L0144FB: db $B3
L0144FC: db $B8
L0144FD: db $0A
L0144FE: db $80
L0144FF: db $FF
L014500: db $04
L014501: db $58
L014502: db $FE
L014503: db $01
L014504: db $82
L014505: db $01
L014506: db $7D
L014507: db $3E
L014508: db $C1
L014509: db $38
L01450A: db $C7
L01450B: db $F8
L01450C: db $F5
L01450D: db $08
L01450E: db $15
L01450F: db $85
L014510: db $F0
L014511: db $0D
L014512: db $08
L014513: db $E9
L014514: db $08
L014515: db $09
L014516: db $98
L014517: db $E0
L014518: db $40
L014519: db $E7
L01451A: db $02
L01451B: db $3F
L01451C: db $1F
L01451D: db $60
L01451E: db $30
L01451F: db $CF
L014520: db $02
L014521: db $66
L014522: db $99
L014523: db $4E
L014524: db $B1
L014525: db $FF
L014526: db $33
L014527: db $08
L014528: db $63
L014529: db $E3
L01452A: db $08
L01452B: db $40
L01452C: db $08
L01452D: db $3C
L01452E: db $7E
L01452F: db $81
L014530: db $98
L014531: db $20
L014532: db $E1
L014533: db $E7
L014534: db $02
L014535: db $58
L014536: db $BF
L014537: db $40
L014538: db $E6
L014539: db $19
L01453A: db $F9
L01453B: db $28
L01453C: db $6C
L01453D: db $93
L01453E: db $40
L01453F: db $36
L014540: db $D9
L014541: db $FE
L014542: db $39
L014543: db $7C
L014544: db $18
L014545: db $B3
L014546: db $78
L014547: db $87
L014548: db $FF
L014549: db $FD
L01454A: db $DF
L01454B: db $20
L01454C: db $70
L01454D: db $05
L01454E: db $8F
L01454F: db $67
L014550: db $98
L014551: db $E7
L014552: db $18
L014553: db $40
L014554: db $3E
L014555: db $08
L014556: db $57
L014557: db $30
L014558: db $08
L014559: db $60
L01455A: db $08
L01455B: db $7C
L01455C: db $E2
L01455D: db $FF
L01455E: db $FC
L01455F: db $86
L014560: db $61
L014561: db $61
L014562: db $9E
L014563: db $CC
L014564: db $33
L014565: db $09
L014566: db $38
L014567: db $7E
L014568: db $8A
L014569: db $08
L01456A: db $78
L01456B: db $FE
L01456C: db $D9
L01456D: db $08
L01456E: db $CD
L01456F: db $08
L014570: db $01
L014571: db $EA
L014572: db $FF
L014573: db $07
L014574: db $02
L014575: db $80
L014576: db $08
L014577: db $C0
L014578: db $10
L014579: db $40
L01457A: db $E1
L01457B: db $0D
L01457C: db $49
L01457D: db $69
L01457E: db $07
L01457F: db $1B
L014580: db $0F
L014581: db $13
L014582: db $08
L014583: db $44
L014584: db $17
L014585: db $08
L014586: db $37
L014587: db $1F
L014588: db $27
L014589: db $08
L01458A: db $2F
L01458B: db $15
L01458C: db $00
L01458D: db $6F
L01458E: db $3A
L01458F: db $4F
L014590: db $35
L014591: db $5F
L014592: db $2A
L014593: db $DD
L014594: db $63
L014595: db $04
L014596: db $9C
L014597: db $47
L014598: db $B8
L014599: db $44
L01459A: db $BB
L01459B: db $09
L01459C: db $7C
L01459D: db $82
L01459E: db $82
L01459F: db $F8
L0145A0: db $FE
L0145A1: db $DF
L0145A2: db $A0
L0145A3: db $FF
L0145A4: db $8E
L0145A5: db $08
L0145A6: db $1C
L0145A7: db $80
L0145A8: db $30
L0145A9: db $39
L0145AA: db $FC
L0145AB: db $73
L0145AC: db $F8
L0145AD: db $E6
L0145AE: db $70
L0145AF: db $CC
L0145B0: db $38
L0145B1: db $E0
L0145B2: db $98
L0145B3: db $19
L0145B4: db $D0
L0145B5: db $38
L0145B6: db $0C
L0145B7: db $F3
L0145B8: db $86
L0145B9: db $01
L0145BA: db $79
L0145BB: db $C3
L0145BC: db $3C
L0145BD: db $61
L0145BE: db $9E
L0145BF: db $3F
L0145C0: db $C0
L0145C1: db $F8
L0145C2: db $5E
L0145C3: db $7F
L0145C4: db $08
L0145C5: db $80
L0145C6: db $0E
L0145C7: db $07
L0145C8: db $03
L0145C9: db $A8
L0145CA: db $3E
L0145CB: db $5C
L0145CC: db $C1
L0145CD: db $08
L0145CE: db $DD
L0145CF: db $0A
L0145D0: db $28
L0145D1: db $48
L0145D2: db $FF
L0145D3: db $0F
L0145D4: db $45
L0145D5: db $13
L0145D6: db $08
L0145D7: db $37
L0145D8: db $1F
L0145D9: db $27
L0145DA: db $08
L0145DB: db $2F
L0145DC: db $08
L0145DD: db $00
L0145DE: db $6E
L0145DF: db $3F
L0145E0: db $4E
L0145E1: db $35
L0145E2: db $5E
L0145E3: db $2B
L0145E4: db $DC
L0145E5: db $76
L0145E6: db $00
L0145E7: db $9D
L0145E8: db $6A
L0145E9: db $BD
L0145EA: db $46
L0145EB: db $B9
L0145EC: db $47
L0145ED: db $B8
L0145EE: db $60
L0145EF: db $1E
L0145F0: db $9F
L0145F1: db $30
L0145F2: db $CF
L0145F3: db $98
L0145F4: db $20
L0145F5: db $F8
L0145F6: db $A0
L0145F7: db $FE
L0145F8: db $16
L0145F9: db $F9
L0145FA: db $FF
L0145FB: db $FC
L0145FC: db $08
L0145FD: db $0E
L0145FE: db $60
L0145FF: db $E8
L014600: db $BF
L014601: db $CE
L014602: db $E8
L014603: db $50
L014604: db $DE
L014605: db $37
L014606: db $E8
L014607: db $D8
L014608: db $E8
L014609: db $56
L01460A: db $80
L01460B: db $E8
L01460C: db $EE
L01460D: db $39
L01460E: db $84
L01460F: db $7B
L014610: db $8C
L014611: db $72
L014612: db $08
L014613: db $05
L014614: db $F6
L014615: db $18
L014616: db $E4
L014617: db $F0
L014618: db $0C
L014619: db $F8
L01461A: db $F8
L01461B: db $08
L01461C: db $78
L01461D: db $80
L01461E: db $0F
L01461F: db $0F
L014620: db $08
L014621: db $01
L014622: db $7F
L014623: db $3E
L014624: db $41
L014625: db $BF
L014626: db $08
L014627: db $5D
L014628: db $0A
L014629: db $28
L01462A: db $49
L01462B: db $6A
L01462C: db $07
L01462D: db $07
L01462E: db $E7
L01462F: db $07
L014630: db $01
L014631: db $E8
L014632: db $3E
L014633: db $41
L014634: db $57
L014635: db $07
L014636: db $07
L014637: db $BC
L014638: db $06
L014639: db $FC
L01463A: db $47
L01463B: db $07
L01463C: db $07
L01463D: db $04
L01463E: db $7F
L01463F: db $3F
L014640: db $78
L014641: db $C0
L014642: db $57
L014643: db $07
L014644: db $07
L014645: db $04
L014646: db $F0
L014647: db $E0
L014648: db $18
L014649: db $C4
L01464A: db $57
L01464B: db $02
L01464C: db $1F
L01464D: db $0F
L01464E: db $30
L01464F: db $70
L014650: db $27
L014651: db $12
L014652: db $01
L014653: db $6D
L014654: db $32
L014655: db $4D
L014656: db $3F
L014657: db $D9
L014658: db $7F
L014659: db $99
L01465A: db $08
L01465B: db $55
L01465C: db $B3
L01465D: db $08
L01465E: db $BE
L01465F: db $08
L014660: db $80
L014661: db $98
L014662: db $FF
L014663: db $E7
L014664: db $C1
L014665: db $02
L014666: db $58
L014667: db $DF
L014668: db $20
L014669: db $70
L01466A: db $8F
L01466B: db $66
L01466C: db $C8
L01466D: db $D5
L01466E: db $09
L01466F: db $40
L014670: db $BF
L014671: db $08
L014672: db $3C
L014673: db $08
L014674: db $6C
L014675: db $08
L014676: db $FE
L014677: db $40
L014678: db $E2
L014679: db $FF
L01467A: db $03
L01467B: db $F0
L01467C: db $E0
L01467D: db $F0
L01467E: db $D9
L01467F: db $07
L014680: db $26
L014681: db $71
L014682: db $8E
L014683: db $69
L014684: db $96
L014685: db $A0
L014686: db $28
L014687: db $08
L014688: db $57
L014689: db $7C
L01468A: db $08
L01468B: db $EC
L01468C: db $08
L01468D: db $CD
L01468E: db $FF
L01468F: db $06
L014690: db $58
L014691: db $00
L014692: db $79
L014693: db $86
L014694: db $49
L014695: db $B6
L014696: db $CB
L014697: db $34
L014698: db $9E
L014699: db $61
L01469A: db $B6
L01469B: db $40
L01469C: db $6D
L01469D: db $08
L01469E: db $01
L01469F: db $E7
L0146A0: db $08
L0146A1: db $68
L0146A2: db $CF
L0146A3: db $60
L0146A4: db $30
L0146A5: db $FF
L0146A6: db $04
L0146A7: db $F1
L0146A8: db $E0
L0146A9: db $13
L0146AA: db $21
L0146AB: db $D2
L0146AC: db $80
L0146AD: db $08
L0146AE: db $D6
L0146AF: db $63
L0146B0: db $94
L0146B1: db $C3
L0146B2: db $BD
L0146B3: db $C7
L0146B4: db $29
L0146B5: db $23
L0146B6: db $87
L0146B7: db $6B
L0146B8: db $08
L0146B9: db $49
L0146BA: db $03
L0146BB: db $CC
L0146BC: db $98
L0146BD: db $20
L0146BE: db $C8
L0146BF: db $E7
L0146C0: db $02
L0146C1: db $FE
L0146C2: db $FC
L0146C3: db $80
L0146C4: db $86
L0146C5: db $79
L0146C6: db $33
L0146C7: db $85
L0146C8: db $98
L0146C9: db $3F
L0146CA: db $C0
L0146CB: db $FF
L0146CC: db $B9
L0146CD: db $08
L0146CE: db $93
L0146CF: db $08
L0146D0: db $5F
L0146D1: db $37
L0146D2: db $08
L0146D3: db $E6
L0146D4: db $08
L0146D5: db $99
L0146D6: db $12
L0146D7: db $07
L0146D8: db $59
L0146D9: db $00
L0146DA: db $7B
L0146DB: db $84
L0146DC: db $CE
L0146DD: db $31
L0146DE: db $8C
L0146DF: db $73
L0146E0: db $4C
L0146E1: db $B3
L0146E2: db $A2
L0146E3: db $40
L0146E4: db $36
L0146E5: db $DA
L0146E6: db $6C
L0146E7: db $FE
L0146E8: db $6D
L0146E9: db $08
L0146EA: db $01
L0146EB: db $C0
L0146EC: db $FF
L0146ED: db $FD
L0146EE: db $CF
L0146EF: db $30
L0146F0: db $79
L0146F1: db $86
L0146F2: db $63
L0146F3: db $9C
L0146F4: db $28
L0146F5: db $03
L0146F6: db $FC
L0146F7: db $40
L0146F8: db $D9
L0146F9: db $08
L0146FA: db $19
L0146FB: db $7F
L0146FC: db $B3
L0146FD: db $B0
L0146FE: db $0A
L0146FF: db $80
L014700: db $FF
L014701: db $FD
L014702: db $FE
L014703: db $01
L014704: db $82
L014705: db $7D
L014706: db $02
L014707: db $3E
L014708: db $C1
L014709: db $38
L01470A: db $C7
L01470B: db $F8
L01470C: db $F4
L01470D: db $08
L01470E: db $84
L01470F: db $2B
L014710: db $F0
L014711: db $0C
L014712: db $08
L014713: db $E8
L014714: db $08
L014715: db $08
L014716: db $98
L014717: db $40
L014718: db $C0
L014719: db $E7
L01471A: db $02
L01471B: db $1F
L01471C: db $0F
L01471D: db $10
L01471E: db $09
L01471F: db $36
L014720: db $19
L014721: db $04
L014722: db $26
L014723: db $13
L014724: db $6C
L014725: db $3F
L014726: db $4D
L014727: db $08
L014728: db $DF
L014729: db $7F
L01472A: db $45
L01472B: db $9C
L01472C: db $08
L01472D: db $B0
L01472E: db $79
L01472F: db $86
L014730: db $98
L014731: db $FF
L014732: db $E7
L014733: db $C0
L014734: db $02
L014735: db $58
L014736: db $3D
L014737: db $C2
L014738: db $27
L014739: db $D8
L01473A: db $66
L01473B: db $99
L01473C: db $2A
L01473D: db $CC
L01473E: db $33
L01473F: db $40
L014740: db $B3
L014741: db $08
L014742: db $E6
L014743: db $0A
L014744: db $C3
L014745: db $30
L014746: db $E7
L014747: db $18
L014748: db $FF
L014749: db $FD
L01474A: db $F9
L01474B: db $06
L01474C: db $0F
L01474D: db $F0
L01474E: db $D7
L01474F: db $F9
L014750: db $C0
L014751: db $19
L014752: db $40
L014753: db $33
L014754: db $0A
L014755: db $40
L014756: db $08
L014757: db $18
L014758: db $C6
L014759: db $EF
L01475A: db $10
L01475B: db $FF
L01475C: db $FD
L01475D: db $FE
L01475E: db $01
L01475F: db $32
L014760: db $00
L014761: db $CD
L014762: db $26
L014763: db $D9
L014764: db $04
L014765: db $FB
L014766: db $FC
L014767: db $F2
L014768: db $F8
L014769: db $45
L01476A: db $76
L01476B: db $08
L01476C: db $64
L01476D: db $F0
L01476E: db $6C
L01476F: db $08
L014770: db $08
L014771: db $98
L014772: db $E1
L014773: db $30
L014774: db $E7
L014775: db $02
L014776: db $1F
L014777: db $0F
L014778: db $30
L014779: db $19
L01477A: db $F0
L01477B: db $40
L01477C: db $13
L01477D: db $A8
L01477E: db $33
L01477F: db $4C
L014780: db $3F
L014781: db $D8
L014782: db $7F
L014783: db $98
L014784: db $AA
L014785: db $08
L014786: db $B0
L014787: db $08
L014788: db $BE
L014789: db $08
L01478A: db $80
L01478B: db $98
L01478C: db $FF
L01478D: db $F0
L01478E: db $E7
L01478F: db $02
L014790: db $58
L014791: db $B8
L014792: db $C0
L014793: db $61
L014794: db $9E
L014795: db $CC
L014796: db $95
L014797: db $F0
L014798: db $9C
L014799: db $63
L01479A: db $40
L01479B: db $66
L01479C: db $08
L01479D: db $C6
L01479E: db $08
L01479F: db $C6
L0147A0: db $40
L0147A1: db $08
L0147A2: db $78
L0147A3: db $FC
L0147A4: db $03
L0147A5: db $FF
L0147A6: db $FF
L0147A7: db $E1
L0147A8: db $4A
L0147A9: db $1E
L0147AA: db $F9
L0147AB: db $CF
L0147AC: db $30
L0147AD: db $40
L0147AE: db $1C
L0147AF: db $08
L0147B0: db $06
L0147B1: db $A3
L0147B2: db $08
L0147B3: db $CE
L0147B4: db $08
L0147B5: db $7C
L0147B6: db $FE
L0147B7: db $01
L0147B8: db $FF
L0147B9: db $FD
L0147BA: db $00
L0147BB: db $7F
L0147BC: db $80
L0147BD: db $C0
L0147BE: db $3F
L0147BF: db $E7
L0147C0: db $18
L0147C1: db $E4
L0147C2: db $1B
L0147C3: db $88
L0147C4: db $C0
L0147C5: db $B2
L0147C6: db $F8
L0147C7: db $36
L0147C8: db $08
L0147C9: db $64
L0147CA: db $F0
L0147CB: db $6C
L0147CC: db $BE
L0147CD: db $08
L0147CE: db $08
L0147CF: db $98
L0147D0: db $30
L0147D1: db $E7
L0147D2: db $07
L0147D3: db $06
L0147D4: db $C0
L0147D5: db $3C
L0147D6: db $80
L0147D7: db $40
L0147D8: db $0B
L0147D9: db $39
L0147DA: db $87
L0147DB: db $02
L0147DC: db $7F
L0147DD: db $3F
L0147DE: db $80
L0147DF: db $78
L0147E0: db $26
L0147E1: db $59
L0147E2: db $24
L0147E3: db $5B
L0147E4: db $31
L0147E5: db $4E
L0147E6: db $27
L0147E7: db $10
L0147E8: db $D8
L0147E9: db $7D
L0147EA: db $9A
L0147EB: db $08
L0147EC: db $B2
L0147ED: db $79
L0147EE: db $B6
L0147EF: db $78
L0147F0: db $5B
L0147F1: db $87
L0147F2: db $98
L0147F3: db $FD
L0147F4: db $E7
L0147F5: db $02
L0147F6: db $FF
L0147F7: db $00
L0147F8: db $10
L0147F9: db $02
L0147FA: db $61
L0147FB: db $9E
L0147FC: db $CC
L0147FD: db $33
L0147FE: db $9C
L0147FF: db $63
L014800: db $38
L014801: db $66
L014802: db $BC
L014803: db $08
L014804: db $C6
L014805: db $08
L014806: db $40
L014807: db $08
L014808: db $F0
L014809: db $FC
L01480A: db $03
L01480B: db $E4
L01480C: db $99
L01480D: db $E7
L01480E: db $FB
L01480F: db $7F
L014810: db $80
L014811: db $B0
L014812: db $39
L014813: db $CE
L014814: db $7C
L014815: db $31
L014816: db $F9
L014817: db $09
L014818: db $FA
L014819: db $40
L01481A: db $08
L01481B: db $7C
L01481C: db $FE
L01481D: db $60
L01481E: db $01
L01481F: db $FF
L014820: db $06
L014821: db $E0
L014822: db $C0
L014823: db $20
L014824: db $40
L014825: db $A0
L014826: db $CF
L014827: db $09
L014828: db $29
L014829: db $80
L01482A: db $60
L01482B: db $08
L01482C: db $30
L01482D: db $68
L01482E: db $30
L01482F: db $F9
L014830: db $08
L014831: db $20
L014832: db $0A
L014833: db $07
L014834: db $01
L014835: db $7F
L014836: db $3F
L014837: db $98
L014838: db $0D
L014839: db $21
L01483A: db $5E
L01483B: db $33
L01483C: db $4C
L01483D: db $09
L01483E: db $38
L01483F: db $D9
L014840: db $50
L014841: db $5B
L014842: db $99
L014843: db $08
L014844: db $B3
L014845: db $0A
L014846: db $E9
L014847: db $FF
L014848: db $E7
L014849: db $02
L01484A: db $01
L01484B: db $FE
L01484C: db $FC
L01484D: db $03
L01484E: db $86
L01484F: db $79
L014850: db $32
L014851: db $CD
L014852: db $09
L014853: db $A2
L014854: db $40
L014855: db $F9
L014856: db $48
L014857: db $83
L014858: db $C0
L014859: db $3E
L01485A: db $E0
L01485B: db $60
L01485C: db $BC
L01485D: db $08
L01485E: db $40
L01485F: db $98
L014860: db $30
L014861: db $E7
L014862: db $02
L014863: db $1F
L014864: db $0F
L014865: db $05
L014866: db $30
L014867: db $18
L014868: db $27
L014869: db $13
L01486A: db $2C
L01486B: db $30
L01486C: db $20
L01486D: db $08
L01486E: db $05
L01486F: db $63
L014870: db $3F
L014871: db $CE
L014872: db $7F
L014873: db $98
L014874: db $08
L014875: db $BF
L014876: db $08
L014877: db $5D
L014878: db $80
L014879: db $98
L01487A: db $FF
L01487B: db $E7
L01487C: db $02
L01487D: db $58
L01487E: db $CF
L01487F: db $F8
L014880: db $0D
L014881: db $78
L014882: db $87
L014883: db $33
L014884: db $CC
L014885: db $09
L014886: db $40
L014887: db $9F
L014888: db $08
L014889: db $25
L01488A: db $18
L01488B: db $FC
L01488C: db $30
L01488D: db $F8
L01488E: db $36
L01488F: db $08
L014890: db $04
L014891: db $98
L014892: db $F0
L014893: db $30
L014894: db $E7
L014895: db $07
L014896: db $00
L014897: db $E0
L014898: db $C0
L014899: db $30
L01489A: db $60
L01489B: db $1F
L01489C: db $90
L01489D: db $20
L01489E: db $D0
L01489F: db $09
L0148A0: db $40
L0148A1: db $28
L0148A2: db $49
L0148A3: db $69

OBJInfoInit_Play_CharCross:
	db $00 ; iOBJInfo_Status
	db $10 ; iOBJInfo_OBJLstFlags
	db $00 ; iOBJInfo_OBJLstFlagsView
	db $60 ; iOBJInfo_X
	db $00 ; iOBJInfo_XSub
	db $68 ; iOBJInfo_Y
	db $00 ; iOBJInfo_YSub
	db $00 ; iOBJInfo_SpeedX
	db $00 ; iOBJInfo_SpeedXSub
	db $00 ; iOBJInfo_SpeedY
	db $00 ; iOBJInfo_SpeedYSub
	db $00 ; iOBJInfo_RelX (auto)
	db $00 ; iOBJInfo_RelY (auto)
	db $80 ; iOBJInfo_TileIDBase
	db LOW($8800) ; iOBJInfo_VRAMPtr_Low
	db HIGH($8800) ; iOBJInfo_VRAMPtr_High
	db BANK(OBJLstPtrTable_CharCross) ; iOBJInfo_BankNum (BANK $01)
	db LOW(OBJLstPtrTable_CharCross) ; iOBJInfo_OBJLstPtrTbl_Low
	db HIGH(OBJLstPtrTable_CharCross) ; iOBJInfo_OBJLstPtrTbl_High
	db $00 ; iOBJInfo_OBJLstPtrTblOffset
	db BANK(OBJLstPtrTable_CharCross) ; iOBJInfo_BankNum (BANK $01)
	db LOW(OBJLstPtrTable_CharCross) ; iOBJInfo_OBJLstPtrTbl_Low
	db HIGH(OBJLstPtrTable_CharCross) ; iOBJInfo_OBJLstPtrTbl_High
	db $00 ; iOBJInfo_OBJLstPtrTblOffset
	db $00 ; iOBJInfo_ColiBoxId (auto)
	db $00 ; iOBJInfo_HitboxId (auto)
	db $00 ; iOBJInfo_ForceHitboxId
	db $00 ; iOBJInfo_FrameLeft
	db $00 ; iOBJInfo_FrameTotal
	db $00 ; iOBJInfo_BufInfoPtr_Low
	db $00 ; iOBJInfo_BufInfoPtr_High
OBJInfoInit_Play_RoundText:
	db $00 ; iOBJInfo_Status
	db $10 ; iOBJInfo_OBJLstFlags
	db $00 ; iOBJInfo_OBJLstFlagsView
	db $80 ; iOBJInfo_X
	db $00 ; iOBJInfo_XSub
	db $60 ; iOBJInfo_Y
	db $00 ; iOBJInfo_YSub
	db $00 ; iOBJInfo_SpeedX
	db $00 ; iOBJInfo_SpeedXSub
	db $00 ; iOBJInfo_SpeedY
	db $00 ; iOBJInfo_SpeedYSub
	db $00 ; iOBJInfo_RelX (auto)
	db $00 ; iOBJInfo_RelY (auto)
	db $80 ; iOBJInfo_TileIDBase
	db LOW($8800) ; iOBJInfo_VRAMPtr_Low
	db HIGH($8800) ; iOBJInfo_VRAMPtr_High
	db BANK(OBJLstPtrTable_PreRoundText) ; iOBJInfo_BankNum (BANK $01)
	db LOW(OBJLstPtrTable_PreRoundText) ; iOBJInfo_OBJLstPtrTbl_Low
	db HIGH(OBJLstPtrTable_PreRoundText) ; iOBJInfo_OBJLstPtrTbl_High
	db $00 ; iOBJInfo_OBJLstPtrTblOffset
	db BANK(OBJLstPtrTable_PreRoundText) ; iOBJInfo_BankNum (BANK $01)
	db LOW(OBJLstPtrTable_PreRoundText) ; iOBJInfo_OBJLstPtrTbl_Low
	db HIGH(OBJLstPtrTable_PreRoundText) ; iOBJInfo_OBJLstPtrTbl_High
	db $00 ; iOBJInfo_OBJLstPtrTblOffset
	db $00 ; iOBJInfo_ColiBoxId (auto)
	db $00 ; iOBJInfo_HitboxId (auto)
	db $00 ; iOBJInfo_ForceHitboxId
	db $00 ; iOBJInfo_FrameLeft
	db $00 ; iOBJInfo_FrameTotal
	db $00 ; iOBJInfo_BufInfoPtr_Low
	db $00 ; iOBJInfo_BufInfoPtr_High
OBJLstPtrTable_CharCross: db $28
L0148E3: db $49
L0148E4: db $FF
L0148E5: db $FF
L0148E6: db $FF;X
L0148E7: db $FF;X
OBJLstPtrTable_TerryHat: db $39
L0148E9: db $49
L0148EA: db $FF
L0148EB: db $FF
L0148EC: db $4A
L0148ED: db $49
L0148EE: db $FF
L0148EF: db $FF
L0148F0: db $FF;X
L0148F1: db $FF
OBJLstPtrTable_PreRoundText: db $54
L0148F3: db $49
L0148F4: db $FF
L0148F5: db $FF
L0148F6: db $7D
L0148F7: db $49
L0148F8: db $FF
L0148F9: db $FF
L0148FA: db $9D
L0148FB: db $49
L0148FC: db $FF
L0148FD: db $FF
L0148FE: db $B7
L0148FF: db $49
L014900: db $FF
L014901: db $FF
L014902: db $CE
L014903: db $49
L014904: db $FF
L014905: db $FF
L014906: db $FF;X
L014907: db $FF;X
OBJLstPtrTable_PostRoundText0: db $FD
L014909: db $49
L01490A: db $FF
L01490B: db $FF
L01490C: db $26
L01490D: db $4A
L01490E: db $FF
L01490F: db $FF
L014910: db $FF;X
L014911: db $FF;X
OBJLstPtrTable_PostRoundText1: db $4C
L014913: db $4A
L014914: db $FF
L014915: db $FF
L014916: db $BB;X
L014917: db $4A;X
L014918: db $FF;X
L014919: db $FF;X
L01491A: db $D8;X
L01491B: db $4A;X
L01491C: db $FF;X
L01491D: db $FF;X
L01491E: db $72
L01491F: db $4A
L014920: db $FF
L014921: db $FF
L014922: db $95
L014923: db $4A
L014924: db $FF
L014925: db $FF
L014926: db $FF;X
L014927: db $FF;X
L014928: db $80
L014929: db $00
L01492A: db $00
L01492B: db $FF;X
L01492C: db $FF;X
L01492D: db $FF;X
L01492E: db $32
L01492F: db $49
L014930: db $00
L014931: db $00
L014932: db $02
L014933: db $F8
L014934: db $F8
L014935: db $00
L014936: db $F8
L014937: db $00
L014938: db $02
L014939: db $80
L01493A: db $00
L01493B: db $00
L01493C: db $FF;X
L01493D: db $FF;X
L01493E: db $FF;X
L01493F: db $43
L014940: db $49
L014941: db $00
L014942: db $00
L014943: db $02
L014944: db $3B
L014945: db $FB
L014946: db $04
L014947: db $34
L014948: db $03
L014949: db $06
L01494A: db $A0
L01494B: db $00
L01494C: db $00
L01494D: db $FF;X
L01494E: db $FF;X
L01494F: db $FF;X
L014950: db $43
L014951: db $49
L014952: db $00
L014953: db $00
L014954: db $80
L014955: db $00
L014956: db $00
L014957: db $00;X
L014958: db $00;X
L014959: db $00;X
L01495A: db $5E
L01495B: db $49
L01495C: db $90
L01495D: db $18
L01495E: db $0A
L01495F: db $0E
L014960: db $54
L014961: db $38
L014962: db $0E
L014963: db $5C
L014964: db $3A
L014965: db $0E
L014966: db $64
L014967: db $3C
L014968: db $0E
L014969: db $6C
L01496A: db $3E
L01496B: db $0E
L01496C: db $74
L01496D: db $40
L01496E: db $0E
L01496F: db $7C
L014970: db $42
L014971: db $10
L014972: db $84
L014973: db $44
L014974: db $10
L014975: db $8C
L014976: db $46
L014977: db $00
L014978: db $84
L014979: db $48
L01497A: db $00
L01497B: db $8C
L01497C: db $4A
L01497D: db $80
L01497E: db $00
L01497F: db $00
L014980: db $00;X
L014981: db $00;X
L014982: db $00;X
L014983: db $87
L014984: db $49
L014985: db $A4
L014986: db $D8
L014987: db $07
L014988: db $4E
L014989: db $44
L01498A: db $2A
L01498B: db $4E
L01498C: db $4C
L01498D: db $2C
L01498E: db $4E
L01498F: db $54
L014990: db $2E
L014991: db $4E
L014992: db $5C
L014993: db $30
L014994: db $4E
L014995: db $64
L014996: db $32
L014997: db $4E
L014998: db $6C
L014999: db $34
L01499A: db $4E
L01499B: db $74
L01499C: db $36
L01499D: db $80
L01499E: db $00
L01499F: db $00
L0149A0: db $00;X
L0149A1: db $00;X
L0149A2: db $00;X
L0149A3: db $A7
L0149A4: db $49
L0149A5: db $D2
L0149A6: db $18
L0149A7: db $05
L0149A8: db $0E
L0149A9: db $1C
L0149AA: db $00
L0149AB: db $0E
L0149AC: db $24
L0149AD: db $02
L0149AE: db $0E
L0149AF: db $2C
L0149B0: db $04
L0149B1: db $0E
L0149B2: db $34
L0149B3: db $06
L0149B4: db $0E
L0149B5: db $3C
L0149B6: db $08
L0149B7: db $80
L0149B8: db $00
L0149B9: db $00
L0149BA: db $00;X
L0149BB: db $00;X
L0149BC: db $00;X
L0149BD: db $C1
L0149BE: db $49
L0149BF: db $CE
L0149C0: db $F8
L0149C1: db $04
L0149C2: db $2E
L0149C3: db $24
L0149C4: db $0A
L0149C5: db $2E
L0149C6: db $2C
L0149C7: db $0C
L0149C8: db $2E
L0149C9: db $34
L0149CA: db $0E
L0149CB: db $2E
L0149CC: db $3C
L0149CD: db $10
L0149CE: db $80
L0149CF: db $00
L0149D0: db $00
L0149D1: db $00;X
L0149D2: db $00;X
L0149D3: db $00;X
L0149D4: db $D8
L0149D5: db $49
L0149D6: db $C6
L0149D7: db $DC
L0149D8: db $0C
L0149D9: db $4E
L0149DA: db $24
L0149DB: db $12
L0149DC: db $4E
L0149DD: db $2C
L0149DE: db $14
L0149DF: db $4E
L0149E0: db $34
L0149E1: db $16
L0149E2: db $4E
L0149E3: db $3C
L0149E4: db $18
L0149E5: db $4E
L0149E6: db $44
L0149E7: db $1A
L0149E8: db $4E
L0149E9: db $4C
L0149EA: db $1C
L0149EB: db $3E
L0149EC: db $24
L0149ED: db $1E
L0149EE: db $3E
L0149EF: db $2C
L0149F0: db $20
L0149F1: db $3E
L0149F2: db $34
L0149F3: db $22
L0149F4: db $3E
L0149F5: db $3C
L0149F6: db $24
L0149F7: db $3E
L0149F8: db $44
L0149F9: db $26
L0149FA: db $3E
L0149FB: db $4C
L0149FC: db $28
L0149FD: db $80
L0149FE: db $00
L0149FF: db $00
L014A00: db $00;X
L014A01: db $00;X
L014A02: db $00;X
L014A03: db $07
L014A04: db $4A
L014A05: db $8B
L014A06: db $02
L014A07: db $0A
L014A08: db $26
L014A09: db $60
L014A0A: db $1A
L014A0B: db $26
L014A0C: db $68
L014A0D: db $1C
L014A0E: db $26
L014A0F: db $70
L014A10: db $1E
L014A11: db $26
L014A12: db $78
L014A13: db $20
L014A14: db $26
L014A15: db $80
L014A16: db $22
L014A17: db $26
L014A18: db $88
L014A19: db $24
L014A1A: db $16
L014A1B: db $63
L014A1C: db $26
L014A1D: db $16
L014A1E: db $6B
L014A1F: db $28
L014A20: db $16
L014A21: db $7B
L014A22: db $2A
L014A23: db $16
L014A24: db $83
L014A25: db $2C
L014A26: db $80
L014A27: db $00
L014A28: db $00
L014A29: db $00;X
L014A2A: db $00;X
L014A2B: db $00;X
L014A2C: db $30
L014A2D: db $4A
L014A2E: db $D8
L014A2F: db $20
L014A30: db $09
L014A31: db $06
L014A32: db $08
L014A33: db $08
L014A34: db $06
L014A35: db $10
L014A36: db $0A
L014A37: db $06
L014A38: db $18
L014A39: db $0C
L014A3A: db $06
L014A3B: db $20
L014A3C: db $0E
L014A3D: db $06
L014A3E: db $28
L014A3F: db $10
L014A40: db $06
L014A41: db $30
L014A42: db $12
L014A43: db $06
L014A44: db $38
L014A45: db $14
L014A46: db $06
L014A47: db $40
L014A48: db $16
L014A49: db $03
L014A4A: db $48
L014A4B: db $18
L014A4C: db $80
L014A4D: db $00
L014A4E: db $00
L014A4F: db $00;X
L014A50: db $00;X
L014A51: db $00;X
L014A52: db $56
L014A53: db $4A
L014A54: db $C5
L014A55: db $00
L014A56: db $09
L014A57: db $26
L014A58: db $18
L014A59: db $08
L014A5A: db $26
L014A5B: db $20
L014A5C: db $0A
L014A5D: db $26
L014A5E: db $28
L014A5F: db $0C
L014A60: db $26
L014A61: db $30
L014A62: db $0E
L014A63: db $26
L014A64: db $38
L014A65: db $10
L014A66: db $26
L014A67: db $40
L014A68: db $12
L014A69: db $26
L014A6A: db $48
L014A6B: db $14
L014A6C: db $26
L014A6D: db $50
L014A6E: db $16
L014A6F: db $26
L014A70: db $58
L014A71: db $18
L014A72: db $80
L014A73: db $00
L014A74: db $00
L014A75: db $00;X
L014A76: db $00;X
L014A77: db $00;X
L014A78: db $7C
L014A79: db $4A
L014A7A: db $81
L014A7B: db $E0
L014A7C: db $08
L014A7D: db $46
L014A7E: db $60
L014A7F: db $2C
L014A80: db $46
L014A81: db $68
L014A82: db $2E
L014A83: db $46
L014A84: db $70
L014A85: db $30
L014A86: db $45
L014A87: db $78
L014A88: db $32
L014A89: db $46
L014A8A: db $81
L014A8B: db $1A
L014A8C: db $46
L014A8D: db $89
L014A8E: db $1C
L014A8F: db $46
L014A90: db $91
L014A91: db $1E
L014A92: db $46
L014A93: db $99
L014A94: db $20
L014A95: db $80
L014A96: db $00
L014A97: db $00
L014A98: db $00;X
L014A99: db $00;X
L014A9A: db $00;X
L014A9B: db $9F
L014A9C: db $4A
L014A9D: db $81
L014A9E: db $E0
L014A9F: db $09
L014AA0: db $46
L014AA1: db $60
L014AA2: db $2C
L014AA3: db $46
L014AA4: db $68
L014AA5: db $2E
L014AA6: db $46
L014AA7: db $70
L014AA8: db $30
L014AA9: db $45
L014AAA: db $78
L014AAB: db $32
L014AAC: db $46
L014AAD: db $80
L014AAE: db $22
L014AAF: db $46
L014AB0: db $88
L014AB1: db $24
L014AB2: db $46
L014AB3: db $90
L014AB4: db $26
L014AB5: db $46
L014AB6: db $98
L014AB7: db $28
L014AB8: db $40
L014AB9: db $A0
L014ABA: db $2A
L014ABB: db $80;X
L014ABC: db $00;X
L014ABD: db $00;X
L014ABE: db $00;X
L014ABF: db $00;X
L014AC0: db $00;X
L014AC1: db $C5;X
L014AC2: db $4A;X
L014AC3: db $75;X
L014AC4: db $E0;X
L014AC5: db $06;X
L014AC6: db $46;X
L014AC7: db $74;X
L014AC8: db $34;X
L014AC9: db $46;X
L014ACA: db $7C;X
L014ACB: db $36;X
L014ACC: db $46;X
L014ACD: db $85;X
L014ACE: db $1A;X
L014ACF: db $46;X
L014AD0: db $8D;X
L014AD1: db $1C;X
L014AD2: db $46;X
L014AD3: db $95;X
L014AD4: db $1E;X
L014AD5: db $46;X
L014AD6: db $9D;X
L014AD7: db $20;X
L014AD8: db $80;X
L014AD9: db $00;X
L014ADA: db $00;X
L014ADB: db $00;X
L014ADC: db $00;X
L014ADD: db $00;X
L014ADE: db $E2;X
L014ADF: db $4A;X
L014AE0: db $77;X
L014AE1: db $E0;X
L014AE2: db $07;X
L014AE3: db $46;X
L014AE4: db $70;X
L014AE5: db $38;X
L014AE6: db $46;X
L014AE7: db $78;X
L014AE8: db $3A;X
L014AE9: db $43;X
L014AEA: db $80;X
L014AEB: db $3C;X
L014AEC: db $46;X
L014AED: db $85;X
L014AEE: db $1A;X
L014AEF: db $46;X
L014AF0: db $8D;X
L014AF1: db $1C;X
L014AF2: db $46;X
L014AF3: db $95;X
L014AF4: db $1E;X
L014AF5: db $46;X
L014AF6: db $9D;X
L014AF7: db $20;X
GFXLZ_Projectiles: db $6F
L014AF9: db $41
L014AFA: db $6D
L014AFB: db $00
L014AFC: db $07
L014AFD: db $06
L014AFE: db $01
L014AFF: db $0F
L014B00: db $0A
L014B01: db $05
L014B02: db $08
L014B03: db $55
L014B04: db $07
L014B05: db $08
L014B06: db $40
L014B07: db $08
L014B08: db $60
L014B09: db $08
L014B0A: db $70
L014B0B: db $08
L014B0C: db $00
L014B0D: db $F8
L014B0E: db $20
L014B0F: db $FC
L014B10: db $30
L014B11: db $FE
L014B12: db $38
L014B13: db $FF
L014B14: db $3C
L014B15: db $09
L014B16: db $EF
L014B17: db $7C
L014B18: db $E7
L014B19: db $7E
L014B1A: db $08
L014B1B: db $7F
L014B1C: db $C3
L014B1D: db $08
L014B1E: db $6F
L014B1F: db $C1
L014B20: db $50
L014B21: db $09
L014B22: db $C0
L014B23: db $0C
L014B24: db $D0
L014B25: db $07
L014B26: db $06
L014B27: db $55
L014B28: db $80
L014B29: db $08
L014B2A: db $D0
L014B2B: db $08
L014B2C: db $D8
L014B2D: db $08
L014B2E: db $FC
L014B2F: db $30
L014B30: db $28
L014B31: db $FE
L014B32: db $C8
L014B33: db $08
L014B34: db $CC
L014B35: db $E0
L014B36: db $EC
L014B37: db $7F
L014B38: db $EE
L014B39: db $6A
L014B3A: db $07
L014B3B: db $58
L014B3C: db $0A
L014B3D: db $01
L014B3E: db $0D
L014B3F: db $03
L014B40: db $08
L014B41: db $0B
L014B42: db $B7
L014B43: db $08
L014B44: db $0F
L014B45: db $68
L014B46: db $0C
L014B47: db $02
L014B48: db $08
L014B49: db $60
L014B4A: db $78
L014B4B: db $C9
L014B4C: db $09
L014B4D: db $9A
L014B4E: db $C0
L014B4F: db $FF
L014B50: db $09
L014B51: db $E0
L014B52: db $7F
L014B53: db $0A
L014B54: db $AA
L014B55: db $28
L014B56: db $60
L014B57: db $08
L014B58: db $70
L014B59: db $08
L014B5A: db $B0
L014B5B: db $0A
L014B5C: db $90
L014B5D: db $BB
L014B5E: db $08
L014B5F: db $C8
L014B60: db $0A
L014B61: db $A8
L014B62: db $88
L014B63: db $E4
L014B64: db $B9
L014B65: db $08
L014B66: db $41
L014B67: db $F0
L014B68: db $08
L014B69: db $3F
L014B6A: db $FE
L014B6B: db $3D
L014B6C: db $F7
L014B6D: db $1D
L014B6E: db $08
L014B6F: db $55
L014B70: db $1C
L014B71: db $38
L014B72: db $0C
L014B73: db $0C
L014B74: db $04
L014B75: db $0C
L014B76: db $00
L014B77: db $0F
L014B78: db $A3
L014B79: db $0A
L014B7A: db $C0
L014B7B: db $10
L014B7C: db $E0
L014B7D: db $40
L014B7E: db $F0
L014B7F: db $09
L014B80: db $20
L014B81: db $55
L014B82: db $F8
L014B83: db $08
L014B84: db $78
L014B85: db $08
L014B86: db $7C
L014B87: db $09
L014B88: db $E8
L014B89: db $09
L014B8A: db $4A
L014B8B: db $3C
L014B8C: db $50
L014B8D: db $3E
L014B8E: db $FC
L014B8F: db $09
L014B90: db $36
L014B91: db $0C
L014B92: db $26
L014B93: db $97
L014B94: db $08
L014B95: db $03
L014B96: db $01
L014B97: db $08
L014B98: db $00
L014B99: db $10
L014B9A: db $0A
L014B9B: db $03
L014B9C: db $E5
L014B9D: db $3F
L014B9E: db $07
L014B9F: db $03
L014BA0: db $B0
L014BA1: db $FF
L014BA2: db $09
L014BA3: db $D8
L014BA4: db $08
L014BA5: db $11
L014BA6: db $C8
L014BA7: db $7F
L014BA8: db $EC
L014BA9: db $08
L014BAA: db $64
L014BAB: db $3F
L014BAC: db $60
L014BAD: db $08
L014BAE: db $90
L014BAF: db $58
L014BB0: db $1F
L014BB1: db $F1
L014BB2: db $08
L014BB3: db $F8
L014BB4: db $4F
L014BB5: db $78
L014BB6: db $2F
L014BB7: db $56
L014BB8: db $7C
L014BB9: db $48
L014BBA: db $6C
L014BBB: db $08
L014BBC: db $36
L014BBD: db $48
L014BBE: db $09
L014BBF: db $1B
L014BC0: db $3D
L014BC1: db $0F
L014BC2: db $00
L014BC3: db $D8
L014BC4: db $0F
L014BC5: db $0F
L014BC6: db $09
L014BC7: db $80
L014BC8: db $0A
L014BC9: db $52
L014BCA: db $40
L014BCB: db $0A
L014BCC: db $20
L014BCD: db $0A
L014BCE: db $66
L014BCF: db $FC
L014BD0: db $09
L014BD1: db $46
L014BD2: db $A8
L014BD3: db $0A
L014BD4: db $4E
L014BD5: db $08
L014BD6: db $0E
L014BD7: db $08
L014BD8: db $0F
L014BD9: db $FE
L014BDA: db $0B
L014BDB: db $AA
L014BDC: db $08
L014BDD: db $1B
L014BDE: db $08
L014BDF: db $13
L014BE0: db $0A
L014BE1: db $03
L014BE2: db $08
L014BE3: db $07
L014BE4: db $9A
L014BE5: db $C8
L014BE6: db $06
L014BE7: db $FD
L014BE8: db $08
L014BE9: db $18
L014BEA: db $04
L014BEB: db $08
L014BEC: db $00
L014BED: db $D5
L014BEE: db $07
L014BEF: db $00
L014BF0: db $10
L014BF1: db $08
L014BF2: db $30
L014BF3: db $08
L014BF4: db $70
L014BF5: db $08
L014BF6: db $02
L014BF7: db $F2
L014BF8: db $20
L014BF9: db $F6
L014BFA: db $60
L014BFB: db $BE
L014BFC: db $E4
L014BFD: db $09
L014BFE: db $7C
L014BFF: db $54
L014C00: db $E8
L014C01: db $08
L014C02: db $D8
L014C03: db $08
L014C04: db $F8
L014C05: db $10
L014C06: db $F0
L014C07: db $19
L014C08: db $08
L014C09: db $0F
L014C0A: db $0C
L014C0B: db $07
L014C0C: db $CC
L014C0D: db $08
L014C0E: db $FE
L014C0F: db $43
L014C10: db $7E
L014C11: db $02
L014C12: db $23
L014C13: db $7F
L014C14: db $3D
L014C15: db $37
L014C16: db $1F
L014C17: db $1B
L014C18: db $68
L014C19: db $FD
L014C1A: db $D7
L014C1B: db $58
L014C1C: db $48
L014C1D: db $3F
L014C1E: db $39
L014C1F: db $F9
L014C20: db $38
L014C21: db $D8
L014C22: db $28
L014C23: db $58
L014C24: db $30
L014C25: db $28
L014C26: db $1C
L014C27: db $28
L014C28: db $00
L014C29: db $03
L014C2A: db $10
L014C2B: db $FF
L014C2C: db $55
L014C2D: db $90
L014C2E: db $08
L014C2F: db $00
L014C30: db $08
L014C31: db $48
L014C32: db $1A
L014C33: db $20
L014C34: db $08
L014C35: db $AB
L014C36: db $59
L014C37: db $80
L014C38: db $08
L014C39: db $88
L014C3A: db $08
L014C3B: db $40
L014C3C: db $5A
L014C3D: db $39
L014C3E: db $C5
L014C3F: db $2B
L014C40: db $0B
L014C41: db $D7
L014C42: db $7F
L014C43: db $E6
L014C44: db $08
L014C45: db $E4
L014C46: db $08
L014C47: db $55
L014C48: db $E8
L014C49: db $08
L014C4A: db $C4
L014C4B: db $08
L014C4C: db $C8
L014C4D: db $08
L014C4E: db $C0
L014C4F: db $1A
L014C50: db $FC
L014C51: db $2D
L014C52: db $69
L014C53: db $89
L014C54: db $A9
L014C55: db $C9
L014C56: db $E9
L014C57: db $FB
L014C58: db $FF
L014C59: db $55
L014C5A: db $61
L014C5B: db $08
L014C5C: db $20
L014C5D: db $08
L014C5E: db $10
L014C5F: db $08
L014C60: db $1B
L014C61: db $08
L014C62: db $57
L014C63: db $08
L014C64: db $08
L014C65: db $13
L014C66: db $08
L014C67: db $0B
L014C68: db $0A
L014C69: db $29
L014C6A: db $49
L014C6B: db $F9
L014C6C: db $69
L014C6D: db $89
L014C6E: db $A9
L014C6F: db $C9
L014C70: db $E9
L014C71: db $E0
L014C72: db $80
L014C73: db $08
L014C74: db $21
L014C75: db $C0
L014C76: db $70
L014C77: db $10
L014C78: db $18
L014C79: db $F0
L014C7A: db $FC
L014C7B: db $F8
L014C7C: db $00
L014C7D: db $BF
L014C7E: db $1A
L014C7F: db $FE
L014C80: db $10
L014C81: db $09
L014C82: db $4D
L014C83: db $89
L014C84: db $A9
L014C85: db $C9
L014C86: db $AA
L014C87: db $E9
L014C88: db $00
L014C89: db $06
L014C8A: db $01
L014C8B: db $08
L014C8C: db $03
L014C8D: db $10
L014C8E: db $06
L014C8F: db $82
L014C90: db $10
L014C91: db $0D
L014C92: db $07
L014C93: db $19
L014C94: db $0F
L014C95: db $1A
L014C96: db $08
L014C97: db $30
L014C98: db $4A
L014C99: db $1F
L014C9A: db $09
L014C9B: db $60
L014C9C: db $3F
L014C9D: db $09
L014C9E: db $69
L014C9F: db $08
L014CA0: db $D2
L014CA1: db $50
L014CA2: db $7F
L014CA3: db $ED
L014CA4: db $7C
L014CA5: db $08
L014CA6: db $F8
L014CA7: db $70
L014CA8: db $BF
L014CA9: db $E0
L014CAA: db $5D
L014CAB: db $FF
L014CAC: db $00
L014CAD: db $C3
L014CAE: db $08
L014CAF: db $E0
L014CB0: db $08
L014CB1: db $31
L014CB2: db $08
L014CB3: db $55
L014CB4: db $40
L014CB5: db $08
L014CB6: db $03
L014CB7: db $08
L014CB8: db $1F
L014CB9: db $08
L014CBA: db $87
L014CBB: db $08
L014CBC: db $7D
L014CBD: db $01
L014CBE: db $08
L014CBF: db $B0
L014CC0: db $09
L014CC1: db $07
L014CC2: db $02
L014CC3: db $C0
L014CC4: db $08
L014CC5: db $3A
L014CC6: db $E0
L014CC7: db $80
L014CC8: db $00
L014CC9: db $29
L014CCA: db $10
L014CCB: db $60
L014CCC: db $10
L014CCD: db $F0
L014CCE: db $BB
L014CCF: db $40
L014CD0: db $F8
L014CD1: db $28
L014CD2: db $10
L014CD3: db $2A
L014CD4: db $78
L014CD5: db $08
L014CD6: db $DF
L014CD7: db $AA
L014CD8: db $01
L014CD9: db $03
L014CDA: db $08
L014CDB: db $07
L014CDC: db $10
L014CDD: db $0E
L014CDE: db $10
L014CDF: db $19
L014CE0: db $0A
L014CE1: db $0F
L014CE2: db $3F
L014CE3: db $1F
L014CE4: db $3E
L014CE5: db $08
L014CE6: db $7C
L014CE7: db $20
L014CE8: db $7F
L014CE9: db $AB
L014CEA: db $08
L014CEB: db $FE
L014CEC: db $10
L014CED: db $DC
L014CEE: db $08
L014CEF: db $9F
L014CF0: db $08
L014CF1: db $CD
L014CF2: db $D3
L014CF3: db $80
L014CF4: db $10
L014CF5: db $FC
L014CF6: db $10
L014CF7: db $E3
L014CF8: db $FF
L014CF9: db $E0
L014CFA: db $08
L014CFB: db $DD
L014CFC: db $20
L014CFD: db $08
L014CFE: db $80
L014CFF: db $08
L014D00: db $50
L014D01: db $08
L014D02: db $0F
L014D03: db $08
L014D04: db $ED
L014D05: db $E2
L014D06: db $3A
L014D07: db $79
L014D08: db $8F
L014D09: db $B0
L014D0A: db $E9
L014D0B: db $3E
L014D0C: db $08
L014D0D: db $8E
L014D0E: db $20
L014D0F: db $30
L014D10: db $F0
L014D11: db $C0
L014D12: db $00
L014D13: db $28
L014D14: db $19
L014D15: db $E0
L014D16: db $B7
L014D17: db $18
L014D18: db $F8
L014D19: db $10
L014D1A: db $4A
L014D1B: db $80
L014D1C: db $20
L014D1D: db $10
L014D1E: db $F0
L014D1F: db $F5
L014D20: db $99
L014D21: db $40
L014D22: db $9B
L014D23: db $07
L014D24: db $03
L014D25: db $08
L014D26: db $07
L014D27: db $10
L014D28: db $45
L014D29: db $0E
L014D2A: db $10
L014D2B: db $1D
L014D2C: db $0F
L014D2D: db $1A
L014D2E: db $08
L014D2F: db $1C
L014D30: db $1C
L014D31: db $FA
L014D32: db $59
L014D33: db $79
L014D34: db $99
L014D35: db $07
L014D36: db $01
L014D37: db $E0
L014D38: db $08
L014D39: db $F0
L014D3A: db $A3
L014D3B: db $10
L014D3C: db $B8
L014D3D: db $10
L014D3E: db $5C
L014D3F: db $F8
L014D40: db $0C
L014D41: db $0C
L014D42: db $F8
L014D43: db $BD
L014D44: db $08
L014D45: db $38
L014D46: db $58
L014D47: db $79
L014D48: db $99
L014D49: db $05
L014D4A: db $03
L014D4B: db $08
L014D4C: db $57
L014D4D: db $0F
L014D4E: db $10
L014D4F: db $1F
L014D50: db $10
L014D51: db $3C
L014D52: db $10
L014D53: db $98
L014D54: db $08
L014D55: db $3F
L014D56: db $70
L014D57: db $3F
L014D58: db $0D
L014D59: db $49
L014D5A: db $69
L014D5B: db $89
L014D5C: db $A9
L014D5D: db $C9
L014D5E: db $D7
L014D5F: db $07
L014D60: db $05
L014D61: db $7E
L014D62: db $08
L014D63: db $FF
L014D64: db $10
L014D65: db $08
L014D66: db $00
L014D67: db $7E
L014D68: db $81
L014D69: db $08
L014D6A: db $31
L014D6B: db $0F
L014D6C: db $0A
L014D6D: db $07
L014D6E: db $04
L014D6F: db $01
L014D70: db $AA
L014D71: db $08
L014D72: db $03
L014D73: db $10
L014D74: db $07
L014D75: db $10
L014D76: db $0E
L014D77: db $10
L014D78: db $1C
L014D79: db $4D
L014D7A: db $0F
L014D7B: db $09
L014D7C: db $38
L014D7D: db $1F
L014D7E: db $0B
L014D7F: db $80
L014D80: db $FF
L014D81: db $0F
L014D82: db $FB
L014D83: db $0F
L014D84: db $0F
L014D85: db $0E
L014D86: db $07
L014D87: db $04
L014D88: db $7E
L014D89: db $93
L014D8A: db $04
L014D8B: db $55
L014D8C: db $81
L014D8D: db $FE
L014D8E: db $03
L014D8F: db $10
L014D90: db $0F
L014D91: db $08
L014D92: db $3F
L014D93: db $20
L014D94: db $75
L014D95: db $7F
L014D96: db $20
L014D97: db $40
L014D98: db $20
L014D99: db $FE
L014D9A: db $20
L014D9B: db $F8
L014D9C: db $20
L014D9D: db $55
L014D9E: db $F0
L014D9F: db $08
L014DA0: db $E0
L014DA1: db $08
L014DA2: db $C0
L014DA3: db $0A
L014DA4: db $80
L014DA5: db $0A
L014DA6: db $F5
L014DA7: db $FD
L014DA8: db $08
L014DA9: db $07
L014DAA: db $00
L014DAB: db $01
L014DAC: db $08
L014DAD: db $03
L014DAE: db $09
L014DAF: db $B6
L014DB0: db $20
L014DB1: db $07
L014DB2: db $09
L014DB3: db $20
L014DB4: db $0F
L014DB5: db $0B
L014DB6: db $30
L014DB7: db $1F
L014DB8: db $9F
L014DB9: db $0C
L014DBA: db $80
L014DBB: db $FF
L014DBC: db $0B
L014DBD: db $C0
L014DBE: db $0F
L014DBF: db $0F
L014DC0: db $0A
L014DC1: db $AB
L014DC2: db $CD
L014DC3: db $0F
L014DC4: db $40
L014DC5: db $7F
L014DC6: db $63
L014DC7: db $1F
L014DC8: db $08
L014DC9: db $04
L014DCA: db $7A
L014DCB: db $E0
L014DCC: db $8A
L014DCD: db $FF
L014DCE: db $0E
L014DCF: db $02
L014DD0: db $01
L014DD1: db $08
L014DD2: db $07
L014DD3: db $A3
L014DD4: db $08
L014DD5: db $0F
L014DD6: db $08
L014DD7: db $3F
L014DD8: db $03
L014DD9: db $7F
L014DDA: db $30
L014DDB: db $70
L014DDC: db $6A
L014DDD: db $1F
L014DDE: db $08
L014DDF: db $30
L014DE0: db $FE
L014DE1: db $30
L014DE2: db $FC
L014DE3: db $20
L014DE4: db $F8
L014DE5: db $AB
L014DE6: db $08
L014DE7: db $F0
L014DE8: db $08
L014DE9: db $E0
L014DEA: db $08
L014DEB: db $C0
L014DEC: db $0A
L014DED: db $D9
L014DEE: db $FB
L014DEF: db $B0
L014DF0: db $0A
L014DF1: db $C0
L014DF2: db $30
L014DF3: db $09
L014DF4: db $0F
L014DF5: db $30
L014DF6: db $09
L014DF7: db $F7
L014DF8: db $F0
L014DF9: db $09
L014DFA: db $40
L014DFB: db $09
L014DFC: db $3F
L014DFD: db $0B
L014DFE: db $60
L014DFF: db $0D
L014E00: db $55
L014E01: db $F0
L014E02: db $D8
L014E03: db $FE
L014E04: db $08
L014E05: db $FF
L014E06: db $09
L014E07: db $F8
L014E08: db $08
L014E09: db $EE
L014E0A: db $04
L014E0B: db $B0
L014E0C: db $08
L014E0D: db $01
L014E0E: db $62
L014E0F: db $0F
L014E10: db $0B
L014E11: db $38
L014E12: db $23
L014E13: db $1F
L014E14: db $30
L014E15: db $0A
L014E16: db $70
L014E17: db $3F
L014E18: db $60
L014E19: db $0F
L014E1A: db $0E
L014E1B: db $EA
L014E1C: db $89
L014E1D: db $BB
L014E1E: db $E9
L014E1F: db $00
L014E20: db $04
L014E21: db $01
L014E22: db $08
L014E23: db $03
L014E24: db $DB
L014E25: db $10
L014E26: db $09
L014E27: db $07
L014E28: db $10
L014E29: db $09
L014E2A: db $0F
L014E2B: db $10
L014E2C: db $0B
L014E2D: db $D6
L014E2E: db $B0
L014E2F: db $10
L014E30: db $1E
L014E31: db $08
L014E32: db $1C
L014E33: db $0A
L014E34: db $F9
L014E35: db $C0
L014E36: db $80
L014E37: db $C8
L014E38: db $BF
L014E39: db $40
L014E3A: db $7E
L014E3B: db $3D
L014E3C: db $7F
L014E3D: db $3B
L014E3E: db $7C
L014E3F: db $22
L014E40: db $37
L014E41: db $72
L014E42: db $68
L014E43: db $51
L014E44: db $3F
L014E45: db $50
L014E46: db $08
L014E47: db $4B
L014E48: db $0E
L014E49: db $3C
L014E4A: db $4C
L014E4B: db $30
L014E4C: db $70
L014E4D: db $98
L014E4E: db $07
L014E4F: db $03
L014E50: db $F8
L014E51: db $92
L014E52: db $08
L014E53: db $08
L014E54: db $F0
L014E55: db $00
L014E56: db $E0
L014E57: db $10
L014E58: db $08
L014E59: db $20
L014E5A: db $1E
L014E5B: db $C0
L014E5C: db $40
L014E5D: db $80
L014E5E: db $00
L014E5F: db $A7
L014E60: db $07
L014E61: db $00
L014E62: db $71
L014E63: db $08
L014E64: db $3F
L014E65: db $30
L014E66: db $1F
L014E67: db $38
L014E68: db $08
L014E69: db $18
L014E6A: db $0F
L014E6B: db $1C
L014E6C: db $89
L014E6D: db $08
L014E6E: db $0C
L014E6F: db $07
L014E70: db $0E
L014E71: db $08
L014E72: db $06
L014E73: db $03
L014E74: db $10
L014E75: db $DD
L014E76: db $08
L014E77: db $00
L014E78: db $01
L014E79: db $00
L014E7A: db $E7
L014E7B: db $02
L014E7C: db $80
L014E7D: db $0A
L014E7E: db $6A
L014E7F: db $C0
L014E80: db $10
L014E81: db $09
L014E82: db $E0
L014E83: db $10
L014E84: db $60
L014E85: db $08
L014E86: db $30
L014E87: db $88
L014E88: db $20
L014E89: db $38
L014E8A: db $F0
L014E8B: db $18
L014E8C: db $08
L014E8D: db $1C
L014E8E: db $F8
L014E8F: db $8E
L014E90: db $20
L014E91: db $FC
L014E92: db $86
L014E93: db $08
L014E94: db $C7
L014E95: db $FE
L014E96: db $C3
L014E97: db $7E
L014E98: db $E3
L014E99: db $02
L014E9A: db $7F
L014E9B: db $61
L014E9C: db $3F
L014E9D: db $6E
L014E9E: db $3C
L014E9F: db $66
L014EA0: db $08
L014EA1: db $37
L014EA2: db $09
L014EA3: db $1E
L014EA4: db $33
L014EA5: db $1F
L014EA6: db $39
L014EA7: db $08
L014EA8: db $19
L014EA9: db $0F
L014EAA: db $C8
L014EAB: db $94
L014EAC: db $08
L014EAD: db $0C
L014EAE: db $07
L014EAF: db $09
L014EB0: db $0E
L014EB1: db $08
L014EB2: db $06
L014EB3: db $03
L014EB4: db $ED
L014EB5: db $10
L014EB6: db $08
L014EB7: db $00
L014EB8: db $01
L014EB9: db $09
L014EBA: db $00
L014EBB: db $00
L014EBC: db $09
L014EBD: db $D5
L014EBE: db $07
L014EBF: db $07
L014EC0: db $80
L014EC1: db $08
L014EC2: db $C0
L014EC3: db $08
L014EC4: db $60
L014EC5: db $20
L014EC6: db $52
L014EC7: db $E0
L014EC8: db $20
L014EC9: db $B0
L014ECA: db $10
L014ECB: db $D8
L014ECC: db $70
L014ECD: db $09
L014ECE: db $CC
L014ECF: db $75
L014ED0: db $78
L014ED1: db $BF
L014ED2: db $07
L014ED3: db $01
L014ED4: db $02
L014ED5: db $08
L014ED6: db $03
L014ED7: db $09
L014ED8: db $78
L014ED9: db $01
L014EDA: db $09
L014EDB: db $00
L014EDC: db $28
L014EDD: db $0B
L014EDE: db $83
L014EDF: db $FF
L014EE0: db $C3
L014EE1: db $A2
L014EE2: db $08
L014EE3: db $C1
L014EE4: db $08
L014EE5: db $E1
L014EE6: db $7F
L014EE7: db $E0
L014EE8: db $08
L014EE9: db $70
L014EEA: db $49
L014EEB: db $3F
L014EEC: db $09
L014EED: db $38
L014EEE: db $1F
L014EEF: db $09
L014EF0: db $1C
L014EF1: db $0F
L014EF2: db $09
L014EF3: db $36
L014EF4: db $0E
L014EF5: db $07
L014EF6: db $09
L014EF7: db $00
L014EF8: db $03
L014EF9: db $09
L014EFA: db $00
L014EFB: db $01
L014EFC: db $2F
L014EFD: db $80
L014EFE: db $00
L014EFF: db $09
L014F00: db $C0
L014F01: db $10
L014F02: db $09
L014F03: db $F8
L014F04: db $10
L014F05: db $FB
L014F06: db $09
L014F07: db $F8
L014F08: db $10
L014F09: db $09
L014F0A: db $F8
L014F0B: db $F0
L014F0C: db $09
L014F0D: db $F8
L014F0E: db $6C
L014F0F: db $F8
L014F10: db $09
L014F11: db $F8
L014F12: db $FC
L014F13: db $09
L014F14: db $F8
L014F15: db $FE
L014F16: db $87
L014F17: db $9D
L014F18: db $08
L014F19: db $E1
L014F1A: db $7F
L014F1B: db $90
L014F1C: db $08
L014F1D: db $A8
L014F1E: db $3F
L014F1F: db $09
L014F20: db $B7
L014F21: db $A8
L014F22: db $1F
L014F23: db $09
L014F24: db $A8
L014F25: db $0F
L014F26: db $09
L014F27: db $A8
L014F28: db $A0
L014F29: db $DB
L014F2A: db $09
L014F2B: db $00
L014F2C: db $03
L014F2D: db $09
L014F2E: db $00
L014F2F: db $01
L014F30: db $09
L014F31: db $00
L014F32: db $5F
L014F33: db $00
L014F34: db $09
L014F35: db $C0
L014F36: db $08
L014F37: db $F8
L014F38: db $10
L014F39: db $09
L014F3A: db $F8
L014F3B: db $ED
L014F3C: db $10
L014F3D: db $09
L014F3E: db $F8
L014F3F: db $F0
L014F40: db $09
L014F41: db $F8
L014F42: db $F8
L014F43: db $09
L014F44: db $B2
L014F45: db $F8
L014F46: db $FC
L014F47: db $09
L014F48: db $F8
L014F49: db $FE
L014F4A: db $87
L014F4B: db $08
L014F4C: db $83
L014F4D: db $2F
L014F4E: db $FF
L014F4F: db $C3
L014F50: db $08
L014F51: db $C1
L014F52: db $08
L014F53: db $00
L014F54: db $F8
L014F55: db $11
L014F56: db $78
L014F57: db $80
L014F58: db $08
L014F59: db $E0
L014F5A: db $08
L014F5B: db $D0
L014F5C: db $7F
L014F5D: db $78
L014F5E: db $3F
L014F5F: db $2F
L014F60: db $3C
L014F61: db $1F
L014F62: db $E8
L014F63: db $0F
L014F64: db $D8
L014F65: db $D0
L014F66: db $09
L014F67: db $00
L014F68: db $6F
L014F69: db $03
L014F6A: db $09
L014F6B: db $00
L014F6C: db $01
L014F6D: db $09
L014F6E: db $00
L014F6F: db $D8
L014F70: db $09
L014F71: db $EB
L014F72: db $07
L014F73: db $07
L014F74: db $07
L014F75: db $07
L014F76: db $09
L014F77: db $03
L014F78: db $09
L014F79: db $00
L014F7A: db $BF
L014F7B: db $28
L014F7C: db $01
L014F7D: db $87
L014F7E: db $07
L014F7F: db $07
L014F80: db $06
L014F81: db $F8
L014F82: db $00
L014F83: db $55
L014F84: db $03
L014F85: db $02
L014F86: db $07
L014F87: db $00
L014F88: db $06
L014F89: db $00
L014F8A: db $04
L014F8B: db $02
L014F8C: db $D4
L014F8D: db $30
L014F8E: db $78
L014F8F: db $1F
L014F90: db $10
L014F91: db $3C
L014F92: db $10
L014F93: db $70
L014F94: db $3F
L014F95: db $0B
L014F96: db $E0
L014F97: db $7F
L014F98: db $C0
L014F99: db $FF
L014F9A: db $09
L014F9B: db $80
L014F9C: db $0A
L014F9D: db $28
L014F9E: db $FA
L014F9F: db $00
L014FA0: db $58
L014FA1: db $02
L014FA2: db $88
L014FA3: db $00
L014FA4: db $30
L014FA5: db $04
L014FA6: db $F0
L014FA7: db $B8
L014FA8: db $08
L014FA9: db $F8
L014FAA: db $58
L014FAB: db $F8
L014FAC: db $10
L014FAD: db $3E
L014FAE: db $FC
L014FAF: db $37
L014FB0: db $2A
L014FB1: db $FE
L014FB2: db $33
L014FB3: db $C8
L014FB4: db $31
L014FB5: db $08
L014FB6: db $21
L014FB7: db $08
L014FB8: db $20
L014FB9: db $AB
L014FBA: db $08
L014FBB: db $80
L014FBC: db $08
L014FBD: db $00
L014FBE: db $08
L014FBF: db $C0
L014FC0: db $08
L014FC1: db $90
L014FC2: db $E0
L014FC3: db $3A
L014FC4: db $29
L014FC5: db $08
L014FC6: db $7F
L014FC7: db $60
L014FC8: db $3F
L014FC9: db $38
L014FCA: db $1F
L014FCB: db $85
L014FCC: db $00
L014FCD: db $07
L014FCE: db $0F
L014FCF: db $08
L014FD0: db $0C
L014FD1: db $02
L014FD2: db $04
L014FD3: db $00
L014FD4: db $5F
L014FD5: db $06
L014FD6: db $00
L014FD7: db $03
L014FD8: db $00
L014FD9: db $E9
L014FDA: db $09
L014FDB: db $20
L014FDC: db $1A
L014FDD: db $40
L014FDE: db $01
L014FDF: db $0A
L014FE0: db $43
L014FE1: db $FE
L014FE2: db $4E
L014FE3: db $FC
L014FE4: db $7C
L014FE5: db $F8
L014FE6: db $AA
L014FE7: db $00
L014FE8: db $E0
L014FE9: db $00
L014FEA: db $60
L014FEB: db $03
L014FEC: db $40
L014FED: db $00
L014FEE: db $C0
L014FEF: db $B8
L014FF0: db $00
L014FF1: db $80
L014FF2: db $00
L014FF3: db $C8
L014FF4: db $06
L014FF5: db $0F
L014FF6: db $0E
L014FF7: db $3F
L014FF8: db $00
L014FF9: db $3E
L014FFA: db $7F
L014FFB: db $7D
L014FFC: db $73
L014FFD: db $71
L014FFE: db $63
L014FFF: db $61
L015000: db $33
L015001: db $67
L015002: db $31
L015003: db $58
L015004: db $00
L015005: db $03
L015006: db $01
L015007: db $00
L015008: db $88
L015009: db $09
L01500A: db $F5
L01500B: db $05
L01500C: db $58
L01500D: db $D9
L01500E: db $10
L01500F: db $1F
L015010: db $10
L015011: db $3C
L015012: db $10
L015013: db $4F
L015014: db $38
L015015: db $08
L015016: db $70
L015017: db $3F
L015018: db $0D
L015019: db $49
L01501A: db $69
L01501B: db $89
L01501C: db $E2
L01501D: db $A9
L01501E: db $C9
L01501F: db $01
L015020: db $0C
L015021: db $07
L015022: db $0D
L015023: db $08
L015024: db $19
L015025: db $D8
L015026: db $50
L015027: db $09
L015028: db $31
L015029: db $80
L01502A: db $09
L01502B: db $33
L01502C: db $1E
L01502D: db $63
L01502E: db $43
L01502F: db $3E
L015030: db $0F
L015031: db $C3
L015032: db $7E
L015033: db $C6
L015034: db $7C
L015035: db $0B
L015036: db $E0
L015037: db $45
L015038: db $02
L015039: db $D0
L01503A: db $06
L01503B: db $0E
L01503C: db $04
L01503D: db $C0
L01503E: db $0C
L01503F: db $80
L015040: db $14
L015041: db $1C
L015042: db $3C
L015043: db $18
L015044: db $60
L015045: db $38
L015046: db $09
L015047: db $D8
L015048: db $70
L015049: db $82
L01504A: db $09
L01504B: db $98
L01504C: db $F0
L01504D: db $B0
L01504E: db $E0
L01504F: db $30
L015050: db $0E
L015051: db $00
L015052: db $EA
L015053: db $07
L015054: db $07
L015055: db $06
L015056: db $01
L015057: db $08
L015058: db $06
L015059: db $08
L01505A: db $0C
L01505B: db $87
L01505C: db $08
L01505D: db $1C
L01505E: db $08
L01505F: db $C3
L015060: db $7E
L015061: db $0F
L015062: db $0F
L015063: db $0F
L015064: db $92
L015065: db $0D
L015066: db $C1
L015067: db $7F
L015068: db $0D
L015069: db $61
L01506A: db $3F
L01506B: db $09
L01506C: db $60
L01506D: db $92
L01506E: db $0C
L01506F: db $30
L015070: db $1F
L015071: db $0D
L015072: db $18
L015073: db $0F
L015074: db $0B
L015075: db $80
L015076: db $6D
L015077: db $00
L015078: db $0F
L015079: db $09
L01507A: db $C0
L01507B: db $10
L01507C: db $0D
L01507D: db $60
L01507E: db $10
L01507F: db $9D
L015080: db $0B
L015081: db $30
L015082: db $E0
L015083: db $0B
L015084: db $A0
L015085: db $06
L015086: db $08
L015087: db $0A
L015088: db $6D
L015089: db $1C
L01508A: db $0B
L01508B: db $30
L01508C: db $3E
L01508D: db $10
L01508E: db $0D
L01508F: db $7F
L015090: db $10
L015091: db $5E
L015092: db $77
L015093: db $0A
L015094: db $63
L015095: db $0F
L015096: db $0F
L015097: db $0F
L015098: db $0E
L015099: db $60
L01509A: db $78
L01509B: db $3F
L01509C: db $0F
L01509D: db $0F
L01509E: db $0F
L01509F: db $0D
L0150A0: db $D3
L0150A1: db $7F
L0150A2: db $C2
L0150A3: db $AE
L0150A4: db $08
L0150A5: db $C0
L0150A6: db $08
L0150A7: db $C1
L0150A8: db $1A
L0150A9: db $0D
L0150AA: db $9B
L0150AB: db $30
L0150AC: db $42
L0150AD: db $1F
L0150AE: db $09
L0150AF: db $18
L0150B0: db $0F
L0150B1: db $0E
L0150B2: db $03
L0150B3: db $00
L0150B4: db $00
L0150B5: db $C4
L0150B6: db $01
L0150B7: db $80
L0150B8: db $E1
L0150B9: db $FF
L0150BA: db $C6
L0150BB: db $08
L0150BC: db $9C
L0150BD: db $FE
L0150BE: db $14
L0150BF: db $F8
L0150C0: db $3C
L0150C1: db $F0
L0150C2: db $48
L0150C3: db $E0
L0150C4: db $38
L0150C5: db $CF
L0150C6: db $07
L0150C7: db $FF
L0150C8: db $40
L0150C9: db $B0
L0150CA: db $48
L0150CB: db $F0
L0150CC: db $48
L0150CD: db $18
L0150CE: db $28
L0150CF: db $59
L0150D0: db $7E
L0150D1: db $3E
L0150D2: db $29
L0150D3: db $48
L0150D4: db $78
L0150D5: db $38
L0150D6: db $08
L0150D7: db $F8
L0150D8: db $C0
L0150D9: db $BF
L0150DA: db $08
L0150DB: db $80
L0150DC: db $08
L0150DD: db $05
L0150DE: db $90
L0150DF: db $5E
L0150E0: db $C0
L0150E1: db $4A
L0150E2: db $FA
L0150E3: db $3B
L0150E4: db $19
L0150E5: db $79
L0150E6: db $59
L0150E7: db $05
L0150E8: db $08
L0150E9: db $0C
L0150EA: db $19
L0150EB: db $A9
L0150EC: db $08
L0150ED: db $1B
L0150EE: db $08
L0150EF: db $3B
L0150F0: db $08
L0150F1: db $3F
L0150F2: db $12
L0150F3: db $0A
L0150F4: db $0D
L0150F5: db $16
L0150F6: db $7F
L0150F7: db $36
L0150F8: db $5B
L0150F9: db $20
L0150FA: db $09
L0150FB: db $D3
L0150FC: db $30
L0150FD: db $D5
L0150FE: db $FD
L0150FF: db $07
L015100: db $10
L015101: db $08
L015102: db $20
L015103: db $08
L015104: db $61
L015105: db $08
L015106: db $40
L015107: db $E2
L015108: db $08
L015109: db $EE
L01510A: db $40
L01510B: db $DC
L01510C: db $80
L01510D: db $FC
L01510E: db $90
L01510F: db $0E
L015110: db $F9
L015111: db $70
L015112: db $FF
L015113: db $E0
L015114: db $CF
L015115: db $07
L015116: db $07
L015117: db $0C
L015118: db $AC
L015119: db $08
L01511A: db $78
L01511B: db $08
L01511C: db $F0
L01511D: db $08
L01511E: db $F1
L01511F: db $31
L015120: db $1F
L015121: db $54
L015122: db $32
L015123: db $08
L015124: db $36
L015125: db $08
L015126: db $24
L015127: db $08
L015128: db $6C
L015129: db $3F
L01512A: db $55
L01512B: db $79
L01512C: db $08
L01512D: db $7B
L01512E: db $08
L01512F: db $77
L015130: db $08
L015131: db $7F
L015132: db $08
L015133: db $57
L015134: db $6F
L015135: db $08
L015136: db $7E
L015137: db $08
L015138: db $F8
L015139: db $30
L01513A: db $D8
L01513B: db $0A
L01513C: db $C5
L01513D: db $E8
L01513E: db $0A
L01513F: db $10
L015140: db $FF
L015141: db $20
L015142: db $08
L015143: db $00
L015144: db $08
L015145: db $75
L015146: db $30
L015147: db $08
L015148: db $48
L015149: db $08
L01514A: db $C7
L01514B: db $08
L01514C: db $BF
L01514D: db $08
L01514E: db $AE
L01514F: db $01
L015150: db $FC
L015151: db $08
L015152: db $FB
L015153: db $08
L015154: db $F0
L015155: db $08
L015156: db $0C
L015157: db $AA
L015158: db $08
L015159: db $16
L01515A: db $08
L01515B: db $0F
L01515C: db $1A
L01515D: db $0B
L01515E: db $08
L01515F: db $7F
L015160: db $72
L015161: db $FE
L015162: db $39
L015163: db $79
L015164: db $00
L015165: db $F0
L015166: db $1F
L015167: db $C0
L015168: db $C3
L015169: db $AF
L01516A: db $20
L01516B: db $E0
L01516C: db $08
L01516D: db $00
L01516E: db $79
L01516F: db $59
L015170: db $48
L015171: db $11
L015172: db $AA
L015173: db $68
L015174: db $F8
L015175: db $99
L015176: db $07
L015177: db $08
L015178: db $80
L015179: db $08
L01517A: db $03
L01517B: db $DF
L01517C: db $19
L01517D: db $90
L01517E: db $C0
L01517F: db $10
L015180: db $B8
L015181: db $10
L015182: db $F0
L015183: db $28
L015184: db $FA
L015185: db $01
L015186: db $20
L015187: db $08
L015188: db $28
L015189: db $10
L01518A: db $3C
L01518B: db $10
L01518C: db $FE
L01518D: db $FF
L01518E: db $E9
L01518F: db $3A
L015190: db $F0
L015191: db $18
L015192: db $98
L015193: db $08
L015194: db $18
L015195: db $10
L015196: db $FD
L015197: db $58
L015198: db $10
L015199: db $58
L01519A: db $10
L01519B: db $C2
L01519C: db $00
L01519D: db $01
L01519E: db $08
L01519F: db $55
L0151A0: db $03
L0151A1: db $10
L0151A2: db $07
L0151A3: db $10
L0151A4: db $0E
L0151A5: db $10
L0151A6: db $0C
L0151A7: db $08
L0151A8: db $22
L0151A9: db $18
L0151AA: db $0F
L0151AB: db $09
L0151AC: db $39
L0151AD: db $1F
L0151AE: db $31
L0151AF: db $08
L0151B0: db $63
L0151B1: db $25
L0151B2: db $3F
L0151B3: db $62
L0151B4: db $08
L0151B5: db $C0
L0151B6: db $7F
L0151B7: db $0B
L0151B8: db $1E
L0151B9: db $D8
L0151BA: db $41
L0151BB: db $7C
L0151BC: db $90
L0151BD: db $F8
L0151BE: db $70
L0151BF: db $D0
L0151C0: db $E0
L0151C1: db $30
L0151C2: db $08
L0151C3: db $40
L0151C4: db $61
L0151C5: db $60
L0151C6: db $6F
L0151C7: db $C1
L0151C8: db $FE
L0151C9: db $8F
L0151CA: db $F9
L0151CB: db $BF
L0151CC: db $04
L0151CD: db $E3
L0151CE: db $7E
L0151CF: db $C7
L0151D0: db $FC
L0151D1: db $0F
L0151D2: db $30
L0151D3: db $1F
L0151D4: db $F7
L0151D5: db $3F
L0151D6: db $3C
L0151D7: db $FF
L0151D8: db $B0
L0151D9: db $08
L0151DA: db $80
L0151DB: db $08
L0151DC: db $F0
L0151DD: db $07
L0151DE: db $A5
L0151DF: db $00
L0151E0: db $F0
L0151E1: db $08
L0151E2: db $E0
L0151E3: db $C0
L0151E4: db $00
L0151E5: db $80
L0151E6: db $00
L0151E7: db $C1
L0151E8: db $4A
L0151E9: db $A1
L0151EA: db $FE
L0151EB: db $FC
L0151EC: db $0C
L0151ED: db $F8
L0151EE: db $38
L0151EF: db $70
L0151F0: db $E5
L0151F1: db $79
L0151F2: db $98
L0151F3: db $70
L0151F4: db $60
L0151F5: db $3F
L0151F6: db $28
L0151F7: db $7F
L0151F8: db $09
L0151F9: db $FC
L0151FA: db $40
L0151FB: db $0F
L0151FC: db $0F
L0151FD: db $0A
L0151FE: db $BB
L0151FF: db $E9
L015200: db $00
L015201: db $FF
L015202: db $AB
L015203: db $09
L015204: db $03
L015205: db $1A
L015206: db $01
L015207: db $08
L015208: db $02
L015209: db $1F
L01520A: db $1A
L01520B: db $CB
L01520C: db $AF
L01520D: db $09
L01520E: db $3E
L01520F: db $F8
L015210: db $10
L015211: db $FE
L015212: db $08
L015213: db $00
L015214: db $15
L015215: db $3F
L015216: db $F0
L015217: db $7F
L015218: db $28
L015219: db $83
L01521A: db $28
L01521B: db $C0
L01521C: db $08
L01521D: db $7F
L01521E: db $A0
L01521F: db $1C
L015220: db $C9
L015221: db $69
L015222: db $89
L015223: db $A9
L015224: db $C9
L015225: db $E9
L015226: db $57
L015227: db $00
L015228: db $00
L015229: db $80
L01522A: db $08
L01522B: db $E0
L01522C: db $10
L01522D: db $60
L01522E: db $18
L01522F: db $F4
L015230: db $B8
L015231: db $08
L015232: db $18
L015233: db $10
L015234: db $3C
L015235: db $10
L015236: db $0E
L015237: db $FC
L015238: db $FF
L015239: db $09
L01523A: db $29
L01523B: db $00
L01523C: db $78
L01523D: db $6A
L01523E: db $AA
L01523F: db $C9
L015240: db $03
L015241: db $54
L015242: db $03
L015243: db $08
L015244: db $0F
L015245: db $10
L015246: db $1C
L015247: db $10
L015248: db $38
L015249: db $1F
L01524A: db $C5
L01524B: db $B8
L01524C: db $08
L01524D: db $7C
L01524E: db $3F
L01524F: db $69
L015250: db $08
L015251: db $63
L015252: db $0A
L015253: db $6F
L015254: db $31
L015255: db $48
L015256: db $69
L015257: db $1E
L015258: db $88
L015259: db $A9
L01525A: db $C9
L01525B: db $03
L01525C: db $54
L01525D: db $C0
L01525E: db $08
L01525F: db $F0
L015260: db $10
L015261: db $78
L015262: db $10
L015263: db $FC
L015264: db $F8
L015265: db $55
L015266: db $CC
L015267: db $08
L015268: db $66
L015269: db $20
L01526A: db $76
L01526B: db $08
L01526C: db $36
L01526D: db $08
L01526E: db $55
L01526F: db $3E
L015270: db $08
L015271: db $EC
L015272: db $48
L015273: db $1C
L015274: db $08
L015275: db $38
L015276: db $88
L015277: db $EA
L015278: db $A9
L015279: db $C9
L01527A: db $05
L01527B: db $01
L01527C: db $08
L01527D: db $21
L01527E: db $08
L01527F: db $33
L015280: db $AB
L015281: db $08
L015282: db $3B
L015283: db $08
L015284: db $3F
L015285: db $08
L015286: db $FF
L015287: db $0F
L015288: db $90
L015289: db $09
L01528A: db $FE
L01528B: db $07
L01528C: db $F8
L01528D: db $0F
L01528E: db $09
L01528F: db $F0
L015290: db $1F
L015291: db $FB
L015292: db $FF
L015293: db $07
L015294: db $01
L015295: db $B0
L015296: db $0C
L015297: db $A1
L015298: db $C0
L015299: db $08
L01529A: db $F0
L01529B: db $AD
L01529C: db $08
L01529D: db $03
L01529E: db $2A
L01529F: db $3F
L0152A0: db $C7
L0152A1: db $02
L0152A2: db $21
L0152A3: db $08
L0152A4: db $40
L0152A5: db $33
L0152A6: db $D0
L0152A7: db $3E
L0152A8: db $13
L0152A9: db $FE
L0152AA: db $1B
L0152AB: db $EC
L0152AC: db $7F
L0152AD: db $4D
L0152AE: db $E4
L0152AF: db $08
L0152B0: db $E0
L0152B1: db $FF
L0152B2: db $60
L0152B3: db $08
L0152B4: db $80
L0152B5: db $08
L0152B6: db $69
L0152B7: db $C0
L0152B8: db $2A
L0152B9: db $DD
L0152BA: db $0F
L0152BB: db $08
L0152BC: db $07
L0152BD: db $03
L0152BE: db $00
L0152BF: db $EF
L0152C0: db $E8
L0152C1: db $08
L0152C2: db $28
L0152C3: db $06
L0152C4: db $10
L0152C5: db $09
L0152C6: db $29
L0152C7: db $49
L0152C8: db $FE
L0152C9: db $69
L0152CA: db $89
L0152CB: db $07
L0152CC: db $01
L0152CD: db $89
L0152CE: db $68
L0152CF: db $10
L0152D0: db $1C
L0152D1: db $A7
L0152D2: db $10
L0152D3: db $18
L0152D4: db $08
L0152D5: db $30
L0152D6: db $1F
L0152D7: db $0D
L0152D8: db $49
L0152D9: db $69
L0152DA: db $E7
L0152DB: db $89
L0152DC: db $A9
L0152DD: db $03
L0152DE: db $E8
L0152DF: db $7F
L0152E0: db $0F
L0152E1: db $0F
L0152E2: db $0F
L0152E3: db $BC
L0152E4: db $0D
L0152E5: db $D0
L0152E6: db $0F
L0152E7: db $0F
L0152E8: db $0F
L0152E9: db $0E
L0152EA: db $00
L0152EB: db $FF
L0152EC: db $F8
L0152ED: db $0F
L0152EE: db $0F
L0152EF: db $0F
L0152F0: db $0F
L0152F1: db $09
L0152F2: db $07
L0152F3: db $F8
L0152F4: db $1F
L0152F5: db $03
L0152F6: db $E0
L0152F7: db $3F
L0152F8: db $C7
L0152F9: db $7C
L0152FA: db $9F
L0152FB: db $F0
L0152FC: db $20
L0152FD: db $30
L0152FE: db $5E
L0152FF: db $7F
L015300: db $09
L015301: db $C0
L015302: db $0B
L015303: db $49
L015304: db $A8
L015305: db $68
L015306: db $BF
L015307: db $5A
L015308: db $88
L015309: db $18
L01530A: db $80
L01530B: db $08
L01530C: db $59
L01530D: db $7A
L01530E: db $C8
L01530F: db $7E
L015310: db $40
L015311: db $C3
L015312: db $09
L015313: db $7D
L015314: db $E6
L015315: db $B9
L015316: db $FE
L015317: db $83
L015318: db $7C
L015319: db $14
L01531A: db $8B
L01531B: db $FC
L01531C: db $9B
L01531D: db $08
L01531E: db $F8
L01531F: db $88
L015320: db $F3
L015321: db $6C
L015322: db $8A
L015323: db $20
L015324: db $63
L015325: db $FB
L015326: db $0C
L015327: db $D0
L015328: db $00
L015329: db $0A
L01532A: db $20
L01532B: db $90
L01532C: db $60
L01532D: db $A0
L01532E: db $5F
L01532F: db $0B
L015330: db $B0
L015331: db $2B
L015332: db $D4
L015333: db $2C
L015334: db $00
L015335: db $D7
L015336: db $2F
L015337: db $D8
L015338: db $34
L015339: db $CB
L01533A: db $38
L01533B: db $CF
L01533C: db $3E
L01533D: db $90
L01533E: db $08
L01533F: db $18
L015340: db $EF
L015341: db $09
L015342: db $1D
L015343: db $EE
L015344: db $0E
L015345: db $F5
L015346: db $CC
L015347: db $F1
L015348: db $09
L015349: db $D0
L01534A: db $7F
L01534B: db $0F
L01534C: db $0D
L01534D: db $D1
L01534E: db $7E
L01534F: db $F3
L015350: db $0F
L015351: db $0F
L015352: db $0F
L015353: db $0F
L015354: db $D0
L015355: db $7F
L015356: db $0F
L015357: db $0B
L015358: db $55
L015359: db $00
L01535A: db $02
L01535B: db $08
L01535C: db $08
L01535D: db $0C
L01535E: db $08
L01535F: db $06
L015360: db $08
L015361: db $4F
L015362: db $07
L015363: db $08
L015364: db $03
L015365: db $01
L015366: db $08
L015367: db $18
L015368: db $10
L015369: db $0A
L01536A: db $AB
L01536B: db $01
L01536C: db $18
L01536D: db $08
L01536E: db $0E
L01536F: db $79
L015370: db $02
L015371: db $79
L015372: db $59
L015373: db $54
L015374: db $80
L015375: db $08
L015376: db $C0
L015377: db $10
L015378: db $E0
L015379: db $10
L01537A: db $F0
L01537B: db $60
L01537C: db $00
L01537D: db $F8
L01537E: db $70
L01537F: db $FC
L015380: db $38
L015381: db $7E
L015382: db $3C
L015383: db $F7
L015384: db $1E
L015385: db $08
L015386: db $FB
L015387: db $1F
L015388: db $F9
L015389: db $CF
L01538A: db $48
L01538B: db $6F
L01538C: db $7C
L01538D: db $3F
L01538E: db $35
L01538F: db $3E
L015390: db $0F
L015391: db $C0
L015392: db $04
L015393: db $04
L015394: db $0A
L015395: db $0C
L015396: db $0A
L015397: db $58
L015398: db $1C
L015399: db $09
L01539A: db $08
L01539B: db $F0
L01539C: db $08
L01539D: db $35
L01539E: db $18
L01539F: db $77
L0153A0: db $08
L0153A1: db $19
L0153A2: db $67
L0153A3: db $3B
L0153A4: db $E6
L0153A5: db $08
L0153A6: db $C5
L0153A7: db $7F
L0153A8: db $C1
L0153A9: db $0A
L0153AA: db $FF
L0153AB: db $83
L0153AC: db $FE
L0153AD: db $03
L0153AE: db $18
L0153AF: db $07
L0153B0: db $08
L0153B1: db $02
L0153B2: db $B0
L0153B3: db $B8
L0153B4: db $06
L0153B5: db $EB
L0153B6: db $C8
L0153B7: db $38
L0153B8: db $10
L0153B9: db $70
L0153BA: db $20
L0153BB: db $04
L0153BC: db $F0
L0153BD: db $60
L0153BE: db $E0
L0153BF: db $C0
L0153C0: db $E3
L0153C1: db $08
L0153C2: db $CE
L0153C3: db $80
L0153C4: db $5F
L0153C5: db $FC
L0153C6: db $08
L0153C7: db $F8
L0153C8: db $88
L0153C9: db $58
L0153CA: db $68
L0153CB: db $59
L0153CC: db $00
L0153CD: db $E0
L0153CE: db $38
L0153CF: db $00
L0153D0: db $38
L0153D1: db $07
L0153D2: db $01
L0153D3: db $1E
L0153D4: db $05
L0153D5: db $1F
L0153D6: db $20
L0153D7: db $0F
L0153D8: db $3A
L0153D9: db $10
L0153DA: db $D7
L0153DB: db $5F
L0153DC: db $67
L0153DD: db $39
L0153DE: db $F7
L0153DF: db $20
L0153E0: db $5C
L0153E1: db $3C
L0153E2: db $60
L0153E3: db $3F
L0153E4: db $7C
L0153E5: db $8F
L0153E6: db $6A
L0153E7: db $FA
L0153E8: db $10
L0153E9: db $70
L0153EA: db $FC
L0153EB: db $78
L0153EC: db $30
L0153ED: db $34
L0153EE: db $F8
L0153EF: db $98
L0153F0: db $B8
L0153F1: db $35
L0153F2: db $10
L0153F3: db $18
L0153F4: db $F8
L0153F5: db $03
L0153F6: db $56
L0153F7: db $08
L0153F8: db $FF
L0153F9: db $10
L0153FA: db $45
L0153FB: db $7B
L0153FC: db $C0
L0153FD: db $EF
L0153FE: db $7D
L0153FF: db $E7
L015400: db $F8
L015401: db $EA
L015402: db $28
L015403: db $12
L015404: db $36
L015405: db $7F
L015406: db $43
L015407: db $60
L015408: db $47
L015409: db $FD
L01540A: db $48
L01540B: db $FC
L01540C: db $68
L01540D: db $FE
L01540E: db $08
L01540F: db $30
L015410: db $4E
L015411: db $88
L015412: db $21
L015413: db $E1
L015414: db $80
L015415: db $B5
L015416: db $FB
L015417: db $54
L015418: db $08
L015419: db $A0
L01541A: db $14
L01541B: db $68
L01541C: db $69
L01541D: db $68
L01541E: db $2B
L01541F: db $DE
L015420: db $CB
L015421: db $20
L015422: db $F5
L015423: db $B0
L015424: db $79
L015425: db $08
L015426: db $20
L015427: db $40
L015428: db $CF
L015429: db $00
L01542A: db $02
L01542B: db $B3
L01542C: db $10
L01542D: db $34
L01542E: db $18
L01542F: db $78
L015430: db $7B
L015431: db $28
L015432: db $E1
L015433: db $F4
L015434: db $07
L015435: db $04
L015436: db $C0
L015437: db $09
L015438: db $A0
L015439: db $50
L01543A: db $84
L01543B: db $18
L01543C: db $CE
L01543D: db $10
L01543E: db $FC
L01543F: db $C8
L015440: db $7E
L015441: db $90
L015442: db $05
L015443: db $CF
L015444: db $8A
L015445: db $E9
L015446: db $40
L015447: db $10
L015448: db $00
L015449: db $14
L01544A: db $00
L01544B: db $55
L01544C: db $04
L01544D: db $00
L01544E: db $0A
L01544F: db $00
L015450: db $6D
L015451: db $00
L015452: db $18
L015453: db $00
L015454: db $00
L015455: db $78
L015456: db $7C
L015457: db $41
L015458: db $49
L015459: db $A1
L01545A: db $B1
L01545B: db $44
L01545C: db $4C
L01545D: db $5D
L01545E: db $08
L01545F: db $00
L015460: db $00
L015461: db $07
L015462: db $07
L015463: db $06
L015464: db $46
L015465: db $00
L015466: db $00
L015467: db $20
L015468: db $24
L015469: db $2D
L01546A: db $3D
L01546B: db $C0
L01546C: db $C8
L01546D: db $80
L01546E: db $90
L01546F: db $AD
L015470: db $59
L015471: db $01
L015472: db $00
L015473: db $40
L015474: db $02
L015475: db $CF
L015476: db $78
L015477: db $08
L015478: db $00
L015479: db $47
L01547A: db $38
L01547B: db $29
L01547C: db $17
L01547D: db $1B
L01547E: db $07
L01547F: db $16
L015480: db $0F
L015481: db $20
L015482: db $2C
L015483: db $1F
L015484: db $38
L015485: db $1E
L015486: db $5B
L015487: db $3C
L015488: db $55
L015489: db $3A
L01548A: db $1D
L01548B: db $51
L01548C: db $3E
L01548D: db $57
L01548E: db $88
L01548F: db $00
L015490: db $A8
L015491: db $80
L015492: db $08
L015493: db $5D
L015494: db $C0
L015495: db $10
L015496: db $20
L015497: db $10
L015498: db $E8
L015499: db $18
L01549A: db $FC
L01549B: db $38
L01549C: db $04
L01549D: db $0E
L01549E: db $F0
L01549F: db $F6
L0154A0: db $08
L0154A1: db $3F
L0154A2: db $48
L0154A3: db $6B
L0154A4: db $94
L0154A5: db $04
L0154A6: db $A7
L0154A7: db $58
L0154A8: db $8F
L0154A9: db $70
L0154AA: db $7F
L0154AB: db $68
L0154AC: db $43
L0154AD: db $3C
L0154AE: db $01
L0154AF: db $B7
L0154B0: db $48
L0154B1: db $0B
L0154B2: db $F4
L0154B3: db $CB
L0154B4: db $34
L0154B5: db $01
L0154B6: db $48
L0154B7: db $5D
L0154B8: db $02
L0154B9: db $10
L0154BA: db $07
L0154BB: db $18
L0154BC: db $C0
L0154BD: db $10
L0154BE: db $1F
L0154BF: db $18
L0154C0: db $55
L0154C1: db $20
L0154C2: db $10
L0154C3: db $78
L0154C4: db $F0
L0154C5: db $4F
L0154C6: db $08
L0154C7: db $B3
L0154C8: db $10
L0154C9: db $05
L0154CA: db $9C
L0154CB: db $63
L0154CC: db $A3
L0154CD: db $40
L0154CE: db $A0
L0154CF: db $08
L0154D0: db $C0
L0154D1: db $78
L0154D2: db $80
L0154D3: db $05
L0154D4: db $13
L0154D5: db $EC
L0154D6: db $9F
L0154D7: db $6C
L0154D8: db $3C
L0154D9: db $D8
L0154DA: db $24
L0154DB: db $88
L0154DC: db $0A
L0154DD: db $32
L0154DE: db $CC
L0154DF: db $F2
L0154E0: db $08
L0154E1: db $34
L0154E2: db $C8
L0154E3: db $F8
L0154E4: db $D4
L0154E5: db $88
L0154E6: db $0D
L0154E7: db $7C
L0154E8: db $08
L0154E9: db $3E
L0154EA: db $08
L0154EB: db $14
L0154EC: db $08
L0154ED: db $1A
L0154EE: db $0A
L0154EF: db $04
L0154F0: db $0E
L0154F1: db $28
L0154F2: db $19
L0154F3: db $16
L0154F4: db $38
L0154F5: db $3A
L0154F6: db $FD
L0154F7: db $28
L0154F8: db $07
L0154F9: db $07
L0154FA: db $07
L0154FB: db $07
L0154FC: db $01
L0154FD: db $08
L0154FE: db $08
L0154FF: db $40
L015500: db $F7
L015501: db $10
L015502: db $85
L015503: db $7B
L015504: db $65
L015505: db $1B
L015506: db $1D
L015507: db $03
L015508: db $4F
L015509: db $05
L01550A: db $0A
L01550B: db $02
L01550C: db $01
L01550D: db $0B
L01550E: db $00
L01550F: db $BA
L015510: db $19
L015511: db $AE
L015512: db $39
L015513: db $07
L015514: db $18
L015515: db $0A
L015516: db $18
L015517: db $09
L015518: db $49
L015519: db $83
L01551A: db $A0
L01551B: db $08
L01551C: db $7C
L01551D: db $10
L01551E: db $22
L01551F: db $DD
L015520: db $19
L015521: db $E6
L015522: db $06
L015523: db $01
L015524: db $F9
L015525: db $03
L015526: db $FC
L015527: db $8D
L015528: db $F0
L015529: db $B0
L01552A: db $C0
L01552B: db $00
L01552C: db $B8
L01552D: db $78
L01552E: db $F7
L01552F: db $08
L015530: db $40
L015531: db $50
L015532: db $1F
L015533: db $E0
L015534: db $EC
L015535: db $02
L015536: db $10
L015537: db $7F
L015538: db $80
L015539: db $D7
L01553A: db $28
L01553B: db $4F
L01553C: db $80
L01553D: db $17
L01553E: db $04
L01553F: db $E8
L015540: db $F6
L015541: db $09
L015542: db $0E
L015543: db $F1
L015544: db $E9
L015545: db $86
L015546: db $79
L015547: db $31
L015548: db $C7
L015549: db $38
L01554A: db $38
L01554B: db $F8
L01554C: db $FE
L01554D: db $78
L01554E: db $F8
L01554F: db $08
L015550: db $D4
L015551: db $F0
L015552: db $06
L015553: db $C0
L015554: db $08
L015555: db $20
L015556: db $10
L015557: db $70
L015558: db $80
L015559: db $74
L01555A: db $88
L01555B: db $10
L01555C: db $80
L01555D: db $A8
L01555E: db $84
L01555F: db $A0
L015560: db $64
L015561: db $98
L015562: db $D3
L015563: db $18
L015564: db $30
L015565: db $08
L015566: db $38
L015567: db $10
L015568: db $E0
L015569: db $89
L01556A: db $A9
L01556B: db $5A
L01556C: db $01
L01556D: db $08
L01556E: db $02
L01556F: db $10
L015570: db $09
L015571: db $05
L015572: db $10
L015573: db $07
L015574: db $BA
L015575: db $38
L015576: db $03
L015577: db $08
L015578: db $19
L015579: db $09
L01557A: db $0F
L01557B: db $08
L01557C: db $0E
L01557D: db $A0
L01557E: db $0A
L01557F: db $1C
L015580: db $0A
L015581: db $28
L015582: db $10
L015583: db $58
L015584: db $20
L015585: db $E8
L015586: db $C0
L015587: db $28
L015588: db $20
L015589: db $E0
L01558A: db $88
L01558B: db $70
L01558C: db $A8
L01558D: db $50
L01558E: db $34
L01558F: db $0A
L015590: db $C8
L015591: db $7C
L015592: db $80
L015593: db $F8
L015594: db $58
L015595: db $B8
L015596: db $08
L015597: db $BC
L015598: db $D4
L015599: db $BA
L01559A: db $FB
L01559B: db $06
L01559C: db $08
L01559D: db $07
L01559E: db $08
L01559F: db $05
L0155A0: db $02
L0155A1: db $1C
L0155A2: db $0B
L0155A3: db $04
L0155A4: db $1D
L0155A5: db $28
L0155A6: db $07
L0155A7: db $E9
L0155A8: db $84
L0155A9: db $78
L0155AA: db $10
L0155AB: db $4A
L0155AC: db $34
L0155AD: db $33
L0155AE: db $D0
L0155AF: db $24
L0155B0: db $1F
L0155B1: db $48
L0155B2: db $3F
L0155B3: db $45
L0155B4: db $50
L0155B5: db $08
L0155B6: db $90
L0155B7: db $7F
L0155B8: db $A0
L0155B9: db $08
L0155BA: db $A7
L0155BB: db $78
L0155BC: db $16
L0155BD: db $BE
L0155BE: db $61
L0155BF: db $E1
L0155C0: db $A8
L0155C1: db $9E
L0155C2: db $08
L0155C3: db $40
L0155C4: db $80
L0155C5: db $08
L0155C6: db $63
L0155C7: db $9C
L0155C8: db $3D
L0155C9: db $C2
L0155CA: db $B0
L0155CB: db $E0
L0155CC: db $0A
L0155CD: db $F5
L0155CE: db $00
L0155CF: db $05
L0155D0: db $FA
L0155D1: db $86
L0155D2: db $79
L0155D3: db $45
L0155D4: db $3A
L0155D5: db $24
L0155D6: db $1B
L0155D7: db $04
L0155D8: db $70
L0155D9: db $2F
L0155DA: db $60
L0155DB: db $3F
L0155DC: db $30
L0155DD: db $80
L0155DE: db $31
L0155DF: db $1E
L0155E0: db $BA
L0155E1: db $10
L0155E2: db $0E
L0155E3: db $09
L0155E4: db $F0
L0155E5: db $02
L0155E6: db $80
L0155E7: db $0A
L0155E8: db $C0
L0155E9: db $E8
L0155EA: db $0F
L0155EB: db $0F
L0155EC: db $08
L0155ED: db $F0
L0155EE: db $08
L0155EF: db $CE
L0155F0: db $30
L0155F1: db $0A
L0155F2: db $03
L0155F3: db $FC
L0155F4: db $11
L0155F5: db $0E
L0155F6: db $14
L0155F7: db $0B
L0155F8: db $2E
L0155F9: db $20
L0155FA: db $09
L0155FB: db $56
L0155FC: db $3F
L0155FD: db $68
L0155FE: db $1E
L0155FF: db $0E
L015600: db $0F
L015601: db $0A
L015602: db $A0
L015603: db $01
L015604: db $C2
L015605: db $19
L015606: db $B8
L015607: db $08
L015608: db $2C
L015609: db $10
L01560A: db $74
L01560B: db $28
L01560C: db $0A
L01560D: db $11
L01560E: db $FC
L01560F: db $94
L015610: db $78
L015611: db $09
L015612: db $EC
L015613: db $30
L015614: db $2A
L015615: db $70
L015616: db $1A
L015617: db $19
L015618: db $06
L015619: db $07
L01561A: db $68
L01561B: db $05
L01561C: db $C0
L01561D: db $08
L01561E: db $80
L01561F: db $BC
L015620: db $08
L015621: db $40
L015622: db $10
L015623: db $29
L015624: db $18
L015625: db $5A
L015626: db $38
L015627: db $1F
L015628: db $6A
L015629: db $1D
L01562A: db $B8
L01562B: db $1A
L01562C: db $0E
L01562D: db $00
L01562E: db $03
L01562F: db $1B
L015630: db $07
L015631: db $7F
L015632: db $02
L015633: db $18
L015634: db $10
L015635: db $00
L015636: db $98
L015637: db $08
L015638: db $38
L015639: db $00
L01563A: db $DC
L01563B: db $18
L01563C: db $08
L01563D: db $01
L01563E: db $00
L01563F: db $EA
L015640: db $01
L015641: db $C1
L015642: db $FE
L015643: db $02
L015644: db $F2
L015645: db $3C
L015646: db $E0
L015647: db $7F
L015648: db $79
L015649: db $1E
L01564A: db $19
L01564B: db $72
L01564C: db $81
L01564D: db $38
L01564E: db $C0
L01564F: db $FF
L015650: db $F1
L015651: db $3E
L015652: db $38
L015653: db $1F
L015654: db $49
L015655: db $02
L015656: db $7B
L015657: db $1C
L015658: db $70
L015659: db $3F
L01565A: db $3D
L01565B: db $06
L01565C: db $19
L01565D: db $39
L01565E: db $C7
L01565F: db $A8
L015660: db $00
L015661: db $07
L015662: db $01
L015663: db $00
L015664: db $07
L015665: db $01
L015666: db $5F
L015667: db $C2
L015668: db $07
L015669: db $03
L01566A: db $82
L01566B: db $FC
L01566C: db $C0
L01566D: db $FF
L01566E: db $B8
L01566F: db $FE
L015670: db $4A
L015671: db $80
L015672: db $18
L015673: db $C2
L015674: db $7C
L015675: db $19
L015676: db $C1
L015677: db $38
L015678: db $E0
L015679: db $1B
L01567A: db $7E
L01567B: db $84
L01567C: db $F8
L01567D: db $78
L01567E: db $28
L01567F: db $E3
L015680: db $58
L015681: db $19
L015682: db $DC
L015683: db $48
L015684: db $18
L015685: db $81
L015686: db $18
L015687: db $28
L015688: db $D8
L015689: db $F0
L01568A: db $3E
L01568B: db $6F
L01568C: db $03
L01568D: db $E0
L01568E: db $00
L01568F: db $00
L015690: db $1B
L015691: db $2D
L015692: db $01
L015693: db $2D
L015694: db $C0
L015695: db $4F
L015696: db $01
L015697: db $62
L015698: db $1C
L015699: db $C7
L01569A: db $FF
L01569B: db $71
L01569C: db $3E
L01569D: db $01
L01569E: db $C6
L01569F: db $38
L0156A0: db $37
L0156A1: db $0F
L0156A2: db $C1
L0156A3: db $7E
L0156A4: db $76
L0156A5: db $28
L0156A6: db $90
L0156A7: db $18
L0156A8: db $7F
L0156A9: db $2F
L0156AA: db $58
L0156AB: db $36
L0156AC: db $08
L0156AD: db $20
L0156AE: db $3C
L0156AF: db $5E
L0156B0: db $7C
L0156B1: db $48
L0156B2: db $10
L0156B3: db $B8
L0156B4: db $20
L0156B5: db $D8
L0156B6: db $18
L0156B7: db $18
L0156B8: db $D5
L0156B9: db $50
L0156BA: db $18
L0156BB: db $E3
L0156BC: db $E8
L0156BD: db $81
L0156BE: db $B8
L0156BF: db $42
L0156C0: db $50
L0156C1: db $50
L0156C2: db $E7
L0156C3: db $28
L0156C4: db $83
L0156C5: db $28
L0156C6: db $67
L0156C7: db $1F
L0156C8: db $C2
L0156C9: db $FC
L0156CA: db $F0
L0156CB: db $38
L0156CC: db $18
L0156CD: db $58
L0156CE: db $D0
L0156CF: db $F3
L0156D0: db $7F
L0156D1: db $41
L0156D2: db $3E
L0156D3: db $13
L0156D4: db $43
L0156D5: db $3F
L0156D6: db $F1
L0156D7: db $78
L0156D8: db $62
L0156D9: db $1C
L0156DA: db $38
L0156DB: db $28
L0156DC: db $44
L0156DD: db $F7
L0156DE: db $28
L0156DF: db $08
L0156E0: db $07
L0156E1: db $30
L0156E2: db $28
L0156E3: db $0E
L0156E4: db $03
L0156E5: db $17
L0156E6: db $18
L0156E7: db $0F
L0156E8: db $0C
L0156E9: db $18
L0156EA: db $10
L0156EB: db $D8
L0156EC: db $00
L0156ED: db $28
L0156EE: db $5B
L0156EF: db $00
L0156F0: db $68
L0156F1: db $0A
L0156F2: db $18
L0156F3: db $21
L0156F4: db $06
L0156F5: db $28
L0156F6: db $00
L0156F7: db $BB
L0156F8: db $18
L0156F9: db $02
L0156FA: db $78
L0156FB: db $00
L0156FC: db $18
L0156FD: db $01
L0156FE: db $08
L0156FF: db $01
L015700: db $82
L015701: db $F8
L015702: db $F0
L015703: db $3C
L015704: db $FC
L015705: db $04
L015706: db $F8
L015707: db $29
L015708: db $1C
L015709: db $9E
L01570A: db $2A
L01570B: db $58
L01570C: db $A0
L01570D: db $70
L01570E: db $38
L01570F: db $30
L015710: db $28
L015711: db $70
L015712: db $79
L015713: db $E0
L015714: db $28
L015715: db $08
L015716: db $30
L015717: db $48
L015718: db $40
L015719: db $C0
L01571A: db $08
L01571B: db $78
L01571C: db $80
L01571D: db $38
L01571E: db $08
L01571F: db $11
L015720: db $C8
L015721: db $07
L015722: db $30
L015723: db $3F
L015724: db $04
L015725: db $0E
L015726: db $03
L015727: db $18
L015728: db $0F
L015729: db $0C
L01572A: db $18
L01572B: db $10
L01572C: db $1F
L01572D: db $FF
L01572E: db $00
L01572F: db $28
L015730: db $70
L015731: db $68
L015732: db $29
L015733: db $70
L015734: db $08
L015735: db $18
L015736: db $EC
L015737: db $38
L015738: db $09
L015739: db $29
L01573A: db $1C
L01573B: db $88
L01573C: db $D9
L01573D: db $3E
L01573E: db $19
L01573F: db $83
L015740: db $18
L015741: db $F0
L015742: db $3C
L015743: db $FC
L015744: db $04
L015745: db $F8
L015746: db $29
L015747: db $68
L015748: db $9D
L015749: db $2A
L01574A: db $58
L01574B: db $A0
L01574C: db $F8
L01574D: db $38
L01574E: db $49
L01574F: db $0C
L015750: db $4A
L015751: db $FD
L015752: db $1B
L015753: db $49
L015754: db $18
L015755: db $28
L015756: db $D8
L015757: db $28
L015758: db $1F
L015759: db $90
L01575A: db $59
L01575B: db $3F
L01575C: db $10
L01575D: db $60
L01575E: db $10
L01575F: db $09
L015760: db $C0
L015761: db $7F
L015762: db $09
L015763: db $00
L015764: db $C1
L015765: db $7E
L015766: db $C2
L015767: db $7C
L015768: db $E4
L015769: db $78
L01576A: db $64
L01576B: db $38
L01576C: db $4C
L01576D: db $74
L01576E: db $08
L01576F: db $34
L015770: db $18
L015771: db $C8
L015772: db $08
L015773: db $1C
L015774: db $08
L015775: db $5D
L015776: db $0C
L015777: db $D8
L015778: db $04
L015779: db $08
L01577A: db $07
L01577B: db $05
L01577C: db $C0
L01577D: db $08
L01577E: db $78
L01577F: db $F0
L015780: db $10
L015781: db $E0
L015782: db $10
L015783: db $B8
L015784: db $F8
L015785: db $06
L015786: db $FC
L015787: db $0B
L015788: db $FB
L015789: db $1E
L01578A: db $1F
L01578B: db $07
L01578C: db $00
L01578D: db $01
L01578E: db $00
L01578F: db $78
L015790: db $62
L015791: db $80
L015792: db $99
L015793: db $10
L015794: db $E0
L015795: db $40
L015796: db $60
L015797: db $28
L015798: db $10
L015799: db $F5
L01579A: db $FC
L01579B: db $07
L01579C: db $07
L01579D: db $03
L01579E: db $03
L01579F: db $08
L0157A0: db $0F
L0157A1: db $10
L0157A2: db $42
L0157A3: db $1C
L0157A4: db $10
L0157A5: db $30
L0157A6: db $1F
L0157A7: db $60
L0157A8: db $3F
L0157A9: db $09
L0157AA: db $C1
L0157AB: db $7F
L0157AC: db $7F
L0157AD: db $09
L0157AE: db $3B
L0157AF: db $69
L0157B0: db $89
L0157B1: db $A9
L0157B2: db $C9
L0157B3: db $01
L0157B4: db $DA
L0157B5: db $70
L0157B6: db $08
L0157B7: db $E0
L0157B8: db $10
L0157B9: db $38
L0157BA: db $FF
L0157BB: db $58
L0157BC: db $FC
L0157BD: db $0B
L0157BE: db $3C
L0157BF: db $F0
L0157C0: db $70
L0157C1: db $C0
L0157C2: db $00
L0157C3: db $80
L0157C4: db $00
L0157C5: db $68
L0157C6: db $FF
L0157C7: db $09
L0157C8: db $29
L0157C9: db $49
L0157CA: db $69
L0157CB: db $89
L0157CC: db $A9
L0157CD: db $C9
L0157CE: db $E9
L0157CF: db $FF
L0157D0: db $30
L0157D1: db $08
L0157D2: db $50
L0157D3: db $B9
L0157D4: db $18
L0157D5: db $07
L0157D6: db $07
L0157D7: db $03
L0157D8: db $E7
L0157D9: db $A9
L0157DA: db $C9
L0157DB: db $E9
L0157DC: db $06
L0157DD: db $03
L0157DE: db $0F
L0157DF: db $0F
L0157E0: db $0F
L0157E1: db $80
L0157E2: db $0D
L0157E3: db $00
GFX_Play_SuperSparkle: db $80
L0157E5: db $C0
L0157E6: db $80
L0157E7: db $C0
L0157E8: db $40
L0157E9: db $60
L0157EA: db $40
L0157EB: db $60
L0157EC: db $20
L0157ED: db $30
L0157EE: db $20
L0157EF: db $30
L0157F0: db $10
L0157F1: db $18
L0157F2: db $10
L0157F3: db $18
L0157F4: db $08
L0157F5: db $0C
L0157F6: db $08
L0157F7: db $0C
L0157F8: db $04
L0157F9: db $06
L0157FA: db $04
L0157FB: db $06
L0157FC: db $02
L0157FD: db $03
L0157FE: db $02
L0157FF: db $03
L015800: db $01
L015801: db $01
L015802: db $01
L015803: db $01
L015804: db $00
L015805: db $00
L015806: db $00
L015807: db $00
L015808: db $00
L015809: db $00
L01580A: db $00
L01580B: db $00
L01580C: db $00
L01580D: db $00
L01580E: db $00
L01580F: db $00
L015810: db $00
L015811: db $00
L015812: db $00
L015813: db $00
L015814: db $00
L015815: db $00
L015816: db $00
L015817: db $00
L015818: db $00
L015819: db $00
L01581A: db $00
L01581B: db $03
L01581C: db $03
L01581D: db $0F
L01581E: db $0C
L01581F: db $3C
L015820: db $30
L015821: db $F0
L015822: db $C0
L015823: db $C0
; =============== ProjGFXDef_* ===============
; Defines the tiles to copy when loading projectile/effect graphics for characters.
; These are expressed in tile ranges (as pairs of starting offsets + tile count).
;
; Because parts of the graphics may be reused between characters, multiple ranges
; can be defined, with the GFX being stored in that order in VRAM.
;
; The starting offsets are relative to an uncompressed copy of GFXLZ_Projectiles,
; which should be stored in the LZSS buffer when these are used by Play_LoadProjectileGFXFromDef.

; IN
; - 1: Starting offset
; - 2: Tile count (as 8x8 tiles)
mProjDef: MACRO
	dw \1
	db \2
ENDM

ProjGFXDef_Terry:
	db $01
	mProjDef $0000, $1C
ProjGFXDef_RyoRobert:
	db $02
	mProjDef $0940, $0E
	mProjDef $01C0, $0C
ProjGFXDef_MrKarate:
	db $02
	mProjDef $0940, $0E
	mProjDef $01C0, $12
ProjGFXDef_Athena: 
	db $01
	mProjDef $02E0, $20
ProjGFXDef_Mai:
	db $01
	mProjDef $04E0, $04
ProjGFXDef_Leona:
	db $01
	mProjDef $0520, $24
ProjGFXDef_Geese:
	db $01
	mProjDef $0760, $1E
ProjGFXDef_Krauser:
	db $01
	mProjDef $0940, $1A
ProjGFXDef_MrBig:
	db $02
	mProjDef $0000, $0E
	mProjDef $0AE0, $0A
ProjGFXDef_Iori:
	db $01
	mProjDef $0B80, $18
ProjGFXDef_Mature:
	db $01
	mProjDef $0B80, $10
ProjGFXDef_ChizuruKagura:
	db $01
	mProjDef $0DC0, $20
ProjGFXDef_Goenitz:
	db $01
	mProjDef $0FC0, $22
ProjGFXDef_OIori:
	db $01
	mProjDef $0B80, $24
ProjGFXDef_OLeona:
	db $03
	mProjDef $0B80, $10
	mProjDef $11E0, $08
	mProjDef $06A0, $0C

OBJLstPtrTable_SuperSparkle: db $EB
L015870: db $5A
L015871: db $FF
L015872: db $FF
L015873: db $5E
L015874: db $5B
L015875: db $FF
L015876: db $FF
L015877: db $E1
L015878: db $5A
L015879: db $FF
L01587A: db $FF
L01587B: db $54
L01587C: db $5B
L01587D: db $FF
L01587E: db $FF
L01587F: db $CD
L015880: db $5A
L015881: db $FF
L015882: db $FF
L015883: db $40
L015884: db $5B
L015885: db $FF
L015886: db $FF
L015887: db $C3
L015888: db $5A
L015889: db $FF
L01588A: db $FF
L01588B: db $36
L01588C: db $5B
L01588D: db $FF
L01588E: db $FF
L01588F: db $F5
L015890: db $5A
L015891: db $FF
L015892: db $FF
L015893: db $68
L015894: db $5B
L015895: db $FF
L015896: db $FF
L015897: db $D7
L015898: db $5A
L015899: db $FF
L01589A: db $FF
L01589B: db $4A
L01589C: db $5B
L01589D: db $FF
L01589E: db $FF
L01589F: db $FF;X
L0158A0: db $FF
OBJLstPtrTable_Proj_Terry_PowerWave: db $D4
L0158A2: db $5B
L0158A3: db $FF
L0158A4: db $FF
L0158A5: db $CA
L0158A6: db $5B
L0158A7: db $FF
L0158A8: db $FF
L0158A9: db $D4
L0158AA: db $5B
L0158AB: db $FF
L0158AC: db $FF
L0158AD: db $CA
L0158AE: db $5B
L0158AF: db $FF
L0158B0: db $FF
L0158B1: db $D4
L0158B2: db $5B
L0158B3: db $FF
L0158B4: db $FF
L0158B5: db $CA
L0158B6: db $5B
L0158B7: db $FF
L0158B8: db $FF
L0158B9: db $D4
L0158BA: db $5B
L0158BB: db $FF
L0158BC: db $FF
L0158BD: db $CA
L0158BE: db $5B
L0158BF: db $FF
L0158C0: db $FF
L0158C1: db $E8
L0158C2: db $5B
L0158C3: db $FF
L0158C4: db $FF
L0158C5: db $CA
L0158C6: db $5B
L0158C7: db $FF
L0158C8: db $FF
L0158C9: db $E8
L0158CA: db $5B
L0158CB: db $FF
L0158CC: db $FF
L0158CD: db $CA
L0158CE: db $5B
L0158CF: db $FF
L0158D0: db $FF
L0158D1: db $E8
L0158D2: db $5B
L0158D3: db $FF
L0158D4: db $FF
L0158D5: db $FF;X
L0158D6: db $FF;X
OBJLstPtrTable_Proj_Terry_PowerGeyser: db $E8
L0158D8: db $5B
L0158D9: db $FF
L0158DA: db $FF
L0158DB: db $1C
L0158DC: db $5C
L0158DD: db $FF
L0158DE: db $FF
L0158DF: db $26
L0158E0: db $5C
L0158E1: db $FF
L0158E2: db $FF
L0158E3: db $12
L0158E4: db $5C
L0158E5: db $FF
L0158E6: db $FF
L0158E7: db $26
L0158E8: db $5C
L0158E9: db $FF
L0158EA: db $FF
L0158EB: db $12
L0158EC: db $5C
L0158ED: db $FF
L0158EE: db $FF
L0158EF: db $26
L0158F0: db $5C
L0158F1: db $FF
L0158F2: db $FF
L0158F3: db $12
L0158F4: db $5C
L0158F5: db $FF
L0158F6: db $FF
L0158F7: db $F2
L0158F8: db $5B
L0158F9: db $FF
L0158FA: db $FF
L0158FB: db $12
L0158FC: db $5C
L0158FD: db $FF
L0158FE: db $FF
L0158FF: db $F2
L015900: db $5B
L015901: db $FF
L015902: db $FF
L015903: db $FF;X
L015904: db $FF;X
OBJLstPtrTable_Proj_Iori_YamiBarai: db $F1
L015906: db $5C
L015907: db $FF
L015908: db $FF
L015909: db $CA
L01590A: db $5B
L01590B: db $FF
L01590C: db $FF
L01590D: db $08
L01590E: db $5D
L01590F: db $FF
L015910: db $FF
L015911: db $CA
L015912: db $5B
L015913: db $FF
L015914: db $FF
L015915: db $FF;X
L015916: db $FF
OBJLstPtrTable_Proj_HaohShokohKenS: db $A4
L015918: db $5C
L015919: db $FF
L01591A: db $FF
L01591B: db $90
L01591C: db $5C
L01591D: db $FF
L01591E: db $FF
L01591F: db $A4
L015920: db $5C
L015921: db $FF
L015922: db $FF
L015923: db $90
L015924: db $5C
L015925: db $FF
L015926: db $FF
L015927: db $FF;X
L015928: db $FF
OBJLstPtrTable_Proj_HaohShokohKenD: db $B5
L01592A: db $5F
L01592B: db $FF
L01592C: db $FF
L01592D: db $9A
L01592E: db $5C
L01592F: db $FF
L015930: db $FF
L015931: db $A4
L015932: db $5C
L015933: db $FF
L015934: db $FF
L015935: db $9A
L015936: db $5C
L015937: db $FF
L015938: db $FF
L015939: db $FF;X
L01593A: db $FF
OBJLstPtrTable_Proj_MrKarate_KoOuKen: db $D4
L01593C: db $5C
L01593D: db $FF
L01593E: db $FF
L01593F: db $CA
L015940: db $5C
L015941: db $FF
L015942: db $FF
L015943: db $FF;X
L015944: db $FF
OBJLstPtrTable_Proj_Athena_PsychoBall: db $37
L015946: db $5D
L015947: db $FF
L015948: db $FF
L015949: db $12
L01594A: db $5D
L01594B: db $FF
L01594C: db $FF
L01594D: db $5C
L01594E: db $5D
L01594F: db $FF
L015950: db $FF
L015951: db $12
L015952: db $5D
L015953: db $FF
L015954: db $FF
L015955: db $FF;X
L015956: db $FF
OBJLstPtrTable_Proj_Athena_ShCryst_Swirl: db $1C
L015958: db $5D
L015959: db $FF
L01595A: db $FF
L01595B: db $FF;X
L01595C: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_OrbitS1: db $41;X
L01595E: db $5D;X
L01595F: db $FF;X
L015960: db $FF;X
L015961: db $FF;X
L015962: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_OrbitS2: db $66;X
L015964: db $5D;X
L015965: db $FF;X
L015966: db $FF;X
L015967: db $FF;X
L015968: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_OrbitS3: db $8D;X
L01596A: db $5D;X
L01596B: db $FF;X
L01596C: db $FF;X
L01596D: db $FF;X
L01596E: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_OrbitS4: db $C3;X
L015970: db $5D;X
L015971: db $FF;X
L015972: db $FF;X
L015973: db $FF;X
L015974: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_ThrownNorm: db $26
L015976: db $5D
L015977: db $FF
L015978: db $FF
L015979: db $70
L01597A: db $5D
L01597B: db $FF
L01597C: db $FF
L01597D: db $4B
L01597E: db $5D
L01597F: db $FF
L015980: db $FF
L015981: db $70
L015982: db $5D
L015983: db $FF
L015984: db $FF
L015985: db $FF;X
L015986: db $FF
OBJLstPtrTable_Proj_Athena_ShCryst_ThrownS1: db $4B;X
L015988: db $5D;X
L015989: db $FF;X
L01598A: db $FF;X
L01598B: db $70;X
L01598C: db $5D;X
L01598D: db $FF;X
L01598E: db $FF;X
L01598F: db $FF;X
L015990: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_ThrownS2: db $70;X
L015992: db $5D;X
L015993: db $FF;X
L015994: db $FF;X
L015995: db $FF;X
L015996: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_ThrownS3: db $97;X
L015998: db $5D;X
L015999: db $FF;X
L01599A: db $FF;X
L01599B: db $FF;X
L01599C: db $FF;X
OBJLstPtrTable_Proj_Athena_ShCryst_ThrownS4: db $CD;X
L01599E: db $5D;X
L01599F: db $FF;X
L0159A0: db $FF;X
L0159A1: db $FF;X
L0159A2: db $FF;X
OBJLstPtrTable_Proj_Athena_PsychoTeleport: db $12
L0159A4: db $5E
L0159A5: db $FF
L0159A6: db $FF
L0159A7: db $08
L0159A8: db $5E
L0159A9: db $FF
L0159AA: db $FF
L0159AB: db $FF;X
L0159AC: db $FF
OBJLstPtrTable_Proj_Mai_KaChoSen: db $61
L0159AE: db $5C
L0159AF: db $FF
L0159B0: db $FF
L0159B1: db $72
L0159B2: db $5C
L0159B3: db $FF
L0159B4: db $FF
L0159B5: db $7C
L0159B6: db $5C
L0159B7: db $FF
L0159B8: db $FF
L0159B9: db $86
L0159BA: db $5C
L0159BB: db $FF
L0159BC: db $FF
L0159BD: db $FF;X
L0159BE: db $FF
OBJLstPtrTable_Proj_Leona_VSlasherS: db $39
L0159C0: db $5E
L0159C1: db $FF
L0159C2: db $FF
L0159C3: db $2F
L0159C4: db $5E
L0159C5: db $FF
L0159C6: db $FF
L0159C7: db $FF;X
L0159C8: db $FF
OBJLstPtrTable_Proj_Leona_VSlasherD: db $62
L0159CA: db $5E
L0159CB: db $FF
L0159CC: db $FF
L0159CD: db $2F
L0159CE: db $5E
L0159CF: db $FF
L0159D0: db $FF
L0159D1: db $FF;X
L0159D2: db $FF
OBJLstPtrTable_Leona_BalticLauncher: db $A1
L0159D4: db $5E
L0159D5: db $FF
L0159D6: db $FF
L0159D7: db $BE
L0159D8: db $5E
L0159D9: db $FF
L0159DA: db $FF
L0159DB: db $FF;X
L0159DC: db $FF
OBJLstPtrTable_Proj_OLeona_VSlasher: db $D3
L0159DE: db $60
L0159DF: db $FF
L0159E0: db $FF
L0159E1: db $18
L0159E2: db $61
L0159E3: db $FF
L0159E4: db $FF
L0159E5: db $83
L0159E6: db $61
L0159E7: db $FF
L0159E8: db $FF
L0159E9: db $EE
L0159EA: db $61
L0159EB: db $FF
L0159EC: db $FF
L0159ED: db $FF;X
L0159EE: db $FF
OBJLstPtrTable_Proj_Geese_RagingStormS: db $D9
L0159F0: db $5E
L0159F1: db $FF
L0159F2: db $FF
L0159F3: db $E3
L0159F4: db $5E
L0159F5: db $FF
L0159F6: db $FF
L0159F7: db $00
L0159F8: db $5F
L0159F9: db $FF
L0159FA: db $FF
L0159FB: db $0A
L0159FC: db $5F
L0159FD: db $FF
L0159FE: db $FF
L0159FF: db $FF;X
L015A00: db $FF
OBJLstPtrTable_Proj_Geese_RagingStormD: db $21
L015A02: db $5F
L015A03: db $FF
L015A04: db $FF
L015A05: db $3F
L015A06: db $5F
L015A07: db $FF
L015A08: db $FF
L015A09: db $2B
L015A0A: db $5F
L015A0B: db $FF
L015A0C: db $FF
L015A0D: db $35
L015A0E: db $5F
L015A0F: db $FF
L015A10: db $FF
L015A11: db $FF;X
L015A12: db $FF
OBJLstPtrTable_Proj_Geese_ShippuKen: db $84
L015A14: db $5F
L015A15: db $FF
L015A16: db $FF
L015A17: db $7A
L015A18: db $5F
L015A19: db $FF
L015A1A: db $FF
L015A1B: db $FF;X
L015A1C: db $FF
OBJLstPtrTable_Proj_Krauser_BlitzBall: db $3F
L015A1E: db $60
L015A1F: db $FF
L015A20: db $FF
L015A21: db $49
L015A22: db $60
L015A23: db $FF
L015A24: db $FF
L015A25: db $53
L015A26: db $60
L015A27: db $FF
L015A28: db $FF
L015A29: db $5D
L015A2A: db $60
L015A2B: db $FF
L015A2C: db $FF
L015A2D: db $FF;X
L015A2E: db $FF
OBJLstPtrTable_Proj_Krauser_KaiserWaveS: db $B5
L015A30: db $5F
L015A31: db $FF
L015A32: db $FF
L015A33: db $A1
L015A34: db $5F
L015A35: db $FF
L015A36: db $FF
L015A37: db $FF;X
L015A38: db $FF
OBJLstPtrTable_Proj_Krauser_KaiserWaveD: db $F4
L015A3A: db $5F
L015A3B: db $FF
L015A3C: db $FF
L015A3D: db $BF
L015A3E: db $5F
L015A3F: db $FF
L015A40: db $FF
L015A41: db $AB
L015A42: db $5F
L015A43: db $FF
L015A44: db $FF
L015A45: db $FF;X
L015A46: db $FF
OBJLstPtrTable_Proj_MrBig_BlasterWave: db $78
L015A48: db $60
L015A49: db $FF
L015A4A: db $FF
L015A4B: db $B8
L015A4C: db $60
L015A4D: db $FF
L015A4E: db $FF
L015A4F: db $9B
L015A50: db $60
L015A51: db $FF
L015A52: db $FF
L015A53: db $B8
L015A54: db $60
L015A55: db $FF
L015A56: db $FF
L015A57: db $FF;X
L015A58: db $FF
OBJLstPtrTable_Proj_Mature_HeavensGateS: db $D3
L015A5A: db $60
L015A5B: db $FF
L015A5C: db $FF
L015A5D: db $18
L015A5E: db $61
L015A5F: db $FF
L015A60: db $FF
L015A61: db $83
L015A62: db $61
L015A63: db $FF
L015A64: db $FF
L015A65: db $FF;X
L015A66: db $FF
OBJLstPtrTable_Proj_Mature_HeavensGateD: db $DD
L015A68: db $60
L015A69: db $FF
L015A6A: db $FF
L015A6B: db $C9
L015A6C: db $60
L015A6D: db $FF
L015A6E: db $FF
L015A6F: db $FF;X
L015A70: db $FF
OBJLstPtrTable_Proj_Goenitz_Yonokaze: db $29
L015A72: db $62
L015A73: db $FF
L015A74: db $FF
L015A75: db $6B
L015A76: db $62
L015A77: db $FF
L015A78: db $FF
L015A79: db $33
L015A7A: db $62
L015A7B: db $FF
L015A7C: db $FF
L015A7D: db $FF;X
L015A7E: db $FF
OBJLstPtrTable_Proj_Goenitz_Yamidoukoku: db $29
L015A80: db $62
L015A81: db $FF
L015A82: db $FF
L015A83: db $8E
L015A84: db $62
L015A85: db $FF
L015A86: db $FF
L015A87: db $33
L015A88: db $62
L015A89: db $FF
L015A8A: db $FF
L015A8B: db $FF;X
L015A8C: db $FF
OBJLstPtrTable_Proj_Goenitz_WanpyouTokobuse: db $C9
L015A8E: db $62
L015A8F: db $FF
L015A90: db $FF
L015A91: db $E7
L015A92: db $62
L015A93: db $FF
L015A94: db $FF
L015A95: db $D3
L015A96: db $62
L015A97: db $FF
L015A98: db $FF
L015A99: db $FF;X
L015A9A: db $FF
OBJLstPtrTable_Proj_Chizuru_ReigiIshizue: db $05
L015A9C: db $63
L015A9D: db $FF
L015A9E: db $FF
L015A9F: db $1F
L015AA0: db $63
L015AA1: db $FF
L015AA2: db $FF
L015AA3: db $50
L015AA4: db $63
L015AA5: db $FF
L015AA6: db $FF
L015AA7: db $FB
L015AA8: db $62
L015AA9: db $FF
L015AAA: db $FF
L015AAB: db $29
L015AAC: db $63
L015AAD: db $FF
L015AAE: db $FF
L015AAF: db $46
L015AB0: db $63
L015AB1: db $FF
L015AB2: db $FF
L015AB3: db $FF;X
L015AB4: db $FF
L015AB5: db $80;X
L015AB6: db $00;X
L015AB7: db $00;X
L015AB8: db $FF;X
L015AB9: db $FF;X
L015ABA: db $FF;X
L015ABB: db $BF;X
L015ABC: db $5A;X
L015ABD: db $00;X
L015ABE: db $00;X
L015ABF: db $01
L015AC0: db $10
L015AC1: db $FA
L015AC2: db $00
L015AC3: db $90
L015AC4: db $00
L015AC5: db $00
L015AC6: db $FF;X
L015AC7: db $FF;X
L015AC8: db $FF;X
L015AC9: db $FF
L015ACA: db $5A
L015ACB: db $00
L015ACC: db $00
L015ACD: db $90
L015ACE: db $00
L015ACF: db $00
L015AD0: db $FF;X
L015AD1: db $FF;X
L015AD2: db $FF;X
L015AD3: db $06
L015AD4: db $5B
L015AD5: db $00
L015AD6: db $00
L015AD7: db $90
L015AD8: db $00
L015AD9: db $00
L015ADA: db $FF;X
L015ADB: db $FF;X
L015ADC: db $FF;X
L015ADD: db $13
L015ADE: db $5B
L015ADF: db $00
L015AE0: db $00
L015AE1: db $B0
L015AE2: db $00
L015AE3: db $00
L015AE4: db $FF;X
L015AE5: db $FF;X
L015AE6: db $FF;X
L015AE7: db $13
L015AE8: db $5B
L015AE9: db $00
L015AEA: db $00
L015AEB: db $90
L015AEC: db $00
L015AED: db $00
L015AEE: db $FF;X
L015AEF: db $FF;X
L015AF0: db $FF;X
L015AF1: db $23
L015AF2: db $5B
L015AF3: db $00
L015AF4: db $00
L015AF5: db $F0
L015AF6: db $00
L015AF7: db $00
L015AF8: db $FF;X
L015AF9: db $FF;X
L015AFA: db $FF;X
L015AFB: db $23
L015AFC: db $5B
L015AFD: db $00
L015AFE: db $00
L015AFF: db $02
L015B00: db $20
L015B01: db $F8
L015B02: db $00
L015B03: db $30
L015B04: db $00
L015B05: db $00
L015B06: db $04
L015B07: db $10
L015B08: db $F0
L015B09: db $00
L015B0A: db $20
L015B0B: db $F8
L015B0C: db $00
L015B0D: db $30
L015B0E: db $00
L015B0F: db $00
L015B10: db $40
L015B11: db $08
L015B12: db $00
L015B13: db $05
L015B14: db $00
L015B15: db $E8
L015B16: db $00
L015B17: db $10
L015B18: db $F0
L015B19: db $00
L015B1A: db $20
L015B1B: db $F8
L015B1C: db $00
L015B1D: db $30
L015B1E: db $00
L015B1F: db $00
L015B20: db $40
L015B21: db $08
L015B22: db $00
L015B23: db $06
L015B24: db $F0
L015B25: db $E0
L015B26: db $00
L015B27: db $00
L015B28: db $E8
L015B29: db $00
L015B2A: db $10
L015B2B: db $F0
L015B2C: db $00
L015B2D: db $20
L015B2E: db $F8
L015B2F: db $00
L015B30: db $30
L015B31: db $00
L015B32: db $00
L015B33: db $40
L015B34: db $08
L015B35: db $00
L015B36: db $90
L015B37: db $00
L015B38: db $00
L015B39: db $FF;X
L015B3A: db $FF;X
L015B3B: db $FF;X
L015B3C: db $72
L015B3D: db $5B
L015B3E: db $00
L015B3F: db $00
L015B40: db $90
L015B41: db $00
L015B42: db $00
L015B43: db $FF;X
L015B44: db $FF;X
L015B45: db $FF;X
L015B46: db $7F
L015B47: db $5B
L015B48: db $00
L015B49: db $00
L015B4A: db $90
L015B4B: db $00
L015B4C: db $00
L015B4D: db $FF;X
L015B4E: db $FF;X
L015B4F: db $FF;X
L015B50: db $98
L015B51: db $5B
L015B52: db $00
L015B53: db $00
L015B54: db $D0
L015B55: db $00
L015B56: db $00
L015B57: db $FF;X
L015B58: db $FF;X
L015B59: db $FF;X
L015B5A: db $98
L015B5B: db $5B
L015B5C: db $00
L015B5D: db $00
L015B5E: db $90
L015B5F: db $00
L015B60: db $00
L015B61: db $FF;X
L015B62: db $FF;X
L015B63: db $FF;X
L015B64: db $B1
L015B65: db $5B
L015B66: db $00
L015B67: db $00
L015B68: db $F0
L015B69: db $00
L015B6A: db $00
L015B6B: db $FF;X
L015B6C: db $FF;X
L015B6D: db $FF;X
L015B6E: db $B1
L015B6F: db $5B
L015B70: db $00
L015B71: db $00
L015B72: db $04
L015B73: db $34
L015B74: db $F0
L015B75: db $C2
L015B76: db $30
L015B77: db $F8
L015B78: db $C2
L015B79: db $20
L015B7A: db $00
L015B7B: db $02
L015B7C: db $1C
L015B7D: db $08
L015B7E: db $02
L015B7F: db $08
L015B80: db $3C
L015B81: db $E0
L015B82: db $C2
L015B83: db $38
L015B84: db $E8
L015B85: db $C2
L015B86: db $34
L015B87: db $F0
L015B88: db $C2
L015B89: db $30
L015B8A: db $F8
L015B8B: db $C2
L015B8C: db $20
L015B8D: db $00
L015B8E: db $02
L015B8F: db $1C
L015B90: db $08
L015B91: db $02
L015B92: db $18
L015B93: db $10
L015B94: db $02
L015B95: db $14
L015B96: db $18
L015B97: db $02
L015B98: db $08
L015B99: db $38
L015B9A: db $E8
L015B9B: db $C2
L015B9C: db $34
L015B9D: db $F0
L015B9E: db $C2
L015B9F: db $30
L015BA0: db $F8
L015BA1: db $C2
L015BA2: db $20
L015BA3: db $00
L015BA4: db $02
L015BA5: db $1C
L015BA6: db $08
L015BA7: db $02
L015BA8: db $18
L015BA9: db $10
L015BAA: db $02
L015BAB: db $14
L015BAC: db $18
L015BAD: db $02
L015BAE: db $10
L015BAF: db $20
L015BB0: db $02
L015BB1: db $08
L015BB2: db $34
L015BB3: db $F0
L015BB4: db $C2
L015BB5: db $30
L015BB6: db $F8
L015BB7: db $C2
L015BB8: db $20
L015BB9: db $00
L015BBA: db $02
L015BBB: db $1C
L015BBC: db $08
L015BBD: db $02
L015BBE: db $18
L015BBF: db $10
L015BC0: db $02
L015BC1: db $14
L015BC2: db $18
L015BC3: db $02
L015BC4: db $10
L015BC5: db $20
L015BC6: db $02
L015BC7: db $0C
L015BC8: db $28
L015BC9: db $02
L015BCA: db $80
L015BCB: db $00
L015BCC: db $07
L015BCD: db $FF;X
L015BCE: db $FF;X
L015BCF: db $FF;X
L015BD0: db $BF
L015BD1: db $5A
L015BD2: db $00
L015BD3: db $00
L015BD4: db $A0
L015BD5: db $00
L015BD6: db $07
L015BD7: db $FF;X
L015BD8: db $FF;X
L015BD9: db $FF;X
L015BDA: db $DE
L015BDB: db $5B
L015BDC: db $F4
L015BDD: db $30
L015BDE: db $03
L015BDF: db $00
L015BE0: db $E6
L015BE1: db $02
L015BE2: db $00
L015BE3: db $EE
L015BE4: db $04
L015BE5: db $00
L015BE6: db $F6
L015BE7: db $06
L015BE8: db $80
L015BE9: db $00
L015BEA: db $03
L015BEB: db $FF;X
L015BEC: db $FF;X
L015BED: db $FF;X
L015BEE: db $FC
L015BEF: db $5B
L015BF0: db $08
L015BF1: db $20
L015BF2: db $80
L015BF3: db $00
L015BF4: db $00
L015BF5: db $FF;X
L015BF6: db $FF;X
L015BF7: db $FF;X
L015BF8: db $FC
L015BF9: db $5B
L015BFA: db $08
L015BFB: db $20
L015BFC: db $07
L015BFD: db $00
L015BFE: db $E6
L015BFF: db $02
L015C00: db $00
L015C01: db $EE
L015C02: db $04
L015C03: db $00
L015C04: db $F6
L015C05: db $06
L015C06: db $10
L015C07: db $E6
L015C08: db $08
L015C09: db $10
L015C0A: db $EE
L015C0B: db $0A
L015C0C: db $10
L015C0D: db $F6
L015C0E: db $0C
L015C0F: db $10
L015C10: db $FE
L015C11: db $0E
L015C12: db $80
L015C13: db $00
L015C14: db $00
L015C15: db $FF;X
L015C16: db $FF;X
L015C17: db $FF;X
L015C18: db $BF
L015C19: db $5A
L015C1A: db $00
L015C1B: db $00
L015C1C: db $90
L015C1D: db $00
L015C1E: db $08
L015C1F: db $FF;X
L015C20: db $FF;X
L015C21: db $FF;X
L015C22: db $30
L015C23: db $5C
L015C24: db $08
L015C25: db $E0
L015C26: db $90
L015C27: db $00
L015C28: db $00
L015C29: db $FF;X
L015C2A: db $FF;X
L015C2B: db $FF;X
L015C2C: db $30
L015C2D: db $5C
L015C2E: db $08
L015C2F: db $E0
L015C30: db $10
L015C31: db $20
L015C32: db $E0
L015C33: db $02
L015C34: db $20
L015C35: db $E8
L015C36: db $04
L015C37: db $20
L015C38: db $F0
L015C39: db $06
L015C3A: db $30
L015C3B: db $E0
L015C3C: db $08
L015C3D: db $30
L015C3E: db $E8
L015C3F: db $0A
L015C40: db $30
L015C41: db $F0
L015C42: db $0C
L015C43: db $30
L015C44: db $F8
L015C45: db $0E
L015C46: db $40
L015C47: db $E0
L015C48: db $10
L015C49: db $40
L015C4A: db $E8
L015C4B: db $12
L015C4C: db $40
L015C4D: db $F0
L015C4E: db $14
L015C4F: db $40
L015C50: db $F8
L015C51: db $16
L015C52: db $40
L015C53: db $00
L015C54: db $18
L015C55: db $50
L015C56: db $E8
L015C57: db $1A
L015C58: db $50
L015C59: db $F0
L015C5A: db $1C
L015C5B: db $50
L015C5C: db $00
L015C5D: db $5A
L015C5E: db $50
L015C5F: db $F8
L015C60: db $5C
L015C61: db $80
L015C62: db $00
L015C63: db $0A
L015C64: db $FF;X
L015C65: db $FF;X
L015C66: db $FF;X
L015C67: db $6B
L015C68: db $5C
L015C69: db $1A
L015C6A: db $18
L015C6B: db $02
L015C6C: db $16
L015C6D: db $E4
L015C6E: db $02
L015C6F: db $16
L015C70: db $EC
L015C71: db $04
L015C72: db $A0
L015C73: db $00
L015C74: db $0A
L015C75: db $FF;X
L015C76: db $FF;X
L015C77: db $FF;X
L015C78: db $6B
L015C79: db $5C
L015C7A: db $E6
L015C7B: db $18
L015C7C: db $E0
L015C7D: db $00
L015C7E: db $0A
L015C7F: db $FF;X
L015C80: db $FF;X
L015C81: db $FF;X
L015C82: db $6B
L015C83: db $5C
L015C84: db $E6
L015C85: db $E9
L015C86: db $C0
L015C87: db $00
L015C88: db $0A
L015C89: db $FF;X
L015C8A: db $FF;X
L015C8B: db $FF;X
L015C8C: db $6B
L015C8D: db $5C
L015C8E: db $1A
L015C8F: db $E9
L015C90: db $80
L015C91: db $00
L015C92: db $0B
L015C93: db $FF;X
L015C94: db $FF;X
L015C95: db $FF;X
L015C96: db $BF
L015C97: db $5A
L015C98: db $00
L015C99: db $00
L015C9A: db $80
L015C9B: db $00
L015C9C: db $0C
L015C9D: db $FF;X
L015C9E: db $FF;X
L015C9F: db $FF;X
L015CA0: db $BF
L015CA1: db $5A
L015CA2: db $00
L015CA3: db $00
L015CA4: db $90
L015CA5: db $00
L015CA6: db $0B
L015CA7: db $FF;X
L015CA8: db $FF;X
L015CA9: db $FF;X
L015CAA: db $AE
L015CAB: db $5C
L015CAC: db $06
L015CAD: db $00
L015CAE: db $09
L015CAF: db $28
L015CB0: db $F0
L015CB1: db $10
L015CB2: db $28
L015CB3: db $F8
L015CB4: db $12
L015CB5: db $28
L015CB6: db $00
L015CB7: db $14
L015CB8: db $18
L015CB9: db $F0
L015CBA: db $16
L015CBB: db $18
L015CBC: db $F8
L015CBD: db $18
L015CBE: db $18
L015CBF: db $00
L015CC0: db $1A
L015CC1: db $38
L015CC2: db $F0
L015CC3: db $96
L015CC4: db $38
L015CC5: db $F8
L015CC6: db $98
L015CC7: db $38
L015CC8: db $00
L015CC9: db $9A
L015CCA: db $80
L015CCB: db $00
L015CCC: db $0A
L015CCD: db $FF;X
L015CCE: db $FF;X
L015CCF: db $FF;X
L015CD0: db $BF
L015CD1: db $5A
L015CD2: db $00
L015CD3: db $00
L015CD4: db $90
L015CD5: db $00
L015CD6: db $0A
L015CD7: db $FF;X
L015CD8: db $FF;X
L015CD9: db $FF;X
L015CDA: db $DE
L015CDB: db $5C
L015CDC: db $06
L015CDD: db $F8
L015CDE: db $06
L015CDF: db $28
L015CE0: db $F1
L015CE1: db $1C
L015CE2: db $28
L015CE3: db $F9
L015CE4: db $1E
L015CE5: db $28
L015CE6: db $01
L015CE7: db $20
L015CE8: db $38
L015CE9: db $F1
L015CEA: db $9C
L015CEB: db $38
L015CEC: db $F9
L015CED: db $9E
L015CEE: db $38
L015CEF: db $01
L015CF0: db $A0
L015CF1: db $80
L015CF2: db $00
L015CF3: db $07
L015CF4: db $FF;X
L015CF5: db $FF;X
L015CF6: db $FF;X
L015CF7: db $FB
L015CF8: db $5C
L015CF9: db $0C
L015CFA: db $18
L015CFB: db $04
L015CFC: db $15
L015CFD: db $E2
L015CFE: db $12
L015CFF: db $1B
L015D00: db $EA
L015D01: db $14
L015D02: db $18
L015D03: db $F2
L015D04: db $16
L015D05: db $18
L015D06: db $FA
L015D07: db $18
L015D08: db $A0
L015D09: db $00
L015D0A: db $07
L015D0B: db $FF;X
L015D0C: db $FF;X
L015D0D: db $FF;X
L015D0E: db $FB
L015D0F: db $5C
L015D10: db $F4
L015D11: db $18
L015D12: db $80
L015D13: db $00
L015D14: db $0A
L015D15: db $FF;X
L015D16: db $FF;X
L015D17: db $FF;X
L015D18: db $BF
L015D19: db $5A
L015D1A: db $00
L015D1B: db $00
L015D1C: db $80
L015D1D: db $00
L015D1E: db $0A
L015D1F: db $FF;X
L015D20: db $FF;X
L015D21: db $FF;X
L015D22: db $30
L015D23: db $5D
L015D24: db $00
L015D25: db $00
L015D26: db $80
L015D27: db $00
L015D28: db $07
L015D29: db $FF;X
L015D2A: db $FF;X
L015D2B: db $FF;X
L015D2C: db $30
L015D2D: db $5D
L015D2E: db $00
L015D2F: db $0C
L015D30: db $02
L015D31: db $28
L015D32: db $F8
L015D33: db $02
L015D34: db $28
L015D35: db $00
L015D36: db $04
L015D37: db $90
L015D38: db $00
L015D39: db $0A
L015D3A: db $FF;X
L015D3B: db $FF;X
L015D3C: db $FF;X
L015D3D: db $55
L015D3E: db $5D
L015D3F: db $00
L015D40: db $00
L015D41: db $90;X
L015D42: db $00;X
L015D43: db $0A;X
L015D44: db $FF;X
L015D45: db $FF;X
L015D46: db $FF;X
L015D47: db $55;X
L015D48: db $5D;X
L015D49: db $00;X
L015D4A: db $FF;X
L015D4B: db $90
L015D4C: db $00
L015D4D: db $07
L015D4E: db $FF;X
L015D4F: db $FF;X
L015D50: db $FF;X
L015D51: db $55
L015D52: db $5D
L015D53: db $00
L015D54: db $0C
L015D55: db $02
L015D56: db $28
L015D57: db $F8
L015D58: db $06
L015D59: db $28
L015D5A: db $00
L015D5B: db $46
L015D5C: db $90
L015D5D: db $00
L015D5E: db $0A
L015D5F: db $FF;X
L015D60: db $FF;X
L015D61: db $FF;X
L015D62: db $7A
L015D63: db $5D
L015D64: db $00
L015D65: db $00
L015D66: db $90;X
L015D67: db $00;X
L015D68: db $17;X
L015D69: db $FF;X
L015D6A: db $FF;X
L015D6B: db $FF;X
L015D6C: db $7A;X
L015D6D: db $5D;X
L015D6E: db $00;X
L015D6F: db $FC;X
L015D70: db $90
L015D71: db $00
L015D72: db $1A
L015D73: db $FF;X
L015D74: db $FF;X
L015D75: db $FF;X
L015D76: db $7A
L015D77: db $5D
L015D78: db $00
L015D79: db $0C
L015D7A: db $06
L015D7B: db $20
L015D7C: db $FC
L015D7D: db $08
L015D7E: db $30
L015D7F: db $FC
L015D80: db $88
L015D81: db $20
L015D82: db $F4
L015D83: db $0A
L015D84: db $20
L015D85: db $04
L015D86: db $4A
L015D87: db $30
L015D88: db $F4
L015D89: db $8A
L015D8A: db $30
L015D8B: db $04
L015D8C: db $CA
L015D8D: db $90;X
L015D8E: db $00;X
L015D8F: db $18;X
L015D90: db $FF;X
L015D91: db $FF;X
L015D92: db $FF;X
L015D93: db $A1;X
L015D94: db $5D;X
L015D95: db $00;X
L015D96: db $F5;X
L015D97: db $90;X
L015D98: db $00;X
L015D99: db $1B;X
L015D9A: db $FF;X
L015D9B: db $FF;X
L015D9C: db $FF;X
L015D9D: db $A1;X
L015D9E: db $5D;X
L015D9F: db $00;X
L015DA0: db $05;X
L015DA1: db $0B;X
L015DA2: db $28;X
L015DA3: db $FC;X
L015DA4: db $0C;X
L015DA5: db $18;X
L015DA6: db $FC;X
L015DA7: db $0E;X
L015DA8: db $38;X
L015DA9: db $FC;X
L015DAA: db $8E;X
L015DAB: db $20;X
L015DAC: db $F4;X
L015DAD: db $10;X
L015DAE: db $20;X
L015DAF: db $EC;X
L015DB0: db $12;X
L015DB1: db $20;X
L015DB2: db $04;X
L015DB3: db $50;X
L015DB4: db $20;X
L015DB5: db $0C;X
L015DB6: db $52;X
L015DB7: db $30;X
L015DB8: db $F4;X
L015DB9: db $90;X
L015DBA: db $30;X
L015DBB: db $EC;X
L015DBC: db $92;X
L015DBD: db $30;X
L015DBE: db $04;X
L015DBF: db $D0;X
L015DC0: db $30;X
L015DC1: db $0C;X
L015DC2: db $D2;X
L015DC3: db $90;X
L015DC4: db $00;X
L015DC5: db $19;X
L015DC6: db $FF;X
L015DC7: db $FF;X
L015DC8: db $FF;X
L015DC9: db $D7;X
L015DCA: db $5D;X
L015DCB: db $00;X
L015DCC: db $EE;X
L015DCD: db $90;X
L015DCE: db $00;X
L015DCF: db $1C;X
L015DD0: db $FF;X
L015DD1: db $FF;X
L015DD2: db $FF;X
L015DD3: db $D7;X
L015DD4: db $5D;X
L015DD5: db $00;X
L015DD6: db $FE;X
L015DD7: db $10;X
L015DD8: db $28;X
L015DD9: db $F8;X
L015DDA: db $0C;X
L015DDB: db $28;X
L015DDC: db $00;X
L015DDD: db $4C;X
L015DDE: db $28;X
L015DDF: db $F0;X
L015DE0: db $14;X
L015DE1: db $28;X
L015DE2: db $08;X
L015DE3: db $54;X
L015DE4: db $18;X
L015DE5: db $F8;X
L015DE6: db $16;X
L015DE7: db $18;X
L015DE8: db $F0;X
L015DE9: db $18;X
L015DEA: db $20;X
L015DEB: db $E8;X
L015DEC: db $1A;X
L015DED: db $18;X
L015DEE: db $00;X
L015DEF: db $56;X
L015DF0: db $18;X
L015DF1: db $08;X
L015DF2: db $58;X
L015DF3: db $20;X
L015DF4: db $10;X
L015DF5: db $5A;X
L015DF6: db $38;X
L015DF7: db $F8;X
L015DF8: db $96;X
L015DF9: db $38;X
L015DFA: db $F0;X
L015DFB: db $98;X
L015DFC: db $30;X
L015DFD: db $E8;X
L015DFE: db $9A;X
L015DFF: db $38;X
L015E00: db $00;X
L015E01: db $D6;X
L015E02: db $38;X
L015E03: db $08;X
L015E04: db $D8;X
L015E05: db $30;X
L015E06: db $10;X
L015E07: db $DA;X
L015E08: db $80
L015E09: db $00
L015E0A: db $00
L015E0B: db $FF;X
L015E0C: db $FF;X
L015E0D: db $FF;X
L015E0E: db $BF
L015E0F: db $5A
L015E10: db $00
L015E11: db $00
L015E12: db $90
L015E13: db $00
L015E14: db $00
L015E15: db $FF;X
L015E16: db $FF;X
L015E17: db $FF;X
L015E18: db $1C
L015E19: db $5E
L015E1A: db $00
L015E1B: db $FB
L015E1C: db $06
L015E1D: db $28
L015E1E: db $F8
L015E1F: db $1E
L015E20: db $28
L015E21: db $00
L015E22: db $5E
L015E23: db $18
L015E24: db $F8
L015E25: db $20
L015E26: db $18
L015E27: db $00
L015E28: db $60
L015E29: db $38
L015E2A: db $F8
L015E2B: db $A0
L015E2C: db $38
L015E2D: db $00
L015E2E: db $E0
L015E2F: db $80
L015E30: db $00
L015E31: db $00
L015E32: db $FF;X
L015E33: db $FF;X
L015E34: db $FF;X
L015E35: db $BF
L015E36: db $5A
L015E37: db $00
L015E38: db $00
L015E39: db $90
L015E3A: db $00
L015E3B: db $00
L015E3C: db $FF;X
L015E3D: db $FF;X
L015E3E: db $FF;X
L015E3F: db $43
L015E40: db $5E
L015E41: db $E0
L015E42: db $F4
L015E43: db $0A
L015E44: db $41
L015E45: db $18
L015E46: db $02
L015E47: db $31
L015E48: db $18
L015E49: db $04
L015E4A: db $2E
L015E4B: db $10
L015E4C: db $06
L015E4D: db $1E
L015E4E: db $10
L015E4F: db $08
L015E50: db $1B
L015E51: db $08
L015E52: db $0A
L015E53: db $41
L015E54: db $20
L015E55: db $42
L015E56: db $31
L015E57: db $20
L015E58: db $44
L015E59: db $2E
L015E5A: db $28
L015E5B: db $46
L015E5C: db $1E
L015E5D: db $28
L015E5E: db $48
L015E5F: db $1B
L015E60: db $30
L015E61: db $4A
L015E62: db $90
L015E63: db $00
L015E64: db $00
L015E65: db $FF;X
L015E66: db $FF;X
L015E67: db $FF;X
L015E68: db $6C
L015E69: db $5E
L015E6A: db $E0
L015E6B: db $F2
L015E6C: db $0E
L015E6D: db $3D
L015E6E: db $18
L015E6F: db $0C
L015E70: db $2D
L015E71: db $18
L015E72: db $0E
L015E73: db $30
L015E74: db $10
L015E75: db $10
L015E76: db $20
L015E77: db $10
L015E78: db $12
L015E79: db $20
L015E7A: db $08
L015E7B: db $14
L015E7C: db $14
L015E7D: db $00
L015E7E: db $16
L015E7F: db $4D
L015E80: db $18
L015E81: db $18
L015E82: db $3D
L015E83: db $20
L015E84: db $4C
L015E85: db $2D
L015E86: db $20
L015E87: db $4E
L015E88: db $30
L015E89: db $28
L015E8A: db $50
L015E8B: db $20
L015E8C: db $28
L015E8D: db $52
L015E8E: db $20
L015E8F: db $30
L015E90: db $54
L015E91: db $14
L015E92: db $38
L015E93: db $56
L015E94: db $4D
L015E95: db $20
L015E96: db $58
L015E97: db $80;X
L015E98: db $00;X
L015E99: db $0A;X
L015E9A: db $FF;X
L015E9B: db $FF;X
L015E9C: db $FF;X
L015E9D: db $BF;X
L015E9E: db $5A;X
L015E9F: db $00;X
L015EA0: db $00;X
L015EA1: db $90
L015EA2: db $00
L015EA3: db $0A
L015EA4: db $FF;X
L015EA5: db $FF;X
L015EA6: db $FF;X
L015EA7: db $AB
L015EA8: db $5E
L015EA9: db $00
L015EAA: db $00
L015EAB: db $06
L015EAC: db $20
L015EAD: db $F8
L015EAE: db $1A
L015EAF: db $20
L015EB0: db $00
L015EB1: db $1C
L015EB2: db $30
L015EB3: db $F8
L015EB4: db $1E
L015EB5: db $30
L015EB6: db $00
L015EB7: db $20
L015EB8: db $28
L015EB9: db $F0
L015EBA: db $22
L015EBB: db $28
L015EBC: db $08
L015EBD: db $62
L015EBE: db $90
L015EBF: db $00
L015EC0: db $0A
L015EC1: db $FF;X
L015EC2: db $FF;X
L015EC3: db $FF;X
L015EC4: db $C8
L015EC5: db $5E
L015EC6: db $00
L015EC7: db $00
L015EC8: db $02
L015EC9: db $29
L015ECA: db $F8
L015ECB: db $24
L015ECC: db $29
L015ECD: db $00
L015ECE: db $64
L015ECF: db $80;X
L015ED0: db $00;X
L015ED1: db $00;X
L015ED2: db $FF;X
L015ED3: db $FF;X
L015ED4: db $FF;X
L015ED5: db $BF;X
L015ED6: db $5A;X
L015ED7: db $00;X
L015ED8: db $00;X
L015ED9: db $80
L015EDA: db $00
L015EDB: db $0D
L015EDC: db $FF;X
L015EDD: db $FF;X
L015EDE: db $FF;X
L015EDF: db $ED
L015EE0: db $5E
L015EE1: db $F8
L015EE2: db $00
L015EE3: db $A0
L015EE4: db $00
L015EE5: db $0D
L015EE6: db $FF;X
L015EE7: db $FF;X
L015EE8: db $FF;X
L015EE9: db $ED
L015EEA: db $5E
L015EEB: db $08
L015EEC: db $00
L015EED: db $06
L015EEE: db $10
L015EEF: db $EF
L015EF0: db $02
L015EF1: db $06
L015EF2: db $F4
L015EF3: db $04
L015EF4: db $F6
L015EF5: db $F7
L015EF6: db $06
L015EF7: db $20
L015EF8: db $EE
L015EF9: db $08
L015EFA: db $30
L015EFB: db $EE
L015EFC: db $0A
L015EFD: db $30
L015EFE: db $F6
L015EFF: db $0C
L015F00: db $80
L015F01: db $00
L015F02: db $0D
L015F03: db $FF;X
L015F04: db $FF;X
L015F05: db $FF;X
L015F06: db $ED
L015F07: db $5E
L015F08: db $04
L015F09: db $00
L015F0A: db $A0
L015F0B: db $00
L015F0C: db $0D
L015F0D: db $FF;X
L015F0E: db $FF;X
L015F0F: db $FF;X
L015F10: db $ED
L015F11: db $5E
L015F12: db $FC
L015F13: db $00
L015F14: db $04;X
L015F15: db $00;X
L015F16: db $FC;X
L015F17: db $0E;X
L015F18: db $10;X
L015F19: db $FC;X
L015F1A: db $10;X
L015F1B: db $20;X
L015F1C: db $FC;X
L015F1D: db $10;X
L015F1E: db $30;X
L015F1F: db $FC;X
L015F20: db $10;X
L015F21: db $90
L015F22: db $00
L015F23: db $0E
L015F24: db $FF;X
L015F25: db $FF;X
L015F26: db $FF;X
L015F27: db $49
L015F28: db $5F
L015F29: db $E8
L015F2A: db $00
L015F2B: db $90
L015F2C: db $00
L015F2D: db $0E
L015F2E: db $FF;X
L015F2F: db $FF;X
L015F30: db $FF;X
L015F31: db $49
L015F32: db $5F
L015F33: db $F8
L015F34: db $00
L015F35: db $90
L015F36: db $00
L015F37: db $0E
L015F38: db $FF;X
L015F39: db $FF;X
L015F3A: db $FF;X
L015F3B: db $49
L015F3C: db $5F
L015F3D: db $08
L015F3E: db $00
L015F3F: db $90
L015F40: db $00
L015F41: db $0E
L015F42: db $FF;X
L015F43: db $FF;X
L015F44: db $FF;X
L015F45: db $49
L015F46: db $5F
L015F47: db $18
L015F48: db $00
L015F49: db $10
L015F4A: db $C0
L015F4B: db $F8
L015F4C: db $12
L015F4D: db $C0
L015F4E: db $00
L015F4F: db $52
L015F50: db $D0
L015F51: db $F8
L015F52: db $12
L015F53: db $D0
L015F54: db $00
L015F55: db $52
L015F56: db $E0
L015F57: db $F8
L015F58: db $12
L015F59: db $E0
L015F5A: db $00
L015F5B: db $52
L015F5C: db $F0
L015F5D: db $F8
L015F5E: db $12
L015F5F: db $F0
L015F60: db $00
L015F61: db $52
L015F62: db $00
L015F63: db $F8
L015F64: db $12
L015F65: db $00
L015F66: db $00
L015F67: db $52
L015F68: db $10
L015F69: db $F8
L015F6A: db $12
L015F6B: db $10
L015F6C: db $00
L015F6D: db $52
L015F6E: db $20
L015F6F: db $F8
L015F70: db $12
L015F71: db $20
L015F72: db $00
L015F73: db $52
L015F74: db $30
L015F75: db $F8
L015F76: db $12
L015F77: db $30
L015F78: db $00
L015F79: db $52
L015F7A: db $80
L015F7B: db $00
L015F7C: db $07
L015F7D: db $FF;X
L015F7E: db $FF;X
L015F7F: db $FF;X
L015F80: db $BF
L015F81: db $5A
L015F82: db $00
L015F83: db $00
L015F84: db $80
L015F85: db $00
L015F86: db $07
L015F87: db $FF;X
L015F88: db $FF;X
L015F89: db $FF;X
L015F8A: db $8E
L015F8B: db $5F
L015F8C: db $00
L015F8D: db $11
L015F8E: db $06
L015F8F: db $1F
L015F90: db $F8
L015F91: db $14
L015F92: db $1F
L015F93: db $00
L015F94: db $16
L015F95: db $1F
L015F96: db $08
L015F97: db $18
L015F98: db $0F
L015F99: db $F8
L015F9A: db $1A
L015F9B: db $0F
L015F9C: db $00
L015F9D: db $1C
L015F9E: db $0F
L015F9F: db $08
L015FA0: db $1E
L015FA1: db $80
L015FA2: db $00
L015FA3: db $0C
L015FA4: db $FF;X
L015FA5: db $FF;X
L015FA6: db $FF;X
L015FA7: db $BF
L015FA8: db $5A
L015FA9: db $00
L015FAA: db $00
L015FAB: db $80
L015FAC: db $00
L015FAD: db $12
L015FAE: db $FF;X
L015FAF: db $FF;X
L015FB0: db $FF;X
L015FB1: db $BF
L015FB2: db $5A
L015FB3: db $00
L015FB4: db $00
L015FB5: db $90
L015FB6: db $00
L015FB7: db $0C
L015FB8: db $FF;X
L015FB9: db $FF;X
L015FBA: db $FF;X
L015FBB: db $C9
L015FBC: db $5F
L015FBD: db $00
L015FBE: db $00
L015FBF: db $90
L015FC0: db $00
L015FC1: db $12
L015FC2: db $FF;X
L015FC3: db $FF;X
L015FC4: db $FF;X
L015FC5: db $C9
L015FC6: db $5F
L015FC7: db $00
L015FC8: db $00
L015FC9: db $0E
L015FCA: db $20
L015FCB: db $F8
L015FCC: db $02
L015FCD: db $20
L015FCE: db $00
L015FCF: db $04
L015FD0: db $20
L015FD1: db $08
L015FD2: db $06
L015FD3: db $20
L015FD4: db $10
L015FD5: db $08
L015FD6: db $10
L015FD7: db $FB
L015FD8: db $0A
L015FD9: db $10
L015FDA: db $03
L015FDB: db $0C
L015FDC: db $10
L015FDD: db $0B
L015FDE: db $0E
L015FDF: db $30
L015FE0: db $F8
L015FE1: db $82
L015FE2: db $30
L015FE3: db $00
L015FE4: db $84
L015FE5: db $30
L015FE6: db $08
L015FE7: db $86
L015FE8: db $30
L015FE9: db $10
L015FEA: db $88
L015FEB: db $40
L015FEC: db $FB
L015FED: db $8A
L015FEE: db $40
L015FEF: db $03
L015FF0: db $8C
L015FF1: db $40
L015FF2: db $0B
L015FF3: db $8E
L015FF4: db $90
L015FF5: db $00
L015FF6: db $12
L015FF7: db $FF;X
L015FF8: db $FF;X
L015FF9: db $FF;X
L015FFA: db $FE
L015FFB: db $5F
L015FFC: db $00
L015FFD: db $00
L015FFE: db $12
L015FFF: db $28
L016000: db $F8
L016001: db $10
L016002: db $28
L016003: db $00
L016004: db $12
L016005: db $28
L016006: db $08
L016007: db $14
L016008: db $28
L016009: db $10
L01600A: db $16
L01600B: db $18
L01600C: db $F9
L01600D: db $02
L01600E: db $18
L01600F: db $01
L016010: db $04
L016011: db $18
L016012: db $09
L016013: db $06
L016014: db $18
L016015: db $11
L016016: db $08
L016017: db $08
L016018: db $FC
L016019: db $0A
L01601A: db $08
L01601B: db $04
L01601C: db $0C
L01601D: db $08
L01601E: db $0C
L01601F: db $0E
L016020: db $38
L016021: db $F9
L016022: db $82
L016023: db $38
L016024: db $01
L016025: db $84
L016026: db $38
L016027: db $09
L016028: db $86
L016029: db $38
L01602A: db $11
L01602B: db $88
L01602C: db $48
L01602D: db $FC
L01602E: db $8A
L01602F: db $48
L016030: db $04
L016031: db $8C
L016032: db $48
L016033: db $0C
L016034: db $8E
L016035: db $80;X
L016036: db $00;X
L016037: db $07;X
L016038: db $FF;X
L016039: db $FF;X
L01603A: db $FF;X
L01603B: db $BF;X
L01603C: db $5A;X
L01603D: db $00;X
L01603E: db $00;X
L01603F: db $80
L016040: db $00
L016041: db $07
L016042: db $FF;X
L016043: db $FF;X
L016044: db $FF;X
L016045: db $67
L016046: db $60
L016047: db $00
L016048: db $09
L016049: db $A0
L01604A: db $00
L01604B: db $07
L01604C: db $FF;X
L01604D: db $FF;X
L01604E: db $FF;X
L01604F: db $67
L016050: db $60
L016051: db $00
L016052: db $09
L016053: db $E0
L016054: db $00
L016055: db $07
L016056: db $FF;X
L016057: db $FF;X
L016058: db $FF;X
L016059: db $67
L01605A: db $60
L01605B: db $00
L01605C: db $09
L01605D: db $C0
L01605E: db $00
L01605F: db $07
L016060: db $FF;X
L016061: db $FF;X
L016062: db $FF;X
L016063: db $67
L016064: db $60
L016065: db $00
L016066: db $09
L016067: db $02
L016068: db $28
L016069: db $F8
L01606A: db $18
L01606B: db $28
L01606C: db $00
L01606D: db $1A
L01606E: db $80;X
L01606F: db $00;X
L016070: db $11;X
L016071: db $FF;X
L016072: db $FF;X
L016073: db $FF;X
L016074: db $BF;X
L016075: db $5A;X
L016076: db $00;X
L016077: db $00;X
L016078: db $90
L016079: db $00
L01607A: db $11
L01607B: db $FF;X
L01607C: db $FF;X
L01607D: db $FF;X
L01607E: db $82
L01607F: db $60
L016080: db $00
L016081: db $00
L016082: db $08
L016083: db $20
L016084: db $F8
L016085: db $10
L016086: db $20
L016087: db $F0
L016088: db $12
L016089: db $20
L01608A: db $00
L01608B: db $50
L01608C: db $20
L01608D: db $08
L01608E: db $52
L01608F: db $30
L016090: db $F8
L016091: db $90
L016092: db $30
L016093: db $F0
L016094: db $92
L016095: db $30
L016096: db $00
L016097: db $D0
L016098: db $30
L016099: db $08
L01609A: db $D2
L01609B: db $90
L01609C: db $00
L01609D: db $11
L01609E: db $FF;X
L01609F: db $FF;X
L0160A0: db $FF;X
L0160A1: db $A5
L0160A2: db $60
L0160A3: db $00
L0160A4: db $00
L0160A5: db $06
L0160A6: db $20
L0160A7: db $F8
L0160A8: db $14
L0160A9: db $20
L0160AA: db $00
L0160AB: db $54
L0160AC: db $30
L0160AD: db $F8
L0160AE: db $94
L0160AF: db $30
L0160B0: db $00
L0160B1: db $D4
L0160B2: db $28
L0160B3: db $F0
L0160B4: db $16
L0160B5: db $28
L0160B6: db $08
L0160B7: db $56
L0160B8: db $90
L0160B9: db $00
L0160BA: db $11
L0160BB: db $FF;X
L0160BC: db $FF;X
L0160BD: db $FF;X
L0160BE: db $C2
L0160BF: db $60
L0160C0: db $00
L0160C1: db $00
L0160C2: db $02
L0160C3: db $28
L0160C4: db $F8
L0160C5: db $18
L0160C6: db $28
L0160C7: db $00
L0160C8: db $58
L0160C9: db $80
L0160CA: db $00
L0160CB: db $00
L0160CC: db $FF;X
L0160CD: db $FF;X
L0160CE: db $FF;X
L0160CF: db $BF
L0160D0: db $5A
L0160D1: db $00
L0160D2: db $00
L0160D3: db $90
L0160D4: db $00
L0160D5: db $0E
L0160D6: db $FF;X
L0160D7: db $FF;X
L0160D8: db $FF;X
L0160D9: db $E7
L0160DA: db $60
L0160DB: db $00
L0160DC: db $00
L0160DD: db $90
L0160DE: db $00
L0160DF: db $00
L0160E0: db $FF;X
L0160E1: db $FF;X
L0160E2: db $FF;X
L0160E3: db $E7
L0160E4: db $60
L0160E5: db $00
L0160E6: db $00
L0160E7: db $10
L0160E8: db $C0
L0160E9: db $F8
L0160EA: db $02
L0160EB: db $C0
L0160EC: db $00
L0160ED: db $42
L0160EE: db $D0
L0160EF: db $F8
L0160F0: db $02
L0160F1: db $D0
L0160F2: db $00
L0160F3: db $42
L0160F4: db $E0
L0160F5: db $F8
L0160F6: db $02
L0160F7: db $E0
L0160F8: db $00
L0160F9: db $42
L0160FA: db $F0
L0160FB: db $F8
L0160FC: db $02
L0160FD: db $F0
L0160FE: db $00
L0160FF: db $42
L016100: db $00
L016101: db $F8
L016102: db $02
L016103: db $00
L016104: db $00
L016105: db $42
L016106: db $10
L016107: db $F8
L016108: db $02
L016109: db $10
L01610A: db $00
L01610B: db $42
L01610C: db $20
L01610D: db $F8
L01610E: db $02
L01610F: db $20
L016110: db $00
L016111: db $42
L016112: db $30
L016113: db $F8
L016114: db $02
L016115: db $30
L016116: db $00
L016117: db $42
L016118: db $90
L016119: db $00
L01611A: db $0E
L01611B: db $FF;X
L01611C: db $FF;X
L01611D: db $FF;X
L01611E: db $22
L01611F: db $61
L016120: db $00
L016121: db $00
L016122: db $20
L016123: db $C0
L016124: db $F0
L016125: db $04
L016126: db $C0
L016127: db $F8
L016128: db $06
L016129: db $C0
L01612A: db $08
L01612B: db $44
L01612C: db $C0
L01612D: db $00
L01612E: db $46
L01612F: db $D0
L016130: db $F0
L016131: db $04
L016132: db $D0
L016133: db $F8
L016134: db $06
L016135: db $D0
L016136: db $08
L016137: db $44
L016138: db $D0
L016139: db $00
L01613A: db $46
L01613B: db $E0
L01613C: db $F0
L01613D: db $04
L01613E: db $E0
L01613F: db $F8
L016140: db $06
L016141: db $E0
L016142: db $08
L016143: db $44
L016144: db $E0
L016145: db $00
L016146: db $46
L016147: db $F0
L016148: db $F0
L016149: db $04
L01614A: db $F0
L01614B: db $F8
L01614C: db $06
L01614D: db $F0
L01614E: db $08
L01614F: db $44
L016150: db $F0
L016151: db $00
L016152: db $46
L016153: db $00
L016154: db $F0
L016155: db $04
L016156: db $00
L016157: db $F8
L016158: db $06
L016159: db $00
L01615A: db $08
L01615B: db $44
L01615C: db $00
L01615D: db $00
L01615E: db $46
L01615F: db $10
L016160: db $F0
L016161: db $04
L016162: db $10
L016163: db $F8
L016164: db $06
L016165: db $10
L016166: db $08
L016167: db $44
L016168: db $10
L016169: db $00
L01616A: db $46
L01616B: db $20
L01616C: db $F0
L01616D: db $04
L01616E: db $20
L01616F: db $F8
L016170: db $06
L016171: db $20
L016172: db $08
L016173: db $44
L016174: db $20
L016175: db $00
L016176: db $46
L016177: db $30
L016178: db $F0
L016179: db $04
L01617A: db $30
L01617B: db $F8
L01617C: db $06
L01617D: db $30
L01617E: db $08
L01617F: db $44
L016180: db $30
L016181: db $00
L016182: db $46
L016183: db $90
L016184: db $00
L016185: db $0E
L016186: db $FF;X
L016187: db $FF;X
L016188: db $FF;X
L016189: db $8D
L01618A: db $61
L01618B: db $00
L01618C: db $00
L01618D: db $20
L01618E: db $C0
L01618F: db $F0
L016190: db $04
L016191: db $C0
L016192: db $F8
L016193: db $06
L016194: db $C0
L016195: db $08
L016196: db $44
L016197: db $C0
L016198: db $00
L016199: db $46
L01619A: db $D0
L01619B: db $F0
L01619C: db $04
L01619D: db $D0
L01619E: db $F8
L01619F: db $06
L0161A0: db $D0
L0161A1: db $08
L0161A2: db $44
L0161A3: db $D0
L0161A4: db $00
L0161A5: db $46
L0161A6: db $E0
L0161A7: db $F0
L0161A8: db $04
L0161A9: db $E0
L0161AA: db $F8
L0161AB: db $06
L0161AC: db $E0
L0161AD: db $08
L0161AE: db $44
L0161AF: db $E0
L0161B0: db $00
L0161B1: db $46
L0161B2: db $F0
L0161B3: db $F0
L0161B4: db $04
L0161B5: db $F0
L0161B6: db $F8
L0161B7: db $06
L0161B8: db $F0
L0161B9: db $08
L0161BA: db $44
L0161BB: db $F0
L0161BC: db $00
L0161BD: db $46
L0161BE: db $00
L0161BF: db $F8
L0161C0: db $08
L0161C1: db $10
L0161C2: db $F8
L0161C3: db $0A
L0161C4: db $20
L0161C5: db $F8
L0161C6: db $0C
L0161C7: db $00
L0161C8: db $F0
L0161C9: db $0E
L0161CA: db $10
L0161CB: db $F0
L0161CC: db $10
L0161CD: db $00
L0161CE: db $00
L0161CF: db $48
L0161D0: db $10
L0161D1: db $00
L0161D2: db $4A
L0161D3: db $20
L0161D4: db $00
L0161D5: db $4C
L0161D6: db $00
L0161D7: db $08
L0161D8: db $4E
L0161D9: db $10
L0161DA: db $08
L0161DB: db $50
L0161DC: db $20
L0161DD: db $F0
L0161DE: db $04
L0161DF: db $20
L0161E0: db $08
L0161E1: db $44
L0161E2: db $30
L0161E3: db $F0
L0161E4: db $04
L0161E5: db $30
L0161E6: db $F8
L0161E7: db $06
L0161E8: db $30
L0161E9: db $08
L0161EA: db $44
L0161EB: db $30
L0161EC: db $00
L0161ED: db $46
L0161EE: db $90
L0161EF: db $00
L0161F0: db $0E
L0161F1: db $FF;X
L0161F2: db $FF;X
L0161F3: db $FF;X
L0161F4: db $F8
L0161F5: db $61
L0161F6: db $00
L0161F7: db $00
L0161F8: db $10
L0161F9: db $C0
L0161FA: db $F8
L0161FB: db $12
L0161FC: db $C0
L0161FD: db $00
L0161FE: db $42
L0161FF: db $D0
L016200: db $F8
L016201: db $12
L016202: db $D0
L016203: db $00
L016204: db $42
L016205: db $E0
L016206: db $F8
L016207: db $12
L016208: db $E0
L016209: db $00
L01620A: db $42
L01620B: db $F0
L01620C: db $F8
L01620D: db $12
L01620E: db $F0
L01620F: db $00
L016210: db $42
L016211: db $00
L016212: db $F8
L016213: db $12
L016214: db $00
L016215: db $00
L016216: db $42
L016217: db $10
L016218: db $F8
L016219: db $12
L01621A: db $10
L01621B: db $00
L01621C: db $42
L01621D: db $20
L01621E: db $F8
L01621F: db $12
L016220: db $20
L016221: db $00
L016222: db $42
L016223: db $30
L016224: db $F8
L016225: db $12
L016226: db $30
L016227: db $00
L016228: db $42
L016229: db $80
L01622A: db $00
L01622B: db $10
L01622C: db $FF;X
L01622D: db $FF;X
L01622E: db $FF;X
L01622F: db $3D
L016230: db $62
L016231: db $00
L016232: db $00
L016233: db $A0
L016234: db $00
L016235: db $10
L016236: db $FF;X
L016237: db $FF;X
L016238: db $FF;X
L016239: db $3D
L01623A: db $62
L01623B: db $00
L01623C: db $00
L01623D: db $0F
L01623E: db $30
L01623F: db $F8
L016240: db $02
L016241: db $20
L016242: db $F8
L016243: db $04
L016244: db $20
L016245: db $F0
L016246: db $06
L016247: db $10
L016248: db $F8
L016249: db $08
L01624A: db $10
L01624B: db $F0
L01624C: db $0A
L01624D: db $00
L01624E: db $F8
L01624F: db $08
L016250: db $00
L016251: db $F0
L016252: db $0A
L016253: db $F0
L016254: db $F8
L016255: db $08
L016256: db $F0
L016257: db $F0
L016258: db $0A
L016259: db $E0
L01625A: db $F8
L01625B: db $08
L01625C: db $E0
L01625D: db $F0
L01625E: db $0A
L01625F: db $D0
L016260: db $F8
L016261: db $08
L016262: db $D0
L016263: db $F0
L016264: db $0A
L016265: db $C0
L016266: db $F8
L016267: db $08
L016268: db $C0
L016269: db $F0
L01626A: db $0A
L01626B: db $80
L01626C: db $00
L01626D: db $10
L01626E: db $FF;X
L01626F: db $FF;X
L016270: db $FF;X
L016271: db $75
L016272: db $62
L016273: db $00
L016274: db $00
L016275: db $08
L016276: db $30
L016277: db $FC
L016278: db $0C
L016279: db $20
L01627A: db $FC
L01627B: db $0E
L01627C: db $10
L01627D: db $FC
L01627E: db $0E
L01627F: db $00
L016280: db $FC
L016281: db $0E
L016282: db $F0
L016283: db $FC
L016284: db $0E
L016285: db $E0
L016286: db $FC
L016287: db $0E
L016288: db $D0
L016289: db $FC
L01628A: db $0E
L01628B: db $C0
L01628C: db $FC
L01628D: db $0E
L01628E: db $80
L01628F: db $00
L016290: db $10
L016291: db $FF;X
L016292: db $FF;X
L016293: db $FF;X
L016294: db $98
L016295: db $62
L016296: db $00
L016297: db $00
L016298: db $10
L016299: db $30
L01629A: db $F8
L01629B: db $10
L01629C: db $30
L01629D: db $00
L01629E: db $12
L01629F: db $20
L0162A0: db $F8
L0162A1: db $14
L0162A2: db $20
L0162A3: db $00
L0162A4: db $16
L0162A5: db $10
L0162A6: db $F8
L0162A7: db $14
L0162A8: db $10
L0162A9: db $00
L0162AA: db $16
L0162AB: db $00
L0162AC: db $F8
L0162AD: db $14
L0162AE: db $00
L0162AF: db $00
L0162B0: db $16
L0162B1: db $F0
L0162B2: db $F8
L0162B3: db $14
L0162B4: db $F0
L0162B5: db $00
L0162B6: db $16
L0162B7: db $E0
L0162B8: db $F8
L0162B9: db $14
L0162BA: db $E0
L0162BB: db $00
L0162BC: db $16
L0162BD: db $D0
L0162BE: db $F8
L0162BF: db $14
L0162C0: db $D0
L0162C1: db $00
L0162C2: db $16
L0162C3: db $C0
L0162C4: db $F8
L0162C5: db $14
L0162C6: db $C0
L0162C7: db $00
L0162C8: db $16
L0162C9: db $80
L0162CA: db $00
L0162CB: db $11
L0162CC: db $FF;X
L0162CD: db $FF;X
L0162CE: db $FF;X
L0162CF: db $DD
L0162D0: db $62
L0162D1: db $00
L0162D2: db $00
L0162D3: db $C0
L0162D4: db $00
L0162D5: db $11
L0162D6: db $FF;X
L0162D7: db $FF;X
L0162D8: db $FF;X
L0162D9: db $DD
L0162DA: db $62
L0162DB: db $00
L0162DC: db $00
L0162DD: db $03
L0162DE: db $25
L0162DF: db $F6
L0162E0: db $18
L0162E1: db $1F
L0162E2: db $FE
L0162E3: db $1A
L0162E4: db $2C
L0162E5: db $06
L0162E6: db $1C
L0162E7: db $80
L0162E8: db $00
L0162E9: db $11
L0162EA: db $FF;X
L0162EB: db $FF;X
L0162EC: db $FF;X
L0162ED: db $F1
L0162EE: db $62
L0162EF: db $00
L0162F0: db $00
L0162F1: db $03
L0162F2: db $28
L0162F3: db $F4
L0162F4: db $1E
L0162F5: db $28
L0162F6: db $FC
L0162F7: db $20
L0162F8: db $28
L0162F9: db $04
L0162FA: db $22
L0162FB: db $80
L0162FC: db $00
L0162FD: db $00
L0162FE: db $FF;X
L0162FF: db $FF;X
L016300: db $FF;X
L016301: db $0F
L016302: db $63
L016303: db $00
L016304: db $00
L016305: db $80
L016306: db $00
L016307: db $01
L016308: db $FF;X
L016309: db $FF;X
L01630A: db $FF;X
L01630B: db $0F
L01630C: db $63
L01630D: db $00
L01630E: db $00
L01630F: db $05
L016310: db $17
L016311: db $F4
L016312: db $02
L016313: db $1C
L016314: db $FC
L016315: db $04
L016316: db $2A
L016317: db $F4
L016318: db $06
L016319: db $2C
L01631A: db $FC
L01631B: db $08
L01631C: db $3C
L01631D: db $FC
L01631E: db $0A
L01631F: db $80
L016320: db $00
L016321: db $00
L016322: db $FF;X
L016323: db $FF;X
L016324: db $FF;X
L016325: db $33
L016326: db $63
L016327: db $00
L016328: db $00
L016329: db $80
L01632A: db $00
L01632B: db $01
L01632C: db $FF;X
L01632D: db $FF;X
L01632E: db $FF;X
L01632F: db $33
L016330: db $63
L016331: db $00
L016332: db $00
L016333: db $06
L016334: db $21
L016335: db $ED
L016336: db $0C
L016337: db $20
L016338: db $F5
L016339: db $0E
L01633A: db $20
L01633B: db $FD
L01633C: db $10
L01633D: db $1C
L01633E: db $05
L01633F: db $12
L016340: db $30
L016341: db $F6
L016342: db $14
L016343: db $30
L016344: db $FE
L016345: db $16
L016346: db $80
L016347: db $00
L016348: db $00
L016349: db $FF;X
L01634A: db $FF;X
L01634B: db $FF;X
L01634C: db $5A
L01634D: db $63
L01634E: db $00
L01634F: db $00
L016350: db $80
L016351: db $00
L016352: db $01
L016353: db $FF;X
L016354: db $FF;X
L016355: db $FF;X
L016356: db $5A
L016357: db $63
L016358: db $00
L016359: db $00
L01635A: db $05
L01635B: db $18
L01635C: db $F3
L01635D: db $18
L01635E: db $20
L01635F: db $FB
L016360: db $1A
L016361: db $20
L016362: db $03
L016363: db $1C
L016364: db $30
L016365: db $FB
L016366: db $1E
L016367: db $30
L016368: db $03
L016369: db $20

; This uses a placeholder OBJLstPtrTbl that's not pointing to a real OBJLstPtrTable.
; Those fields gets properly set when "spawning" a projectile. (MoveC_*)
OBJInfoInit_Projectile:
	db $00 ; iOBJInfo_Status
	db $00 ; iOBJInfo_OBJLstFlags
	db $00 ; iOBJInfo_OBJLstFlagsView
	db $60 ; iOBJInfo_X
	db $00 ; iOBJInfo_XSub
	db $88 ; iOBJInfo_Y
	db $00 ; iOBJInfo_YSub
	db $00 ; iOBJInfo_SpeedX
	db $00 ; iOBJInfo_SpeedXSub
	db $00 ; iOBJInfo_SpeedY
	db $00 ; iOBJInfo_SpeedYSub
	db $00 ; iOBJInfo_RelX (auto)
	db $00 ; iOBJInfo_RelY (auto)
	db $80 ; iOBJInfo_TileIDBase
	db LOW($8800) ; iOBJInfo_VRAMPtr_Low
	db HIGH($8800) ; iOBJInfo_VRAMPtr_High
	db BANK(L0958D7) ; iOBJInfo_BankNum (BANK $09)
	db LOW(L0958D7) ; iOBJInfo_OBJLstPtrTbl_Low
	db HIGH(L0958D7) ; iOBJInfo_OBJLstPtrTbl_High
	db $00 ; iOBJInfo_OBJLstPtrTblOffset
	db $00 ; iOBJInfo_BankNum [N/A]
	db $00 ; iOBJInfo_OBJLstPtrTbl_Low
	db $00 ; iOBJInfo_OBJLstPtrTbl_High
	db $00 ; iOBJInfo_OBJLstPtrTblOffset
	db $00 ; iOBJInfo_ColiBoxId (auto)
	db $00 ; iOBJInfo_HitboxId (auto)
	db $00 ; iOBJInfo_ForceHitboxId
	db $00 ; iOBJInfo_FrameLeft
	db $00 ; iOBJInfo_FrameTotal
	db $00 ; iOBJInfo_BufInfoPtr_Low
	db $00 ; iOBJInfo_BufInfoPtr_High
	

; =============== Play_Main ===============
; The main gameplay loop.
; Should be executed alongside the two other tasks Play_Unk_DoPlMove_1P and Play_Unk_DoPlMove_2P.
Play_Main:
	ld   sp, $DD00
	; Set 60 seconds for subsecond timer
	ld   a, 60
	ld   [wRoundTimeSub], a
	ei
	; Here we go
.mainLoop:
	call Play_ChkEnd
	call Play_DoPlInput
	call Play_ChkPause
	call Play_DoHUD
	call Play_DoUnkChain
	call Play_DoPlColi
	call Play_WriteKeysToBuffer
	call Play_DoScrollPos
	call Play_ExecExOBJCode
	call Task_PassControlFar
	jp   .mainLoop
	
; =============== Play_DoPlInput ===============
; Handles input for both players during gameplay.
; Essentially does some processing to the hJoyKeys fields before
; copying them to the player struct.
Play_DoPlInput:
	; Increase play timer as long as we have input
	ld   hl, wPlayTimer
	inc  [hl]
	
	;
	; PLAYER 1
	;
.do1P:
	;
	; CPU inputs are handled separately.
	; This part handles only inputs read from the joypad (so, for human players).
	;
	ld   hl, wPlInfo_Pl1+iPlInfo_Flags0
	bit  PF0B_CPU, [hl]		; Is 1P CPU controlled?
	jp   nz, .cpu1P		; If so, skip ahead
	
	;
	; Copy over the raw joypad inputs to the player 1 struct
	;
	ldh  a, [hJoyKeys]
	ld   [wPlInfo_Pl1+iPlInfo_JoyKeys], a
	ldh  a, [hJoyNewKeys]
	ld   [wPlInfo_Pl1+iPlInfo_JoyNewKeys], a
	
	;--
	;
	; Generate a special version of iPlInfo_JoyNewKeys which keeps the directional keys bits,
	; and tells if the Punch (A) or Kick (B) buttons are for the light or heavy attacks.
	;
	; Effectively this removes the START and SELECT bits, but they aren't used for moves anyway
	; so who cares.
	;
	; The punch/kick is treated as heavy if the button is pressed, then held for 6 frames.
	; If it's released before 6 frames, it instead counts as a light.
	;
	
	; The lower nybble with directional keys is identical to what's in iPlInfo_JoyNewKeys.
	and  a, $0F
	ld   [wPlInfo_Pl1+iPlInfo_JoyNewKeysLH], a
	
	;
	; A Button - Check light/heavy counter for punches
	;
.aBufChk1P:

	; If we've started counting held frames already, jump
	ld   a, [wPlInfo_Pl1+iPlInfo_JoyHeavyCountA]
	or   a					; iPlInfo_JoyHeavyCountA != 0?
	jp   nz, .aBufNext1P	; If so, jump
	
	; Otherwise, check for having started to press A.
	; This prevents starting another punch if we were still holding A continuously.
	ldh  a, [hJoyNewKeys]
	bit  KEYB_A, a			; Pressed A just now?
	jp   z, .bBufChk1P		; If not, don't do anything
.aBufNext1P:
	; If we released A, reset the counter and set the LIGHT bit
	ldh  a, [hJoyKeys]
	bit  KEYB_A, a			; Holding A?
	jp   z, .aLight1P		; If not, jump
	
	; Otherwise, increase the held key timer.
	ld   hl, wPlInfo_Pl1+iPlInfo_JoyHeavyCountA
	inc  [hl]
	
	; If we held it for less than 6 frames, don't do anything
	ld   a, $06			
	cp   a, [hl]		; iPlInfo_JoyHeavyCountA < 6?
	jp   nc, .bBufChk1P	; If so, jump
	
.aHeavy1P:
	; Set the heavy attack on A
	ld   hl, wPlInfo_Pl1+iPlInfo_JoyNewKeysLH
	res  KEPB_A_LIGHT, [hl]
	set  KEPB_A_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_JoyHeavyCountA], a
	jp   .bBufChk1P
.aLight1P:
	; Set the light attack on A
	ld   hl, wPlInfo_Pl1+iPlInfo_JoyNewKeysLH
	set  KEPB_A_LIGHT, [hl]
	res  KEPB_A_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_JoyHeavyCountA], a
	
.bBufChk1P:

	;
	; B Button - Check light/heavy counter for kicks.
	;

	; Check new/current
	ld   a, [wPlInfo_Pl1+iPlInfo_JoyHeavyCountB]
	or   a					
	jp   nz, .bBufNext1P
	
	ldh  a, [hJoyNewKeys]
	bit  KEYB_B, a
	jp   z, .endBufChk1P
.bBufNext1P:
	; Check if premature stop (LIGHT)
	ldh  a, [hJoyKeys]
	bit  KEYB_B, a
	jp   z, .bLight1P
	
	; Increase counter and check for 6 frames (HEAVY)
	ld   hl, wPlInfo_Pl1+iPlInfo_JoyHeavyCountB
	inc  [hl]
	
	ld   a, $06			
	cp   a, [hl]
	jp   nc, .endBufChk1P
.bHeavy1P:
	; Set HEAVY B press
	ld   hl, wPlInfo_Pl1+iPlInfo_JoyNewKeysLH
	res  KEPB_B_LIGHT, [hl]
	set  KEPB_B_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_JoyHeavyCountB], a
	jp   .endBufChk1P
.bLight1P:
	; Set LIGHT B press
	ld   hl, wPlInfo_Pl1+iPlInfo_JoyNewKeysLH
	set  KEPB_B_LIGHT, [hl]
	res  KEPB_B_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_JoyHeavyCountB], a
	
.endBufChk1P:
	jp   .do2P
	
.cpu1P:
	; Handle CPU input
	ld   bc, wPlInfo_Pl1
	ld   de, wOBJInfo_Pl1
	call L0024E4
	
.do2P:

	;
	; PLAYER 2
	; Do the same.
	;
	
	ld   hl, wPlInfo_Pl2+iPlInfo_Flags0
	bit  PF0B_CPU, [hl]		; Is 2P CPU controlled?
	jp   nz, .cpu2P			; If so, skip ahead
	
	;
	; Copy over the raw joypad inputs to the player 1 struct
	;
	ldh  a, [hJoyKeys2]
	ld   [wPlInfo_Pl2+iPlInfo_JoyKeys], a
	ldh  a, [hJoyNewKeys2]
	ld   [wPlInfo_Pl2+iPlInfo_JoyNewKeys], a
	
	;--
	; The lower nybble with directional keys is identical to what's in iPlInfo_JoyNewKeys.
	and  a, $0F
	ld   [wPlInfo_Pl2+iPlInfo_JoyNewKeysLH], a
	
	;
	; A Button - Check light/heavy counter for punches
	;
.aBufChk2P:

	; If we've started counting held frames already, jump
	ld   a, [wPlInfo_Pl2+iPlInfo_JoyHeavyCountA]
	or   a					; iPlInfo_JoyHeavyCountA != 0?
	jp   nz, .aBufNext2P	; If so, jump
	
	; Otherwise, check for having started to press A.
	; This prevents starting another punch if we were still holding A continuously.
	ldh  a, [hJoyNewKeys2]
	bit  KEYB_A, a			; Pressed A just now?
	jp   z, .bBufChk2P		; If not, don't do anything
.aBufNext2P:
	; If we released A, reset the counter and set the LIGHT bit
	ldh  a, [hJoyKeys2]
	bit  KEYB_A, a			; Holding A?
	jp   z, .aLight2P		; If not, jump
	
	; Otherwise, increase the held key timer.
	ld   hl, wPlInfo_Pl2+iPlInfo_JoyHeavyCountA
	inc  [hl]
	
	; If we held it for less than 6 frames, don't do anything
	ld   a, $06			
	cp   a, [hl]		; iPlInfo_JoyHeavyCountA < 6?
	jp   nc, .bBufChk2P	; If so, jump
	
.aHeavy2P:
	; Set the heavy attack on A
	ld   hl, wPlInfo_Pl2+iPlInfo_JoyNewKeysLH
	res  KEPB_A_LIGHT, [hl]
	set  KEPB_A_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl2+iPlInfo_JoyHeavyCountA], a
	jp   .bBufChk2P
.aLight2P:
	; Set the light attack on A
	ld   hl, wPlInfo_Pl2+iPlInfo_JoyNewKeysLH
	set  KEPB_A_LIGHT, [hl]
	res  KEPB_A_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl2+iPlInfo_JoyHeavyCountA], a
	
.bBufChk2P:

	;
	; B Button - Check light/heavy counter for kicks.
	;

	; Check new/current
	ld   a, [wPlInfo_Pl2+iPlInfo_JoyHeavyCountB]
	or   a					
	jp   nz, .bBufNext2P
	
	ldh  a, [hJoyNewKeys2]
	bit  KEYB_B, a
	jp   z, .endBufChk2P
.bBufNext2P:
	; Check if premature stop (LIGHT)
	ldh  a, [hJoyKeys2]
	bit  KEYB_B, a
	jp   z, .bLight2P
	
	; Increase counter and check for 6 frames (HEAVY)
	ld   hl, wPlInfo_Pl2+iPlInfo_JoyHeavyCountB
	inc  [hl]
	
	ld   a, $06			
	cp   a, [hl]
	jp   nc, .endBufChk2P
.bHeavy2P:
	; Set HEAVY B press
	ld   hl, wPlInfo_Pl2+iPlInfo_JoyNewKeysLH
	res  KEPB_B_LIGHT, [hl]
	set  KEPB_B_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl2+iPlInfo_JoyHeavyCountB], a
	jp   .endBufChk2P
.bLight2P:
	; Set LIGHT B press
	ld   hl, wPlInfo_Pl2+iPlInfo_JoyNewKeysLH
	set  KEPB_B_LIGHT, [hl]
	res  KEPB_B_HEAVY, [hl]
	xor  a
	ld   [wPlInfo_Pl2+iPlInfo_JoyHeavyCountB], a
.endBufChk2P:
	jp   .end
	
.cpu2P:
	; Handle CPU input
	ld   bc, wPlInfo_Pl2
	ld   de, wOBJInfo_Pl2
	call L0024E4
.end:
	ret
	
; =============== Play_ChkPause ===============
; Handles pausing during gameplay.
;
; Any player can pause the game.
; However, only the player that paused the game can unpause it,
; as there are separate main loops for each player.
Play_ChkPause:

	; When pressing START, enter the paused state.
	ldh  a, [hJoyNewKeys]
	and  a, KEY_START		; Did 1P press START?
	jp   z, .chk2P			; If not, skip
	
	;
	; As long as the game is paused, this main loop takes exclusive control.
	;
	ld   hl, wPauseFlags
	set  PFB_1P, [hl]		; Set pause flag
	call Play_Pause
.mainLoop1P:
	ldh  a, [hJoyNewKeys]
	bit  KEYB_START, a		; Pressed START?
	jp   nz, .unpause1P		; If so, unpause the game
	bit  KEYB_SELECT, a		; Pressed SELECT?
	jp   nz, .frameAdv1P	; If so, frame advance
	; Skip other tasks to freeze players and pause the music
	call Task_SkipAllAndWaitVBlank
	jp   .mainLoop1P
.frameAdv1P:
	call Play_FrameAdv
	jp   .mainLoop1P
.unpause1P:
	call Play_Unpause
	ld   hl, wPauseFlags
	res  PFB_1P, [hl]		; Unset pause flag
	ret
	
.chk2P:
	ldh  a, [hJoyNewKeys2]
	and  a, KEY_START		; Did 2P press START?
	jp   z, .ret			; If not, return
	;
	; As long as the game is paused, this main loop takes exclusive control.
	;
	ld   hl, wPauseFlags
	set  PFB_2P, [hl]		; Set pause flag
	call Play_Pause
.mainLoop2P:
	ldh  a, [hJoyNewKeys2]
	bit  KEYB_START, a		; Pressed START?
	jp   nz, .unpause2P		; If so, unpause the game
	bit  KEYB_SELECT, a		; Pressed SELECT?
	jp   nz, .frameAdv2P	; If so, frame advance
	; Skip other tasks to freeze players and pause the music
	call Task_SkipAllAndWaitVBlank
	jp   .mainLoop2P
.frameAdv2P:
	call Play_FrameAdv
	jp   .mainLoop2P
.unpause2P:
	call Play_Unpause
	ld   hl, wPauseFlags
	res  PFB_2P, [hl]		; Unset pause flag
	ret
.ret:
	ret
; =============== Play_Pause ===============
; Pauses the game.
Play_Pause:
	; Stop player animations
	ld   a, $01
	ld   [wNoCopyGFXBuf], a
	
	; Pause the music playback
	ld   a, SNC_PAUSE
	call HomeCall_Sound_ReqPlayExId
	
	; Draw "PAUSE" on the HUD.
	; This gets drawn to the side of the player that paused the game.
	ld   a, [wPauseFlags]
	bit  PFB_1P, a		; Did 1P pause the game?
	jp   z, .bg2P		; If not, jump
.bg1P:
	ld   hl, $9C46		; HL = Tilemap ptr for 1P side
	jp   .drawBG
.bg2P:
	ld   hl, $9C4B		; HL = Tilemap ptr for 2P side
.drawBG:
	; This uses tile IDs $F9-$FB.
	ld   b, $03			; B = Number of tiles
	ld   a, $F9			; A = Initial tile ID
.loop:
	push af
	di
	mWaitForVBlankOrHBlank
	pop  af
	ldi  [hl], a		; Write tile ID, VRAMPtr++
	ei
	inc  a				; TileID++
	dec  b				; Drawn all tiles?
	jp   nz, .loop		; If not, loop
	
	call Task_PassControlFar
	ret
	
; =============== Play_Unpause ===============
; Unpauses the game.
Play_Unpause:
	; Resume player animations
	xor  a
	ld   [wNoCopyGFXBuf], a
	
	; Unpause music playback
	ld   a, SNC_UNPAUSE
	call HomeCall_Sound_ReqPlayExId
	
	; Blank out "PAUSE" from the HUD
	ld   a, [wPauseFlags]
	bit  PFB_1P, a		; Did 1P pause the game?
	jp   z, .bg2P		; If not, jump
.bg1P:
	ld   hl, $9C46		; HL = Tilemap ptr for 1P side
	jp   .drawBG
.bg2P:
	ld   hl, $9C4B		; HL = Tilemap ptr for 2P side
.drawBG:
	; Fill with blank ($00) tiles
	ld   b, $03			; B = Number of tiles
.loop:
	di
	mWaitForVBlankOrHBlank
	xor  a				
	ldi  [hl], a		; Write blank tile, VRAMPtr++
	ei
	dec  b				; Drawn all tiles?
	jp   nz, .loop		; If not, loop
	ret
	
; =============== Play_Unpause ===============
; Advances the game by a single frame.
Play_FrameAdv:
	; This unpauses the game, and executes gameplay code for a frame.
	; After it's done, the game is repaused.
	xor  a					; Enable player animations
	ld   [wNoCopyGFXBuf], a
	ld   a, [wPauseFlags]	; Save pause info
	push af
	xor  a					; Unpause the game
	ld   [wPauseFlags], a
	; Execute gameplay routines
	call Play_DoPlInput
	call Play_DoHUD
	call Play_DoUnkChain
	call Play_DoPlColi
	call Play_WriteKeysToBuffer
	call Play_DoScrollPos
	call Play_ExecExOBJCode
	call Task_PassControlFar
	pop  af					; Repause the game
	ld   [wPauseFlags], a
	ld   a, $01				; Pause player animations
	ld   [wNoCopyGFXBuf], a
	ret
	
; =============== Play_DoUnkChain ===============
; Miscelanneous chain of checks related to gameplay / moves.
Play_DoUnkChain:
	
	;
	; PLAYFIELD FLASHING
	;
	;
	; This is triggered by writing $00 to wStageBGP (though any value that isn't $FF or $1B would work too).
	; When we get here, that value causes the playfield palette to be set to $FF (all black).
	; The effect only lasts for a single frame, as getting here with $FF restores the original palette.
	;
	
	; If the palette is normal, ignore this and continue using the normal palette
	ld   a, [wStageBGP]
	cp   $1B			; wStageBGP == normal?
	jp   z, .useNormPal	; If so, jump
	
	; If the palette is currently black (as set by .setFlash last frame), restore the normal palette
	ld   hl, wStageBGP
	cp   $FF			; wStageBGP == flashing?
	jp   z, .setNorm	; If so, jump
	
.setFlash:
	; Otherwise, wStageBGP is set to $00.
	; Set the playfield palette as completely black.
	ld   [hl], $FF
	jp   .useCustomPal
.setNorm:
	ld   [hl], $1B
	jp   .useCustomPal
	
.useNormPal:
	ld   a, $1B
.useCustomPal:
	ldh  [hScreenSect1BGP], a
	; Fall-through
	
;
; OBJ FLASHING
;

; =============== mFlashPlPal ===============
; Generates code to handle the palette flashing/cycling effects for sprites.
; This is a palette cycle effect based off wPlayTimer, and incrementing internal counter.
; wPlayTimer is used as we want the effect to pause while the game is paused.
; There are 4 different ways the palette is cycled:
; - Set A - No Special
; - Set A - Super Move
; - Set B - Slow Speed
; - Set B - Max Speed
; The two sets differ in the actual palettes used, with A being used for ????
;
; IN
; - 1: Ptr to wPlInfo struct
; - 2: Ptr to target palette
; - 3: Normal palette
; - 4: Set A, Id 0 color
; - 5: Set A, Id 1 color
; - 6: Set A, Id 2 color
; - 7: Set A, Id 3 color
; - 8: Set B, Id 0 color
; - 9: Set B, Id 1 color
; - 10: Set B, Id 2 color
; - 11: Set B, Id 3 color
mFlashPlPal: MACRO
	; If any of these bits is set, it uses an alternate palette cycle (Set B)
	ld   a, [\1+iPlInfo_Flags3]
	bit  PF3B_FLASH_B_SLOW, a	; bit1 set?	
	jp   nz, .flashSlowB		; If so, jump
	bit  PF3B_FLASH_B_FAST, a	; bit6 set?	
	jp   nz, .flashMaxB			; If so, jump
	
	;
	; OBJ FLASHING (Set A) - NO SPECIAL / INCREMENTING SPEED MODE
	; 
	; This makes use of an additional field, iPlInfo_NoSpecialTimer.
	; This is a countdown timer set by one of Chizuru's super moves
	; that restricts the other player to normals until it elapses.
	;
	; To visually indicate how much time is left, the lower the timer is,
	; the faster the palette flashes.
	;
	
	; Skip if it isn't set
	ld   a, [\1+iPlInfo_NoSpecialTimer]
	or   a					; FlashTimer == 0?
	jp   z, .flashSuperA	; If so, jump
	
.flashDecA:
	; Decrement iPlInfo_NoSpecialTimer every 2 frames
	ld   hl, wPlayTimer
	ld   b, [hl]			; B = wPlayTimer
	bit  0, b				; wPlayTimer % 2 != 0?
	jp   nz, .chkSpeedRange	; If so, skip
	dec  a					; Otherwise, iPlInfo_NoSpecialTimer--
	ld   [\1+iPlInfo_NoSpecialTimer], a
	
.chkSpeedRange:
	;
	; Determine the palette cycle speed.
	; These are triggered by iPlInfo_NoSpecialTimer reaching certain ranges.
	;
	; The higher the value is, more wPlayTimer gets divided by 2, slowing
	; down the speed, with the topmost range using an outright fixed palette (ID 3).
	;
	cp   $0A		; iPlInfo_NoSpecialTimer < $0A?
	jp   c, .speed4	; If so, A = wPlayTimer
	cp   $78		; iPlInfo_NoSpecialTimer < $78?
	jp   c, .speed3	; If so, A = wPlayTimer / 2
	cp   $B4		; iPlInfo_NoSpecialTimer < $BA?
	jp   c, .speed2	; If so, A = wPlayTimer / 4
	cp   $F0		; iPlInfo_NoSpecialTimer < $F0?
	jp   c, .speed1	; If so, A = wPlayTimer / 8
.speed0:			; Otherwise, iPlInfo_NoSpecialTimer >= $F0
	ld   a, $03		; A = 3 (fixed palette)
	jp   .filter		
.speed1:
	srl  b
.speed2:
	srl  b
.speed3:
	srl  b
.speed4:
	ld   a, b
.filter:
	and  a, $03		; Filter in range 0-3
	jp   .flashA
	
.flashSlowB:
	;
	; OBJ FLASHING (Set B) - SLOW SPEED
	; 
	
	; PalId = ((wPlayTimer & $0F) / 4) % 4
	ld   a, [wPlayTimer]
	and  a, $0F
	srl  a
	srl  a
	jp   .flashB
	
.flashMaxB:
	;
	; OBJ FLASHING (Set B) - MAX SPEED
	; Like .flashSuperA, except for a different palette and different bit (checked before).
	; 
	; PalId = wPlayTimer % 4
	;
	ld   a, [wPlayTimer]
	and  a, $03
.flashB:
	; Palette cycle B.
	; Pick the palette by ID
	cp   $01			; PalId == 1?
	jp   z, .flashB1	; If so, jump
	cp   $02			; ...
	jp   z, .flashB2
	cp   $03
	jp   z, .flashB3
.flashB0:				; Otherwise, PalId == 0
	ld   a, \<8>
	jp   .setPalB
.flashB1:
	ld   a, \<9>
	jp   .setPalB
.flashB2:
	ld   a, \<10>
	jp   .setPalB
.flashB3:
	ld   a, \<11>
.setPalB:
	ldh  [\2], a
	jp   .endFlash
.flashSuperA:
	;
	; OBJ FLASHING (Set A) - SUPER MOVE
	;
	; The player flashes at max speed for the duration of the super move.
	;
	; PalId = wPlayTimer % 4
	; 
	ld   a, [\1+iPlInfo_Flags0]
	bit  PF0B_SUPERMOVE, a		; Is the super move bit set?
	jp   z, .useNormPal			; If not, force the normal palette
	ld   a, [wPlayTimer]
	and  a, $03
.flashA:
	; Palette cycle A
	; Pick the palette by ID
	cp   $01			; PalId == 1?
	jp   z, .flashA1	; If so, jump
	cp   $02			; ...
	jp   z, .flashA2
	cp   $03
	jp   z, .flashA3
.flashA0:				; Otherwise, PalId == 0
	ld   a, \4
	jp   .setPalA
.flashA1:
	ld   a, \5
	jp   .setPalA
.flashA2:
	ld   a, \6
	jp   .setPalA
.flashA3:
	ld   a, \7
.setPalA:
	ldh  [\2], a
	jp   .endFlash
	
.useNormPal:
	; Use/restore normal 1P palette
	ld   a, \3
	ldh  [\2], a
.endFlash:
ENDM

;                                                      NORM | SET A          | SET B	
Play_DoUnkChain_FlashOBJ1P: mFlashPlPal wPlInfo_Pl1, rOBP0, $8C, $8C,$0C,$8C,$80, $4C,$D0,$34,$54
; Fall-through
Play_DoUnkChain_FlashOBJ2P: mFlashPlPal wPlInfo_Pl2, rOBP1, $4C, $4C,$0C,$4C,$40, $8C,$E0,$38,$A8
; Fall-through

	; ???
Play_DoUnkChain_CopyUnk:
	; Copy over value
	ld   a, [wPlayHitstopSet]
	ld   [wPlayHitstop], a
	
Play_DoUnkChain_ClearInputProcOnStop:	
	; If inputs aren't  processed, clear out the existing fields from both players
	ld   a, [wMisc_C027]
	bit  MISCB_PLAY_STOP, a
	jr   z, .end
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_JoyKeys], a
	ld   [wPlInfo_Pl1+iPlInfo_JoyNewKeysLH], a
	ld   [wPlInfo_Pl1+iPlInfo_JoyNewKeys], a
	ld   [wPlInfo_Pl2+iPlInfo_JoyKeys], a
	ld   [wPlInfo_Pl2+iPlInfo_JoyNewKeysLH], a
	ld   [wPlInfo_Pl2+iPlInfo_JoyNewKeys], a
.end:
	
Play_DoUnkChain_CalcDistance:
	call Play_CalcPlDistanceAndXFlip
	
Play_DoUnkChain_SetPlProjFlag:

	;
	; Update the player status flag marking if a projectile is visible & active on-screen.
	; This flag will be used as a shortcut to avoid checking two different fields every time
	;
	
	ld   hl, wPlInfo_Pl1+iPlInfo_Flags0
	res  PF0B_PROJ, [hl]		; Reset the flag to zero
	
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Status]
	and  a, OST_VISIBLE		; Is the projectile visible?
	jr   z, .do2P			; If not, skip
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_DamageVal]
	or   a					; Is there a penalty assigned to it (ie: it was thrown)?
	jr   z, .do2P			; If not, skip
	
	set  PF0B_PROJ, [hl] 	; Otherwise, don
	
.do2P:
	; Do the same for 2P
	ld   hl, wPlInfo_Pl2+iPlInfo_Flags0
	res  PF0B_PROJ, [hl]
	
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Status]
	and  a, OST_VISIBLE
	jr   z, .end
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_DamageVal]
	or   a
	jr   z, .end
	set  PF0B_PROJ, [hl]
.end:
	
Play_DoUnkChain_ShareVars:
	; Give visibility to some of the other player's variables.
	; This gives functions receiving the player struct known locations
	; to read data for the other player without having to do manual offset checks.
	
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags0]		; Copy 1P status...
	ld   [wPlInfo_Pl2+iPlInfo_Flags0Other], a	; ...to 2P player's struct
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags1]			; And so on
	ld   [wPlInfo_Pl2+iPlInfo_Flags1Other], a
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags2]
	ld   [wPlInfo_Pl2+iPlInfo_Flags2Other], a
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags3]
	ld   [wPlInfo_Pl2+iPlInfo_Flags3Other], a
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags0]
	ld   [wPlInfo_Pl1+iPlInfo_Flags0Other], a
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags1]
	ld   [wPlInfo_Pl1+iPlInfo_Flags1Other], a
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags2]
	ld   [wPlInfo_Pl1+iPlInfo_Flags2Other], a
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags3]
	ld   [wPlInfo_Pl1+iPlInfo_Flags3Other], a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_OBJLstFlags]
	ld   [wPlInfo_Pl2+iPlInfo_OBJInfoFlagsOther], a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_OBJLstFlags]
	ld   [wPlInfo_Pl1+iPlInfo_OBJInfoFlagsOther], a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]
	ld   [wPlInfo_Pl2+iPlInfo_OBJInfoXOther], a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   [wPlInfo_Pl1+iPlInfo_OBJInfoXOther], a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]
	ld   [wPlInfo_Pl2+iPlInfo_OBJInfoYOther], a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]
	ld   [wPlInfo_Pl1+iPlInfo_OBJInfoYOther], a
	ld   a, [wPlInfo_Pl1+iPlInfo_Pow]
	ld   [wPlInfo_Pl2+iPlInfo_PowOther], a
	ld   a, [wPlInfo_Pl2+iPlInfo_Pow]
	ld   [wPlInfo_Pl1+iPlInfo_PowOther], a
	ld   a, [wPlInfo_Pl1+iPlInfo_MoveId]
	ld   [wPlInfo_Pl2+iPlInfo_MoveIdOther], a
	ld   a, [wPlInfo_Pl2+iPlInfo_MoveId]
	ld   [wPlInfo_Pl1+iPlInfo_MoveIdOther], a
	ld   a, [wPlInfo_Pl1+iPlInfo_HitAnimId]
	ld   [wPlInfo_Pl2+iPlInfo_HitAnimIdOther], a
	ld   a, [wPlInfo_Pl2+iPlInfo_HitAnimId]
	ld   [wPlInfo_Pl1+iPlInfo_HitAnimIdOther], a
	
Play_DoUnkChain_ResetDamage:
	;
	; If we got hit *DIRECTLY* by the opponent the last frame (doesn't matter if we blocked it):
	; - Reset physical damage-related variables to prevent the move from causing continuous damage every frame
	; - Allow the opponent to combo off the hit.
	;
	; Note this isn't applicable to projectile hits, they are handled by the collision check code.
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_PhysHitRecv]
	or   a										; Did we get hit by the opponent?
	jr   z, .chkHit2P							; If not, skip
	xor  a
	ld   [wPlInfo_Pl2+iPlInfo_MoveDamageVal], a	; Prevent the move from dealing further damage
	ld   [wPlInfo_Pl1+iPlInfo_PhysHitRecv], a	; Unmark damage received flag
	ld   hl, wPlInfo_Pl2+iPlInfo_Flags1
	set  PF1B_ALLOWHITCANCEL, [hl] 			; Allow the opponent to start a new special off the hit
	inc  hl
	res  PF2B_HITCOMBO, [hl]					; Unmark the combo flag for the next time we hit cancel
	
.chkHit2P:
	; Same for the 2P side
	ld   a, [wPlInfo_Pl2+iPlInfo_PhysHitRecv]
	or   a					; Did we get hit by the opponent?
	jr   z, .copyDamageVars	; If not, skip
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_MoveDamageVal], a
	ld   [wPlInfo_Pl2+iPlInfo_PhysHitRecv], a
	ld   hl, wPlInfo_Pl1+iPlInfo_Flags1
	set  PF1B_ALLOWHITCANCEL, [hl]
	inc  hl
	res  PF2B_HITCOMBO, [hl]
	
.copyDamageVars:
	; Give visibility to the player-to-player push request
	ld   a, [wPlInfo_Pl1+iPlInfo_PushSpeedHReq]
	ld   [wPlInfo_Pl2+iPlInfo_PushSpeedHRecv], a
	ld   a, [wPlInfo_Pl2+iPlInfo_PushSpeedHReq]
	ld   [wPlInfo_Pl1+iPlInfo_PushSpeedHRecv], a
	
	; Give visibility to the move damage fields, which get copied over in the VBlank GFX Buffer handler.
	ld   hl, wPlInfo_Pl1+iPlInfo_MoveDamageVal
	ld   bc, wPlInfo_Pl2+iPlInfo_MoveDamageValOther
	call Play_CopyHLtoBC_3
	ld   hl, wPlInfo_Pl1+iPlInfo_MoveDamageValNext
	ld   bc, wPlInfo_Pl2+iPlInfo_MoveDamageValNextOther
	call Play_CopyHLtoBC_3
	ld   hl, wPlInfo_Pl2+iPlInfo_MoveDamageVal
	ld   bc, wPlInfo_Pl1+iPlInfo_MoveDamageValOther
	call Play_CopyHLtoBC_3
	ld   hl, wPlInfo_Pl2+iPlInfo_MoveDamageValNext
	ld   bc, wPlInfo_Pl1+iPlInfo_MoveDamageValNextOther
	call Play_CopyHLtoBC_3
	
; =============== mDecMaxPow ===============
; Generates code to automatically decrement the Max Power meter over time.
; IN
; - 1: Ptr to player struct
mDecMaxPow: MACRO
	; Pass the gauntlet of checks before checking if the bar should be decremented.
	ld   a, [\1+iPlInfo_Pow]
	
	; If our POW Meter got zeroed out, immediately disable MAX Power mode.
	; This is because elsewhere, the points where MAX Mode is set to end
	; only zero out iPlInfo_Pow but not the others.
	cp   $00			; iPlInfo_Pow == 0?
	jp   z, .powEmpty	; If so, jump
	; The bar must be full, otherwise this can't be MAX Power mode.
	cp   PLAY_POW_MAX	; Is the POW bar full?
	jp   nz, .end		; If not, skip
	; If there's still something in the MAX Power meter or the dec speed isn't 0,
	; decrement it slowly. Otherwise, empty it out completely.
	ld   a, [\1+iPlInfo_MaxPow]
	cp   $00			; Is the MAX Power mode enabled (!= 0)?
	jp   nz, .tryDec	; If so, jump
	; This check is weird. Why does it try decrementing even when iPlInfo_MaxPow is 0?
	ld   a, [\1+iPlInfo_MaxPowDecSpeed]
	cp   $00			; Is the decrementation speed set?
	jp   nz, .tryDec	; If so, jump
.powEmpty:
	; Empty the MAX Power meter
	xor  a
	ld   [\1+iPlInfo_Pow], a
	ld   [\1+iPlInfo_MaxPow], a
	ld   [\1+iPlInfo_MaxPowDecSpeed], a
	jp   .end
.tryDec:
	; Decrement the Max Power meter at the set speed.
	; The speed value is a bitmask, as the bar is only decremented when (wPlayTimer & iPlInfo_MaxPowDecSpeed) == 0
	; This results in the bar getting decremented at a slower rate when iPlInfo_MaxPowDecSpeed is higher.
	; Also, to have a constant decrementing speed, all set bits should be on the "right", ie:
	; %00000001
	; %00000011
	; %00000111
	; ...
	ld   a, [\1+iPlInfo_MaxPowDecSpeed]
	ld   b, a				; B = iPlInfo_MaxPowDecSpeed (mask)
	ld   a, [wPlayTimer]	; A = wPlayTimer (gameplay timer)
	and  a, b				; A & B != 0?
	jp   nz, .end			; If so, skip
	; Otherwise, decrement the bar
	; Once this reaches 0 and Play_UpdatePowBars decrements iPlInfo_MaxPowVisual to $00 too,
	; iPlInfo_Pow will be set to 0. This allows the jump to .powEmpty.
	ld   hl, \1+iPlInfo_MaxPow
	dec  [hl]
.end:
ENDM

Play_DoUnkChain_DecMaxPow1P: mDecMaxPow wPlInfo_Pl1
Play_DoUnkChain_DecMaxPow2P: mDecMaxPow wPlInfo_Pl2
	
; =============== mIncPlPow ===============
; Generates code to increment the normal POW meter if possible.
; This also handles the cheat for the meter autocharge.
; If that cheat is enabled, the meters increment automatically and increments/decrements slower.
;
; IN
; - 1: Ptr to player struct
mIncPlPow: MACRO
	; Don't increment if the meter is at max value already
	ld   a, [\1+iPlInfo_Pow]
	cp   PLAY_POW_MAX		; Pow meter at max value?
	jp   z, .end			; If so, skip
	
	; When charging meter, increment at 0.5px/frame
	ld   a, [\1+iPlInfo_MoveId]
	cp   MOVE_SHARED_CHARGEMETER	; In the charge move?
	jp   z, .chargeSpeed	; If so, jump
	
	; If meter charges up automatically, do it at a slower rate (0.1px/frame)
	ld   a, [wDipSwitch]
	bit  DIPB_AUTO_CHARGE, a	; Autocharge cheat enabled?
	jp   z, .end				; If not, jump 
.autoSpeed:
	ld   b, $0F		; B = Speed mask, slow (see also: mDecMaxPow)
	jp   .tryInc
.chargeSpeed:
	ld   b, $01		; B = Speed mask, fast
	jp   .tryInc
.tryInc:
	
	; Try to increment the pow meter
	ld   a, [wPlayTimer]
	and  a, b		; wPlayTimer & SpeedMask != 0?
	jp   nz, .end	; If so, skip
	; Otherwise, iPlInfo_Pow++
	ld   hl, \1+iPlInfo_Pow
	inc  [hl]
	
	; If we reached the max value for the power bar, set the Max Power decrement speed.
	ld   a, [hl]
	cp   PLAY_POW_MAX		; Max power reached?
	jp   nz, .end			; If not, skip
	; If meter charged up automatically, decrement the meter at a slower rate
	ld   hl, \1+iPlInfo_MaxPowDecSpeed
	ld   a, [wDipSwitch]
	bit  DIPB_AUTO_CHARGE, a	; Autocharge cheat enabled?
	jp   nz, .decSlow			; If not, jump
.decFast:
	ld   [hl], $1F				; Write speed to iPlInfo_MaxPowDecSpeed
	jp   .end
.decSlow:
	ld   [hl], $3F				; ...
.end:
ENDM
	
Play_DoUnkChain_IncPow1P: mIncPlPow wPlInfo_Pl1
Play_DoUnkChain_IncPow2P: mIncPlPow wPlInfo_Pl2


; =============== mDecPlPow ===============
; Generates code to decrement the normal POW meter when the other player is taunting.
; IN
; - 1: Ptr to player struct
; - 2: Ptr to other player struct
mDecPlPow: MACRO
	; Only applicable if we're not at Max Power and there's something in the bar
	ld   a, [\1+iPlInfo_Pow]
	cp   PLAY_POW_MAX	; Is the current player at max power?
	jp   z, .end		; If so, skip
	cp   $00			; Is the current player's power bar empty?
	jp   z, .end		; If so, skip
	
	; If the other player is taunting, decrease the meter at 0.25px/frame
	ld   a, [\2+iPlInfo_MoveId]
	cp   MOVE_SHARED_TAUNT	; Is the other player taunting?
	jp   nz, .end			; If not, skip
	ld   a, [wPlayTimer]
	and  a, $03				; wPlayTimer % 4 != 0?
	jp   nz, .end			; If so, skip
.doDec:
	ld   hl, \1+iPlInfo_Pow	; Otherwise, Pow--
	dec  [hl]
.end:
ENDM

Play_DoUnkChain_DecPowOnTaunt1P: mDecPlPow wPlInfo_Pl1, wPlInfo_Pl2
Play_DoUnkChain_DecPowOnTaunt2P: mDecPlPow wPlInfo_Pl2, wPlInfo_Pl1
	
;
; Increment the stun timers over time, until they reach the cap.
;
; As these timers are decremented when the player is hit/blocks a hit and the effect
; triggers when they reach 0, this results in requiring the player to hit the opponent
; multiple times in a short period of time to either dizzy or guard break
;
; See also: Play_Pl_DecStunTimer, which is executed by player tasks.
;
Play_DoUnkChain_IncDizzyTimer:
	; Every $10 frames, increment iPlInfo_DizzyProg
	ld   a, [wPlayTimer]
	and  a, $0F			
	jp   nz, .end
	ld   a, [wPlInfo_Pl1+iPlInfo_DizzyProgCap]
	ld   hl, wPlInfo_Pl1+iPlInfo_DizzyProg
	call Play_DoUnkChain_IncCustomTimer
	ld   a, [wPlInfo_Pl2+iPlInfo_DizzyProgCap]
	ld   hl, wPlInfo_Pl2+iPlInfo_DizzyProg
	call Play_DoUnkChain_IncCustomTimer
.end:	
Play_DoUnkChain_IncGuardBreakTimer:
	; Every $20 frames, increment iPlInfo_GuardBreakProg
	ld   a, [wPlayTimer]
	and  a, $1F
	jp   nz, .end
	ld   a, [wPlInfo_Pl1+iPlInfo_GuardBreakProgCap]
	ld   hl, wPlInfo_Pl1+iPlInfo_GuardBreakProg
	call Play_DoUnkChain_IncCustomTimer
	ld   a, [wPlInfo_Pl2+iPlInfo_GuardBreakProgCap]
	ld   hl, wPlInfo_Pl2+iPlInfo_GuardBreakProg
	call Play_DoUnkChain_IncCustomTimer
.end:;J
	jp   Play_DoUnkChain_DoMiscTimers
	
; =============== Play_DoUnkChain_IncCustomTimer ===============
; Increments a custom timer in the player struct until the target is reached.
; IN
; -  A: Timer target (iPlInfo_DizzyProgCap or iPlInfo_GuardBreakProgCap)
; - HL: Ptr to timer (iPlInfo_DizzyProg or iPlInfo_GuardBreakProg)
Play_DoUnkChain_IncCustomTimer:
	cp   a, [hl]		
	jp   z, .ret	; Target == Timer? If so, jump
	jp   nc, .inc	; Target >= Timer? If so, jump
	; [TCRF] Unreachable code.
	;        In case the timer went past the target, force it back to the max value.
	ld   [hl], a	; Copy Target to Timer
	jp   .ret
.inc:
	inc  [hl]		; Increment Timer
.ret:
	ret
	
Play_DoUnkChain_DoMiscTimers:
	; Decrement the wake up timer if it's not 0 already
	; iPlInfo_NoThrowTimer = MAX(iPlInfo_NoThrowTimer - 1, 0)
	ld   a, [wPlInfo_Pl1+iPlInfo_NoThrowTimer]
	or   a				; Timer == 0?
	jr   z, .chk2P		; If so, jump
	ld   hl, wPlInfo_Pl1+iPlInfo_NoThrowTimer
	dec  [hl]
.chk2P:
	; Do the same for 2P
	ld   a, [wPlInfo_Pl2+iPlInfo_NoThrowTimer]
	or   a
	jr   z, .end
	ld   hl, wPlInfo_Pl2+iPlInfo_NoThrowTimer
	dec  [hl]
.end:

Play_DoUnkChain_ShareVars2:
	; Give visibility to these variables too
	ld   a, [wPlInfo_Pl1+iPlInfo_NoThrowTimer]
	ld   [wPlInfo_Pl2+iPlInfo_NoThrowTimerOther], a
	ld   a, [wPlInfo_Pl2+iPlInfo_NoThrowTimer]
	ld   [wPlInfo_Pl1+iPlInfo_NoThrowTimerOther], a
	ld   a, [wPlInfo_Pl1+iPlInfo_5F]
	ld   [wPlInfo_Pl2+iPlInfo_5FOther], a
	ld   a, [wPlInfo_Pl2+iPlInfo_5F]
	ld   [wPlInfo_Pl1+iPlInfo_5FOther], a
	ret
	
; =============== Play_CopyHLtoBC_3 ===============
; Copies three bytes from HL to BC in sequence, used to copy sets of
; data across the two player structs. 
; IN
; - HL: Ptr to source (wPlInfo entry)
; - BC: Ptr to destination (wPlInfo entry for the other player)
Play_CopyHLtoBC_3:
	ldi  a, [hl]	; Read from current player
	ld   [bc], a	; Write to other player
	inc  bc			; ...
	ldi  a, [hl]
	ld   [bc], a
	inc  bc
	ld   a, [hl]
	ld   [bc], a
	ret
	
; =============== Play_CalcPlDistanceAndXFlip ===============
; Calculates the distance between players, and between player and projectile.
; This also sets additional properties related to distances.
Play_CalcPlDistanceAndXFlip:

	;
	; 1P CHAR - 2P CHAR DISTANCE
	;
	; These related flags which are related to each other are also updated:
	; - SPRB_XFLIP
	; - SPRXB_PLDIR_R
	;
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   b, a							; B = Player 2 X position
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]	; A = Player 1 X position
	sub  a, b				; A = Distance between players (1P - 2P)	
	jp   z, .setDistance	; Are they the same? If so, skip ahead
	jp   nc, .onRight		; Is 1P on the right of 2P? If so, jump (1P > 2P)
	; 
.onLeft:

	;
	; Player 1 is on the left of Player 2.
	;
	push af		; Save distance
	
	.onLeftChk1P:
		; The other player (2P) internally faces right
		ld   hl, wOBJInfo_Pl1+iOBJInfo_OBJLstFlags
		set  SPRXB_PLDIR_R, [hl]
		
		; Sometimes, the horizontal flip flag may get locked.
		; ie: when jumping over another player, we don't want to change direction
		ld   a, [wPlInfo_Pl1+iPlInfo_Flags1]
		bit  PF1B_XFLIPLOCK, a	; X Flip lock flag set?
		jp   nz, .onLeftChk2P	; If so, skip
		
		; Like the icons, character sprites face left by default.
		; Set the XFlip flag to make 1P face right.
		set  SPRB_XFLIP, [hl]
		
		;
		; Save the settings to iOBJInfo_OBJLstFlagsView as well, if possible.
		; This can be done only after the GFX finish loading (which also copies
		; iOBJInfo_OBJLstFlags to iOBJInfo_OBJLstFlagsView, but as we updated it just now, we resave it again)
		;
		ld   a, [wOBJInfo_Pl1+iOBJInfo_Status]
		bit  OSTB_GFXLOAD, a		; Are the GFX loading for this character?
		jp   nz, .onLeftChk2P		; If so, skip
		ld   a, [wPlInfo_Pl1+iPlInfo_MoveId]
		or   a						; Is there a move ID defined?
		jp   z, .onLeftChk2P		; If not, skip
		ldi  a, [hl]				; Read iOBJInfo_OBJLstFlags
		ld   [hl], a				; Write to iOBJInfo_OBJLstFlagsView
		
	.onLeftChk2P:
		; The other player (1P) internally faces left
		ld   hl, wOBJInfo_Pl2+iOBJInfo_OBJLstFlags
		res  SPRXB_PLDIR_R, [hl]
		
		; Don't make the character face left if the direction is locked
		ld   a, [wPlInfo_Pl2+iPlInfo_Flags1]
		bit  PF1B_XFLIPLOCK, a
		jr   nz, .onLeftChkEnd
		
		; Make 2P face left
		res  SPRB_XFLIP, [hl]
		
		; Save the settings to the visible set, if possible.
		ld   a, [wOBJInfo_Pl2+iOBJInfo_Status]
		bit  OSTB_GFXLOAD, a		; Are the GFX loading for this character?
		jp   nz, .onLeftChkEnd		; If so, skip
		ld   a, [wPlInfo_Pl2+iPlInfo_MoveId]
		or   a						; Is there a move ID defined?
		jp   z, .onLeftChkEnd		; If not, skip
		ldi  a, [hl]				; Read iOBJInfo_OBJLstFlags
		ld   [hl], a				; Write to iOBJInfo_OBJLstFlagsView
	.onLeftChkEnd:
	
	pop  af		; Restore distance
	
	; Since 1P is on the left of 2P, the 1P - 2P calculation returned a negative value.
	; iPlInfo_PlDistance must be a positive value, so:
	cpl			; A = -A
	inc  a
	jr   .setDistance
	
.onRight:
	;
	; Player 1 is on the right of Player 2.
	;
	push af
	
	.onRightChk1P:
		; The current player (2P) internally faces left
		ld   hl, wOBJInfo_Pl1+iOBJInfo_OBJLstFlags
		res  SPRXB_PLDIR_R, [hl]
		
		; Don't make the character face left if the direction is locked
		ld   a, [wPlInfo_Pl1+iPlInfo_Flags1]
		bit  PF1B_XFLIPLOCK, a		; X Flip lock flag set?
		jr   nz, .onRightChk2P		; If so, skip
		;--
		; ???
		bit  0, c
		jr   nz, .onRightChk2P
		;--
		; Make 1P face left
		res  SPRB_XFLIP, [hl]
		
		; Save the settings to the visible set, if possible.
		ld   a, [wOBJInfo_Pl1+iOBJInfo_Status]
		bit  OSTB_GFXLOAD, a		; Are the GFX loading for this character?
		jp   nz, .onRightChk2P		; If so, skip
		ld   a, [wPlInfo_Pl1+iPlInfo_MoveId]
		or   a						; Is there a move ID defined?
		jp   z, .onRightChk2P		; If not, skip
		ldi  a, [hl]				; Read iOBJInfo_OBJLstFlags
		ld   [hl], a				; Write to iOBJInfo_OBJLstFlagsView
	.onRightChk2P:
		; The other player (1P) internally faces right
		ld   hl, wOBJInfo_Pl2+iOBJInfo_OBJLstFlags
		set  SPRXB_PLDIR_R, [hl]
		
		; Don't make the character face right if the direction is locked
		ld   a, [wPlInfo_Pl2+iPlInfo_Flags1]
		bit  PF1B_XFLIPLOCK, a
		jr   nz, .onRightChkEnd
		;--
		; ???
		bit  0, c
		jr   nz, .onRightChkEnd
		;--
		; Make 2P face right
		set  SPRB_XFLIP, [hl]
		
		; Save the settings to the visible set, if possible.
		ld   a, [wOBJInfo_Pl2+iOBJInfo_Status]
		bit  OSTB_GFXLOAD, a		; Are the GFX loading for this character?
		jp   nz, .onRightChkEnd		; If so, skip
		ld   a, [wPlInfo_Pl2+iPlInfo_MoveId]
		or   a						; Is there a move ID defined?
		jp   z, .onRightChkEnd		; If not, skip
		ldi  a, [hl]				; Read iOBJInfo_OBJLstFlags
		ld   [hl], a				; Write to iOBJInfo_OBJLstFlagsView
	.onRightChkEnd:
	pop  af
	
.setDistance:
	; Save the calculated player distance
	ld   [wPlInfo_Pl1+iPlInfo_PlDistance], a
	ld   [wPlInfo_Pl2+iPlInfo_PlDistance], a
	;--

	;
	; 1P CHAR - 2P PROJECTILE DISTANCE
	;
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_X]
	ld   b, a							; B = 2P Projectile X
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a				; Is the projectile visible?
	jp   nz, .chkProjDir1P				; If so, jump
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]	; Otherwise, use 2P's X position
	ld   b, a
	
.chkProjDir1P:
	; By default, set that 2P's projectile is on the left of Player 1.
	ld   hl, wOBJInfo_Pl1+iOBJInfo_OBJLstFlags
	res  SPRXB_OTHERPROJR, [hl]
	
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]	; A = 1P X Position
	sub  a, b							; A = Distance between 1P Char - 2P Projectile
	jp   z, .setProjDistance1P			; Are they the same? If so, jump
	jp   nc, .setProjDistance1P			; Is 1P on the right of 2P's projectile? If so, jump (1P > 2P)
	; Otherwise, 2P's projectile is on the right of Player 1.
	; Set that flag and force the negative distance to positive.
	set  SPRXB_OTHERPROJR, [hl]
	cpl		; A = -A
	inc  a
.setProjDistance1P:
	ld   [wPlInfo_Pl1+iPlInfo_ProjDistance], a
	;--	
	
	;
	; 2P CHAR - 1P PROJECTILE DISTANCE
	;
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_X]
	ld   b, a							; B = 1P Projectile X
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a				; Is the projectile visible?
	jp   nz, .chkProjDir2P				; If so, jump
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]	; Otherwise, use 1P's X position
	ld   b, a
	
.chkProjDir2P:
	; By default, set that 1P's projectile is on the left of Player 2.
	ld   hl, wOBJInfo_Pl2+iOBJInfo_OBJLstFlags
	res  SPRXB_OTHERPROJR, [hl]
	
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]	; A = 2P X Position
	sub  a, b							; A = Distance between 2P Char - 1P Projectile
	jp   z, .setProjDistance2P			; Are they the same? If so, jump
	jp   nc, .setProjDistance2P			; Is 2P on the right of 1P's projectile? If so, jump (2P > 1P)
	; Otherwise, 1P's projectile is on the right of Player 1.
	; Set that flag and force the negative distance to positive.
	set  SPRXB_OTHERPROJR, [hl]
	cpl		; A = -A
	inc  a
.setProjDistance2P:
	ld   [wPlInfo_Pl2+iPlInfo_ProjDistance], a
	ret
	
; =============== Play_DoPlColi ===============
; Handles collision detection between players/projectile combinations.
; This subroutine sets up the flags/fields which tell if the player are overlapping
; with something and with what.
; How this is actually used is something that the hit code (Pl_DoHit) ??? decides.
Play_DoPlColi:
	; Start by clearing out the collision flags from the last frame
	xor  a
	ld   [wPlInfo_Pl1+iPlInfo_ColiFlags], a
	ld   [wPlInfo_Pl2+iPlInfo_ColiFlags], a
	ld   [wPlInfo_Pl1+iPlInfo_ColiBoxOverlapX], a
	ld   [wPlInfo_Pl2+iPlInfo_ColiBoxOverlapX], a
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a

	;
	; Handle collision detection between players.
	; This is a chain of subroutines which follow the same pattern.
	; When something is detected that would cause a player to not have collision,
	; the check is skipped, leaving blank the values in the collision flags for both players.
	;
	
Play_DoPlColi_1PChar2PChar:
	;
	; 1P Character Hurtbox - 2P Character Hurtbox
	; This is a bounds check against the generic collision box of both characters,
	; used for things like preventing two characters from overlapping.
	;


	; If any of the players has the "no hurtbox" flag get, skip this
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags2]
	bit  PF2B_NOCOLIBOX, a
	jp   nz, .end
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags2]
	bit  PF2B_NOCOLIBOX, a
	jp   nz, .end
	
	;
	; Get the variables for Player 1 used for the calculation.
	;
	
	; If Player 1 isn't using a collision box, skip this
	ld   a, [wOBJInfo_Pl1+iOBJInfo_ColiBoxId]
	or   a				; Collision box ID == 0?
	jr   z, .end		; If so, skip
	
	; Otherwise, get the variables for Player 1.
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox				; wPlayTmpColiA_* = 1P collision box sizes
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]	; B = 1P X position
	ld   b, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]	; C = 1P Y position
	ld   c, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_OBJLstFlagsView]	; wPlayTmpColiA_OBJLstFlags = 1P Flags
	ld   [wPlayTmpColiA_OBJLstFlags], a				; Not enough registers to hold this
	
	;
	; Get the variables for Player 2 used for the calculation.
	;
	
	; If Player 2 isn't using a collision box, skip this
	ld   a, [wOBJInfo_Pl2+iOBJInfo_ColiBoxId]
	or   a				; Collision box ID == 0?
	jr   z, .end		; If so, skip
	
	; Otherwise, get the variables for Player 2.
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox				; wPlayTmpColiB_* = 2P collision box sizes
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]	; D = 2P X position
	ld   d, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]	; E = 2P Y position
	ld   e, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a	; wPlayTmpColiA_OBJLstFlags = 1P Flags
	
	; 
	; Perform the collision checks between those boxes.
	;
	call Play_CheckColi	; Did a collision occur?
	jr   nc, .end		; If not, skip
	
.coliOk:
	; Make both players push each other, by having both
	; send and receive the outwards push.
	
	; This also saves the the amount of how much the collision boxes overlap horizontally.
	; How this is actually used depends on the move code. 
	; The various MoveC_* subroutines may optionally decide to call Play_Pl_MoveByColiBoxOverlapX
	; to push the player out based on it.
		
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_PUSHED, [hl]
	set  PCF_PUSHEDOTHER, [hl]
	inc  hl			; Seek to iPlInfo_ColiBoxOverlapX
	ld   [hl], b	; Save overlap amount
	
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_PUSHED, [hl]
	set  PCF_PUSHEDOTHER, [hl]
	inc  hl			
	ld   [hl], b
.end:

Play_DoPlColi_1PCharHitbox2PChar:
	;
	; 1P Character Hitbox - 2P Character Hurtbox
	; If the 1P Hitbox overlaps with the generic 2P collision box.
	;
	
	; Temporary hitboxes like the one for throw range can do collision
	; with moves that otherwise disable the hurtbox.
	; (this still would need to pass the guard check if it were a physical hit, but throws don't check that to begin with)
	ld   a, [wOBJInfo_Pl1+iOBJInfo_ForceHitboxId]
	or   a					; Is there a forced hitbox overriding the other two checks?
	jr   nz, .check			; If so, jump	
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags2]
	bit  PF2B_NOHURTBOX, a	; Can the other player be hit?
	jp   nz, .end			; If not, skip
	ld   a, [wOBJInfo_Pl1+iOBJInfo_HitboxId]
	or   a					; Is there an actual hitbox defined?
	jr   z, .end			; If not, skip
.check:
	;
	; Get 1P Hitbox data
	;
	; A = Hitbox ID
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	
	;
	; Get 2P Hurtbox data
	;
	ld   a, [wOBJInfo_Pl2+iOBJInfo_ColiBoxId]
	or   a
	jr   z, .end
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	
	;
	; Perform the collision check
	;
	call Play_CheckColi
	jr   nc, .end
.coliOk:
	; A common detail across these hit handlers is that when a player is hit, it receives knockback (PCF_PUSHED).
	; It's also mandatory when receiving physical damage, as both PCF_PUSHED and PCF_HIT must be set.
	
	; Signal that 1P has hit the other player.	
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_HITOTHER, [hl]
	set  PCF_PUSHEDOTHER, [hl]
	
	; Signal that 2P has received a hit and is being pushed out.
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_PUSHED, [hl]
	set  PCF_HIT, [hl]
.end:

Play_DoPlColi_1PChar2PCharHitbox:
	;
	; 2P Character Hitbox - 1P Character Hurtbox
	; Like the other one, but the other way around.
	;

	ld   a, [wOBJInfo_Pl2+iOBJInfo_ForceHitboxId]
	or   a					; Is there a forced hitbox overriding the other two checks?
	jr   nz, .check			; If so, jump	
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags2]
	bit  PF2B_NOHURTBOX, a	; Can the other player be hit?
	jp   nz, .end			; If not, skip
	ld   a, [wOBJInfo_Pl2+iOBJInfo_HitboxId]
	or   a					; Is there an actual hitbox defined?
	jr   z, .end			; If not, skip
.check:
	;
	; Get 2P Hitbox data
	;
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	
	;
	; Get 1P Hurtbox data
	;
	ld   a, [wOBJInfo_Pl1+iOBJInfo_ColiBoxId]
	or   a
	jr   z, .end
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	
	;
	; Perform the collision check
	;
	call Play_CheckColi
	jr   nc, .end
.coliOk:

	; Signal that 1P has received a hit
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_PUSHED, [hl]
	set  PCF_HIT, [hl]
	
	; Signal that 2P has hit the other player
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_HITOTHER, [hl]
	set  PCF_PUSHEDOTHER, [hl]
.end:

Play_DoPlColi_1PProj2PChar:
	;
	; 1P Projectile Hitbox - 2P Character Hurtbox
	;
	
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags1]
	bit  PF1B_INVULN, a	; Is the other player invulnerable?
	jp   nz, .end			; If so, skip
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags2]
	bit  PF2B_NOHURTBOX, a	; Can the other player be hit in general?
	jp   nz, .end			; If not, skip
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a	; Is the projectile visible?
	jp   z, .end			; If not, skip
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_HitboxId]
	or   a					; Does the projectile have an hitbox?
	jp   z, .end			; If not, skip
.check:

	;
	; Get 1P Projectile data
	;
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_OBJLstFlags]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	
	;
	; Get 2P Hurtbox data
	;
	ld   a, [wOBJInfo_Pl2+iOBJInfo_ColiBoxId]
	or   a
	jr   z, .end
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	
	;
	; Perform the collision check
	;
	call Play_CheckColi
	jr   nc, .end
.coliOk:
	; 1P projectile hit the other player, so remove it
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
	; 1P hit the other player with a projectile
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_PROJHITOTHER, [hl]
	set  PCF_PUSHEDOTHER, [hl]
	; 2P received a hit by a projectile
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_PUSHED, [hl]
	set  PCF_PROJHIT, [hl]
.end:

Play_DoPlColi_1PChar2PProj:
	;
	; 2P Projectile Hitbox - 1P Character Hurtbox
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags1]
	bit  PF1B_INVULN, a	; Is the other player invulnerable?
	jp   nz, .end			; If so, skip
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags2]
	bit  PF2B_NOHURTBOX, a	; Can the other player be hit in general?
	jp   nz, .end			; If not, skip
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a	; Is the projectile visible?
	jp   z, .end			; If not, skip
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_HitboxId]
	or   a					; Does the projectile have an hitbox?
	jp   z, .end			; If not, skip
.check:
	;
	; Get 2P Projectile data
	;
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_OBJLstFlags]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	
	;
	; Get 1P Hurtbox data
	;
	ld   a, [wOBJInfo_Pl1+iOBJInfo_ColiBoxId]
	or   a
	jr   z, .end
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	
	;
	; Perform the collision check
	;
	call Play_CheckColi
	jr   nc, .end
.coliOk:
	; 2P projectile hit the other player, so remove it
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a
	; 2P hit the other player with a projectile
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_PROJHITOTHER, [hl]
	set  PCF_PUSHEDOTHER, [hl]
	; 1P received a hit by a projectile
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_PUSHED, [hl]
	set  PCF_PROJHIT, [hl]
.end:

Play_DoPlColi_1PProj2PCharHitbox:
	;
	; 1P Projectile Hitbox - 2P Character Hitbox
	;
	; This is used when a move from 2P with an hitbox that can influence a projectile thrown by 1P.
	; 
	; Moves can set the player status bit PF0_PROJREM or PF0_PROJREFLECT, and this happens:
	; - PF0_PROJREM -> The projectile is deleted (as if it hit the target)
	; - PF0_PROJREFLECT -> The projectile is reflected
	;

	; If neiher of those bits is set, this collision check is skipped.
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags0]
	and  a, PF0_PROJREM|PF0_PROJREFLECT		; Is 2P currently able to reflect projectiles?
	jp   z, .end							; If not, skip
	
	; If there's no active projectile, skip
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a		; Is the projectile visible?
	jp   z, .end				; If not, skip
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_HitboxId]
	or   a						; Does the projectile have an hitbox?
	jp   z, .end				; If not, skip
.check:
	;
	; Get 1P Projectile data
	;
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_OBJLstFlags]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_HitboxId]
	or   a
	jr   z, .end
	
	;
	; Get 2P Hitbox data
	;
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl2+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	call Play_CheckColi
	jr   nc, .end
.coliOk:
	;
	; Determine what to do if the hitbox and projectile collide
	;
	
	; If 2P can reflect projectiles, do just that.
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags0]
	bit  PF0B_PROJREFLECT, a		; Is the flag set?
	jp   nz, .reflectProj		; If so, jump
	
	; If 2P is performing a super move that can remove projectiles (ie: Chizuru's),
	; any type of projectile can be erased, even from super moves.
	ld   a, [wPlInfo_Pl2+iPlInfo_Flags0]
	bit  PF0B_SUPERMOVE, a		; Flashing at max speed?
	jp   nz, .removeProj		; If so, jump
	
	; Otherwise, don't allow erasing projectiles with high priority.
	; (ie: 1P did one in his super)
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_Priority]
	or   a						; Does the projectile have high priority?
	jp   nz, .end				; If so, skip
.removeProj:
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
	jp   .setFlags
.reflectProj:
	ld   a, PHM_REFLECT
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
.setFlags:
	; Sets the flag for both players
	; [POI] Notice the reuse of PCF_HIT/PCF_HITOTHER, probably to fit this collision type into the 8 bit limit.
	;       ??? The combination of these two flags is what needs to be checked when handling the reflection.
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_PROJREMOTHER, [hl]
	set  PCF_HIT, [hl]
	
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_HITOTHER, [hl]
	set  PCF_PROJREM, [hl]
.end:

Play_DoPlColi_1PCharHitbox2PProj:
	;
	; 2P Projectile Hitbox - 1P Character Hitbox
	;
	; Same thing, but for the other player
	
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags0]
	and  a, PF0_PROJREM|PF0_PROJREFLECT
	jp   z, .end
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a
	jp   z, .end
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_HitboxId]
	or   a
	jr   z, .end
.check:
	;
	; Get 2P Projectile data
	;
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_OBJLstFlags]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_HitboxId]
	or   a
	jr   z, .end
	
	;
	; Get 1P Hitbox data
	;
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl1+iOBJInfo_OBJLstFlagsView]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	call Play_CheckColi
	jr   nc, .end
.coliOk:
	;
	; Determine what to do if the hitbox and projectile collide
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags0]
	bit  PF0B_PROJREFLECT, a
	jp   nz, .reflectProj
	ld   a, [wPlInfo_Pl1+iPlInfo_Flags0]
	bit  PF0B_SUPERMOVE, a
	jp   nz, .removeProj
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_Priority]
	or   a
	jp   nz, .end
.removeProj:
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a
	jp   .setFlags
.reflectProj:
	ld   a, PHM_REFLECT
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a
.setFlags:
	ld   hl, wPlInfo_Pl2+iPlInfo_ColiFlags
	set  PCF_PROJREMOTHER, [hl]
	set  PCF_HIT, [hl]
	ld   hl, wPlInfo_Pl1+iPlInfo_ColiFlags
	set  PCF_HITOTHER, [hl]
	set  PCF_PROJREM, [hl]
.end:

Play_DoPlColi_1PProj2PProj:
	;
	; 1P Projectile Hitbox - 2P Projectile Hitbox
	;
	; In general, they cancel each other out.
	
	; Both projectiles must be visible
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a
	jp   z, .end
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Status]
	bit  OSTB_VISIBLE, a
	jp   z, .end
.check:
	;
	; Get 1P Projectile data
	;
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_HitboxId]
	or   a
	jr   z, .end
	ld   de, wPlayTmpColiA
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_X]
	ld   b, a
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Y]
	ld   c, a
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_OBJLstFlags]
	ld   [wPlayTmpColiA_OBJLstFlags], a
	;
	; Get 2P Projectile data
	;
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_HitboxId]
	or   a
	jr   z, .end
	ld   de, wPlayTmpColiB
	call Play_GetPlColiBox
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_X]
	ld   d, a
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Y]
	ld   e, a
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_OBJLstFlags]
	ld   [wPlayTmpColiB_OBJLstFlags], a
	call Play_CheckColi
	jr   nc, .end
.coliOk:
	; Check projectile priority.
	; The one with higher priority value erases the other, or both cancel each
	; other out when they have same priority.
	; Note that, generally, super move projectiles have the higher priority.
	ld   a, [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_Priority]
	ld   b, a												; B = 2P Projectile Priority
	ld   a, [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_Priority]	; A = 1P Projectile Priority
	cp   b				
	jp   z, .remAllProj	; 1P == 2P? If so, jump
	jp   c, .remProj1P	; 1P < 2P? If so, jump
.remProj2P:
	; Otherwise, 1P > 2P.
	; 1P Projectile stays, 2P removed
	ld   a, PHM_NONE
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a
	jp   .end
.remProj1P:
	; 2P Projectile stays, 1P removed
	ld   a, PHM_NONE
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
	jp   .end
.remAllProj:
	; Both projectiles removed
	ld   a, PHM_REMOVE
	ld   [wOBJInfo_Pl1Projectile+iOBJInfo_Proj_HitMode], a
	ld   [wOBJInfo_Pl2Projectile+iOBJInfo_Proj_HitMode], a
.end:
	ret 
	
; =============== Play_GetPlColiBox ===============
; Gets the length of the collision boxes.
; This copies 4 bytes from the indexed Play_ColiBoxTbl entry to DE.
; IN
; - A: Collision box ID
; - DE: Ptr to destination
Play_GetPlColiBox:

	; Index the table with collision boxes (4 byte entries)
	; HL = A * 4
	ld   h, $00
	ld   l, a		; HL = A
	add  hl, hl		; HL * 2
	add  hl, hl		; HL * 2
	push de
		; Offset the table
		ld   de, Play_ColiBoxTbl
		add  hl, de
	pop  de
	
	; Read out the entries to DE
	ldi  a, [hl]	; byte0 - X Origin
	ld   [de], a
	inc  de
	ldi  a, [hl]	; byte1 - Y Origin
	ld   [de], a
	inc  de
	ldi  a, [hl]	; byte2 - H Radius
	ld   [de], a
	inc  de
	ld   a, [hl]	; byte3 - V Radius
	ld   [de], a
	ret
	
; =============== Play_CheckColi ===============
; Checks if the specified collision boxes overlap.
;
; Note that player sprites don't get V-flipped, so the only special checks are made against SPRB_XFLIP.
;
; IN:
; - B: 1P X position
; - C: 1P Y position
; - D: 2P X position
; - E: 2P Y position
; OUT
; - C flag: If set, the collision boxes overlap
; - B: X Box Overlapping (how much the collision boxes overlap horizontally)
; - C: Y Box Overlapping (...)
; - D: 1P Absolute X Box Origin
; - E: 1P Absolute Y Box Origin
Play_CheckColi:
	
	;--
	;
	; X BOUNDS CHECK
	;
	; In this one, we have to deal with the sprite being X flipped.
	; When a sprite is flipped, the collision box origin is flipped relative to the player's absolute X position.
	; (which, in practice, means A = -A)
	; ie: the negative value (left of origin) becomes positive (right of origin).
	;
	; Note that it won't change the box width at all, as it's a radius that always extends equally
	; to both the left and right sides of the box origin.
	;
	
	
	;##
	;
	; B = H = 1P Absolute H Origin
	; 
	; Convert the relative origin in wPlayTmpColiA_OriginH to absolute,
	; by adding the X player position to it.
	;
	
	; H = OBJLst flags (for the X flip flag)
	ld   a, [wPlayTmpColiA_OBJLstFlags]
	ld   h, a
	; A = Relative X Origin (accounting for X flip)
	ld   a, [wPlayTmpColiA_OriginH]
	bit  SPRB_XFLIP, h		; Is the player X flipped?
	jr   z, .setHOrigin1P	; If not, jump
	cpl						; Otherwise, A = -A
	inc  a
.setHOrigin1P:
	; Convert the relative origin to absolute.
	add  b					; AbsXOrg = RelXOrg + AbsPlX
	; Save the result to B and H
	ld   b, a ; Why save it to B?
	ld   h, a
	

.getHOrigin2P:
	;##
	;
	; A = 2P Absolute H Origin
	;
	
	; L = OBJLst flags (for the X flip flag)
	ld   a, [wPlayTmpColiB_OBJLstFlags]
	ld   l, a
	; A = Relative X origin (accounting for X flip)
	ld   a, [wPlayTmpColiB_OriginH]
	bit  SPRB_XFLIP, l
	jr   z, .setHOrigin2P
	cpl
	inc  a
.setHOrigin2P:
	; Convert the relative origin to absolute.
	add  a, d				; AbsXOrg = RelXOrg + AbsPlX
	
	
.getHDist:
	;##
	;
	; B = Distance between collision box origins.
	;     
	sub  a, b			; A = 2P - 1P
	jp   nc, .setHDist	; Is that >= 0 (2P to the right of 1P)? If so, jump
	cpl					; Otherwise, A = -A
	inc  a
.setHDist:
	ld   b, a

.getLimitH:
	;##
	;
	; Determine the range threshold (max distance for collision).
	;
	; As the widths are radiuses that extend to both sides equally, this is always the 
	; sum of the two players' horizontal widths, regardless of a player's position or X flip.
	;
	; A = wPlayTmpColiA_RadH + wPlayTmpColiB_RadH
	push bc
		;
		ld   a, [wPlayTmpColiA_RadH]	; B = 1P Box Width
		ld   b, a
		ld   a, [wPlayTmpColiB_RadH]	; A = 2P Box Width
		add  b							; Add those together
	pop  bc
	
.chkBoundsH:
	;##
	;
	; Perform the bounds check.
	; If the distance between box origins is larger than the threshold, the boxes aren't overlapping.
	; so we can return.
	;
	; Otherwise, save to B by how much they overlap
	sub  a, b			; A -= DistanceH
	jp   c, .retClear	; A < 0? If so, return
	ld   b, a			; Otherwise, save the result to B
	
	;---
	
.doV:

	;--
	;
	; Y BOUNDS CHECK
	;
	; This is essentially the same, except there's no Y flip here.
	;
	
	;
	; C = L = 1P Absolute V Origin
	;
	ld   a, [wPlayTmpColiA_OriginV]
	add  c
	ld   c, a	; Why save a copy here?
	ld   l, a
.getVOrigin2P:
	;##
	;
	; A = 2P Absolute V Origin
	;
	ld   a, [wPlayTmpColiB_OriginV]
	add  a, e
	
.getVDist:
	;##
	;
	; C = Distance between collision box origins.
	;   
	sub  a, c			; A = 2P - 1P
	jp   nc, .setVDist	; Is that >= 0 (2P to the right of 1P)? If so, jump
	cpl					; Otherwise, A = -A
	inc  a
.setVDist:
	ld   c, a
	
	;##
	;
	; Determine threshold
	;
	; A = wPlayTmpColiA_RadV + wPlayTmpColiB_RadV
	push bc
		ld   a, [wPlayTmpColiA_RadV]
		ld   b, a
		ld   a, [wPlayTmpColiB_RadV]
		add  b
	pop  bc
	
.chkBoundsV:
	;##
	;
	; Perform the bounds check.
	;
	
	; Distance must be positive
	sub  a, c						; A -= DistanceV
	jp   c, .retClear				; A < 0? If so, jump
	ld   c, a						; Otherwise, save the result to C
	
	; Move the 1P/2P distances to DE
	push hl
	pop  de
	
.retSet:
	scf			; Set carry
	ret
.retClear:
	or   a		; Clear carry
	ret
Play_ColiBoxTbl:
	; [TCRF?] The ones marked by ;X MAY be unused (needs further checks)
	db $00,$00,$00,$00 ; [POI] Dummy, unused
	db $00,$FC,$08,$10
	db $F7,$00,$0D,$09
	db $00,$00,$10,$10
	db $00,$00,$10,$12
	db $00,$00,$A0,$7F
	db $0D,$02,$10,$08;X
	db $00,$09,$08,$08
	db $FE,$F0,$12,$20
	db $00,$EE,$10,$20;X
	db $00,$00,$08,$08
	db $00,$00,$06,$12
	db $03,$00,$08,$1D
	db $00,$F0,$20,$20
	db $00,$C2,$28,$4F
	db $00,$10,$A0,$06
	db $00,$C2,$08,$6F
	db $00,$00,$0C,$0C
	db $0D,$00,$15,$1D
	db $00,$F4,$11,$1C
	db $EA,$FC,$08,$0E
	db $F2,$FC,$0E,$14
	db $F9,$F9,$19,$14
	db $00,$FC,$0B,$0B;X
	db $00,$F5,$12,$12;X
	db $00,$EE,$18,$18;X
	db $00,$0C,$0B,$0B
	db $00,$05,$12,$12;X
	db $00,$FE,$18,$18;X
	db $F5,$FB,$11,$09
	db $F5,$02,$13,$11
	db $EA,$FA,$0F,$0D
	db $F3,$FB,$0D,$0F
	db $F7,$F4,$0E,$0D
	db $00,$F9,$11,$18
	db $F3,$E3,$0C,$09
	db $EE,$07,$0E,$0A
	db $FD,$F8,$0D,$10
	db $F8,$F8,$0D,$0F
	db $FA,$FF,$0B,$0B
	db $FB,$FC,$0E,$14
	db $E0,$FC,$0B,$08
	db $DD,$FC,$0E,$08
	db $FA,$00,$12,$13
	db $E8,$FB,$0B,$10
	db $FB,$F4,$0D,$16
	db $ED,$F9,$0D,$10
	db $00,$04,$0C,$0C
	db $E8,$00,$0E,$09
	db $E8,$FE,$0A,$0B
	db $F5,$EE,$0C,$17
	db $EC,$00,$0D,$0D
	db $EB,$FA,$0D,$12
	db $FE,$FC,$14,$0E
	db $F6,$FA,$14,$0E
	db $F7,$02,$11,$0F
	db $F9,$FA,$12,$10
	db $FB,$09,$0D,$0B
	db $FE,$FC,$14,$13
	db $F4,$F7,$09,$09
	db $00,$FC,$10,$17
	db $F0,$FB,$0D,$16
	db $E8,$F8,$10,$18
	db $F5,$FE,$14,$0D
	db $F4,$FE,$13,$09
	db $F8,$00,$15,$09
	db $FE,$F5,$1A,$09
	db $EC,$FE,$13,$05
	db $EE,$00,$0D,$09
	db $F0,$FD,$13,$0D
	db $EF,$F8,$0D,$12
	db $ED,$05,$0D,$0C
	db $F3,$FC,$0D,$13
	db $F6,$FA,$0C,$13
	db $F0,$00,$0D,$09
	db $FA,$ED,$0D,$09
	db $F7,$09,$0D,$09
	db $F2,$09,$0D,$09
	db $F1,$05,$0D,$09
	db $F0,$F5,$0D,$09
	db $EE,$00,$0D,$09
	db $F3,$00,$0D,$09
	db $F5,$09,$0D,$09
	db $EE,$07,$0D,$09
	db $FF,$F5,$0D,$09
	db $FB,$00,$0D,$09
	db $F9,$09,$0D,$09
	db $F2,$00,$0D,$09
	db $EB,$00,$0D,$09
	db $F2,$F3,$0D,$09
	db $FD,$F1,$0D,$09
	db $EF,$09,$0D,$09
	db $FC,$00,$0D,$09
	db $F7,$F5,$0D,$09
	db $F4,$09,$0D,$09
	db $F4,$F6,$0D,$09
	db $FC,$FC,$0D,$09
	db $F3,$FD,$0D,$09
	db $F4,$F9,$0D,$09
	db $FD,$EB,$0D,$09
	db $F8,$09,$0D,$09
	db $EA,$09,$0D,$09
	db $ED,$FA,$0D,$09
	db $E7,$00,$0D,$09
	db $F4,$09,$0D,$09
	db $F2,$F8,$0D,$09
	db $ED,$09,$0D,$09
	db $FA,$09,$0D,$09
	db $FC,$09,$0D,$09
	db $FC,$F3,$0D,$09
	db $EF,$FC,$0D,$09
	db $F6,$F4,$0D,$09
	db $F8,$F5,$0D,$09
	db $FA,$00,$0D,$09
; =============== Play_ChkEnd ===============
; Series of checks that handle the triggers that can end a round.
Play_ChkEnd:
	;
	; Enable input processing as long as the round isn't over.
	; There are a few different triggers that cause the round to end,
	; which will be checked for now.
	;
	ld   hl, wMisc_C027			; Enable by default
	res  MISCB_PLAY_STOP, [hl]
	; Fall-through
	
; =============== Play_ChkEnd_TimeOver ===============
Play_ChkEnd_TimeOver:
	;
	; TIME OVER CHECK
	;
	ld   a, [wRoundTime]
	or   a							; wRoundTime != 0?
	jp   nz, Play_ChkEnd_Slowdown	; If so, jump
.timeOver:							; Otherwise...
	ld   hl, wMisc_C027				; Lock controls
	set  MISCB_PLAY_STOP, [hl]
	call Play_LoadPostRoundText0	; Prepare text set
	call Play_DoTimeOverText		; 
	jp   Play_ChkEnd_KO.chkWaitPost	; Continue to the standard post-round handler
	
; =============== Play_ChkEnd_Slowdown ===============
Play_ChkEnd_Slowdown:
	;
	; Handles slowdown effect.
	; As long as slowdown is active, this takes control as main gameplay loop.
	;
	; This is here because the game slows down for a moment when KO'ing an opponent,
	; through it's also used occasionally for other parts.
	;
	
	; Do the slowdown until wPlaySlowdownTimer elapses.
	ld   a, [wPlaySlowdownTimer]
	or   a						; wPlaySlowdownTimer == 0?
	jp   z, Play_ChkEnd_KO		; If so, skip
	; Otherwise, execute the slowdown
	dec  a						; wPlaySlowdownTimer--
	ld   [wPlaySlowdownTimer], a
	
	; Count down from wPlaySlowdownSpeed.
	; When it reaches 0, execute once a complete gameplay loop.
	ld   a, [wPlaySlowdownSpeed]	; A = TickLeft
.loop:
	or   a				; TickLeft == 0?
	jp   z, .execNorm	; If so, execute a normal gameplay loop
.execBlank:				; Otherwise, execute a simplified one that essentially doesn't process OBJInfo
	push af				; Save TickLeft				
		; Keep GFX buffer intact, as copying tiles to the buffer influences the animation timing.
		ld   a, $01					
		ld   [wNoCopyGFXBuf], a
		call Play_DoPlInput
		call Play_DoHUD
		call Play_DoUnkChain
		call Play_WriteKeysToBuffer
		; Calling this is the main key behind how the slowdown works.
		; This will skip processing the two other tasks, which are used
		; to handle player movement.
		call Task_SkipAllAndWaitVBlank
		xor  a
		ld   [wNoCopyGFXBuf], a
	pop  af				; Restore TickLeft
	dec  a				; TickLeft--
	jp   .loop			; Go check if we're done "waiting"
.execNorm:
	call Play_DoPlInput
	call Play_DoHUD
	call Play_DoUnkChain
	call Play_DoPlColi
	call Play_WriteKeysToBuffer
	call Play_DoScrollPos
	call Play_ExecExOBJCode
	call Task_PassControlFar
	jp   Play_ChkEnd_Slowdown
	
; =============== Play_ChkEnd_KO ===============
Play_ChkEnd_KO:
	;
	; KO CHECK
	;
	; If any player has no health, handle the KO display
	ld   a, [wPlInfo_Pl1+iPlInfo_Health]
	or   a				; 1P Health == 0?
	jr   z, .showKO		; If so, round's over
	ld   a, [wPlInfo_Pl2+iPlInfo_Health]
	or   a				; 2P Health == 0?
	jp   nz, Play_ChkEnd_Ret		; If not, return
.showKO:
	ld   hl, wMisc_C027
	set  MISCB_PLAY_STOP, [hl]
	call Play_LoadPostRoundText0
	call Play_DoKOText
	;--
	; [POI] Checking if the players were ready was already done in Play_LoadPostRoundText0.
	;       What's the point of checking this again? (note it's also an oddity in 95).
	;       Players can only be in the moves MOVE_SHARED_NONE or MOVE_SHARED_IDLE when we get here.
.chkWaitPost:
	; Execute main loop
	ld   b, $01
	call Play_MainLoop_PostRoundTextNoDisplay
.chkWaitPost1P:
	; Players must be either in the idle move (winner/draw) or have no move (lost).
	; This is to allow any currently executing move to finish.
	ld   a, [wPlInfo_Pl1+iPlInfo_MoveId]
	cp   MOVE_SHARED_NONE	; MoveId == 0?
	jr   z, .chkWaitPost2P	; If so, jump
	cp   MOVE_SHARED_IDLE	; MoveId == 2?
	jr   nz, .chkWaitPost	; If not, wait again
.chkWaitPost2P:
	ld   a, [wPlInfo_Pl2+iPlInfo_MoveId]
	cp   MOVE_SHARED_NONE	; MoveId == 0?
	jr   z, .chkEndType; If so, jump
	cp   MOVE_SHARED_IDLE	; MoveId == 2?
	jr   nz, .chkWaitPost	; If not, wait again
	;--
.chkEndType:
	;
	; Determine what kind of text to follow up the "KO" or "TIME OVER" with.
	; Decide depending on the player health.
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_Health]	; A = 1P Health
	ld   hl, wPlInfo_Pl2+iPlInfo_Health		; B = Ptr to 2P Health
	cp   a, [hl]		; Compare them
	jr   z, .draw		; Do they match? If so, it's a DRAW GAME
	jr   c, .won2P		; 1P < 2P? If so, 2P Won
	; Otherwise, 1P Won
.won1P:
	call Play_Set1PWin
	ld   bc, wPlInfo_Pl1
	ld   de, wPlInfo_Pl2
	call Play_SetWinLoseMoves
	jr   .showPostRoundText
.won2P:;R
	call Play_Set2PWin
	ld   bc, wPlInfo_Pl2
	ld   de, wPlInfo_Pl1
	call Play_SetWinLoseMoves
	jr   .showPostRoundText
.draw:
	call Play_SetDraw
	call Play_SetDrawMoves
	
.showPostRoundText:
	; Display the win/lose anim for a long time while the text is on-screen.
	; This is enough time for all win poses to finish, and still having a small delay when they end.
	ld   b, $F0
	call Play_MainLoop_PostRoundTextDisplay
	

	
Play_ChkEnd_ChkNewRound:
	;
	; Determines if a new round should start.
	;
	
	xor  a
	ld   [wStageDraw], a
	
	call IsInTeamMode	; Playing in team mode?
	jp   c, .team		; If so, jump
	
.single:
	;
	; SINGLE MODE
	; 
	
	; The final round uses its own set of rules.
	ld   a, [wRoundNum]
	cp   $03					; Is this the FINAL!! round? (round 4)
	jp   z, .chkFinalRoundRes	; If so, jump
	
	; If any player won two rounds in single mode, the stage is over.
	ld   a, [wPlInfo_Pl1+iPlInfo_SingleWinCount]
	cp   $02			; Did 1P win two rounds?
	jp   z, .win1P		; If so, jump
	ld   a, [wPlInfo_Pl2+iPlInfo_SingleWinCount]
	cp   $02			; Did 2P win two rounds?
	jp   z, .win2P		; If so, jump
	
	; Otherwise, start a new round.
	jp   .startNewRound
	
.team:
	;
	; TEAM MODE
	; 
	; The team with at least 3 losses or with no characters left loses.
	;
	
	; Check if the player with the largest amount of losses has iPlInfo_TeamLossCount >= $03.
	ld   a, [wPlInfo_Pl1+iPlInfo_TeamLossCount]	; A = 1P Loss count
	ld   hl, wPlInfo_Pl2+iPlInfo_TeamLossCount	; HL = Ptr to 2P Loss count
	cp   a, [hl]		
	jp   z, .teamLossEq		; Do they match? If so, jump
	jp   nc, .chkLossCnt1P	; 1P >= 2P? If so, jump
.chkLossCnt2P:				; Otherwise 1P < 2P. Check for 2P losses.
	ld   a, [wPlInfo_Pl2+iPlInfo_TeamLossCount]
	cp   $03				; Did 2P lose at least 3 times?
	jp   nc, .win1P			; If so, 1P won
	jp   .chkBossLoss		; Otherwise, check if any team is completely defeated
.chkLossCnt1P:
	ld   a, [wPlInfo_Pl1+iPlInfo_TeamLossCount]
	cp   $03				; Did 1P lose at least 3 times?
	jp   nc, .win2P			; If so, 2P won
	jp   .chkBossLoss		; Otherwise, check if any team is completely defeated
.teamLossEq:
	; These involve the FINAL!! round, and must be checked for to avoid getting into
	; .chkBossLoss with > $03 dead chars.
	
	; If we've finished the final round, skip this as a shortcut
	cp   $04					; Do both players have 4 losses set?
	jp   z, .chkFinalRoundRes	; If so, jump (show "DRAW" screen)
	
	; If we're stepping into the FINAL!! round, force start it.
	cp   $03					; Do both players have 3 losses set?
	jp   z, .startNewRound		; If so, start the FINAL!! round
	
.chkBossLoss:
	
	;
	; Even though we checked if a team lost by having >= $03 defeated characters,
	; it's not always possible to rely on it.
	; Some "teams" (bosses and extra characters) go alone, and technically it's possible
	; to have a 2-character team. Those teams can never pass the "3 losses" checks for obvious reasons.
	;
	;
	; To deal with those, check if the new active character points to an CHAR_ID_NONE entry,	;
	; as these teams have that value as "padding" in place of the missing characters.
	;
	
	;
	; Index the teams by loss count to get the active character. The indexed result may
	; be a real character ID, or an CHAR_ID_NONE entry if the boss team is defeated.
	; There's no bounds checking -- this code should never be called when a player has 3+ losses.
	; (.teamLossEq and chkLossCnt*P should handle the >= 3 loss count before execution gets here)
	;
	
	; B = Active char for 2P side
	ld   a, [wPlInfo_Pl2+iPlInfo_TeamLossCount]	; A = Loss count
	ld   hl, wPlInfo_Pl2+iPlInfo_TeamCharId0	; HL = Ptr to 2P team
	ld   d, $00		; DE = Index
	ld   e, a
	add  hl, de		; Index the team tbl
	ld   a, [hl]	; A = Active Char ID
	ld   b, a		; Move to B
	
	; A = Active char for 1P side
	ld   a, [wPlInfo_Pl1+iPlInfo_TeamLossCount]
	ld   hl, wPlInfo_Pl1+iPlInfo_TeamCharId0
	ld   d, $00
	ld   e, a
	add  hl, de
	ld   a, [hl]
	
	;--
	; [POI] This check is here to switch to the FINAL!! round when both teams are
	;       made of < 3 characters... but this is impossible to do in-game.
	;       The check *can* jump, but only before starting a mirror match in team mode
	;       (and .chkBossFinal won't ever call .chkFinalRoundRes)
	cp   a, b					; New1PChar == New2PChar?
	jp   z, .chkBossFinal		; If so, jump
	;--
	; If 1P's character is pointing to the NONE entry, 2P wins
	cp   CHAR_ID_NONE	; New1PChar == CHAR_ID_NONE?
	jp   z, .win2P		; If so, jump
	; If 2P's character is pointing to the NONE entry, 1P wins
	ld   a, b			; A = New2PChar
	cp   CHAR_ID_NONE	; New2PChar == CHAR_ID_NONE?
	jp   z, .win1P		; If so, jump
	jp   .startNewRound
.chkBossFinal:
	;--
	; See [POI] above
	cp   CHAR_ID_NONE			; New1PChar == New2PChar == CHAR_ID_NONE?
	jp   z, .chkFinalRoundRes	; If so, trigger the FINAL!! round
	;--
	jp   .startNewRound
.startNewRound:
	call Play_PrepForWinScreen
	jp   Module_Play
	
.chkFinalRoundRes:
	;
	; FINAL ROUND CHECK
	;
	; After the FINAL!! round is over, there's no starting a new round.
	; The stage forcefully ends, and the win screen code decides how to handle it.
	; 
	xor  a
	ld   [wStageDraw], a
	
	;
	; Because there is no stage progression in VS mode, the win screen
	; is handled differently and there's no need for wStageDraw.
	;
	ld   a, [wPlayMode]
	bit  MODEB_VS, a		; Playing a VS battle?	
	jp   nz, .endStage		; If so, jump
	
	;
	; If anyone won the FINAL!! round, the stage can end as normal
	;
	ld   a, [wLastWinner]
	or   a					; Is 2P the winner?
	jp   nz, .endStage		; If so, jump
	
	;
	; Otherwise, show the DRAW screen.
	;
	; As this is single mode, we also need to fake the wLastWinner data to make
	; the game think the CPU opponent won. This will cause the continue prompt to show up
	; instead of the game continuing anyway to the next stage.
	;
	; yep.
	;
	ld   a, $01				; Show DRAW screen
	ld   [wStageDraw], a
	
	; Make the CPU opponent win
	ld   a, [wJoyActivePl]
	or   a					; wJoyActivePl == PL1? (2P is opponent)
	jp   z, .win2P			; If so, 2P won
.win1P:						; Otherwise, 1P won
	;--
	;
	; 1P won the stage.
	;
	
	; Restore the original iPlInfo_TeamLossCount value from the start of the round.
	; Most of the time we get here, this value doesn't need to be changed... unless
	; there was a draw that caused the stage to end (ie: when 1P Char 1 vs 2P Char 3 ends in draw)
	; due to the $03 loss limit.
	; That will still increase iPlInfo_TeamLossCount to both players, so we must decrement it back.
	
	ld   hl, wPlInfo_Pl1+iPlInfo_TeamLossCount
	ld   a, [wLastWinner]
	or   a					; Was there a winner in this round? (can only be 1P)
	jp   nz, .win1P_capId	; If so, skip
	dec  [hl]				; Otherwise, iPlInfo_TeamLossCount--
	
.win1P_capId:
	; Cap iPlInfo_TeamLossCount to the last valid value for indexing.
	; This only has an effect if the FINAL!! round ends in a draw.
	ld   a, [hl]
	cp   $03				; iPlInfo_TeamLossCount == $03
	jp   nz, .win1P_setLast	; If not, jump
	ld   [hl], $02			; Otherwise, cap to $02
.win1P_setLast:
	; Set 1P as the last winner.
	; This is what determines if the round sequence should continue or not,
	; even in case of the "DRAW" screen showing up.
	ld   hl, wLastWinner
	set  PLB1, [hl]
	res  PLB2, [hl]
	jp   .endStage
.win2P:
	;--
	;
	; 2P won the stage.
	;
	ld   hl, wPlInfo_Pl2+iPlInfo_TeamLossCount
	ld   a, [wLastWinner]
	or   a
	jp   nz, .win2P_capId
	dec  [hl]
.win2P_capId:
	ld   a, [hl]
	cp   $03
	jp   nz, .win2P_setLast
	ld   [hl], $02
.win2P_setLast:
	ld   hl, wLastWinner
	res  PLB1, [hl]
	set  PLB2, [hl]
	jp   .endStage
	;--
.endStage:
	; Stop SGB SFX
	ld   hl, (SGB_SND_B_STOP << 8)|$00
	call SGB_PrepareSoundPacketB
	call Task_PassControlFar
	
	; Cleanup the screen
	call Play_PrepForWinScreen
	
	; Initialize the win screen
	ld   b, BANK(L1D509F) ; BANK $1D
	ld   hl, L1D509F
	rst  $00
Play_ChkEnd_Ret:
	ret
	ret ; We never get here
; =============== Play_SetWinLoseMoves ===============
; Sets the win and lose moves to the specified players.
; This shouldn't be called when there are no winning players (ie: a draw).
; IN
; - BC: Ptr to winner wPlInfo
; - DE: Ptr to loser wPlInfo
Play_SetWinLoseMoves:
	;
	; Additionally...
	; In team mode, the winner recovers health between rounds.
	;
	call IsInTeamMode		; Are we in team mode?
	jp   nc, .chkWinMove	; If not, skip
	
	; The health recovered is 4 + (wRoundTime / 10).
	ld   a, [wRoundTime]
	srl  a				; A = A / 10
	srl  a
	srl  a
	srl  a
	add  a, $04			; + 4
	ld   h, a			; Save it to H
	
	; A = Current health
	push hl
		ld   hl, iPlInfo_Health
		add  hl, bc				; Seek to iPlInfo_Health
		ld   a, [hl]
	pop  hl
	
	; Add the health over, capping it at the standard value
	add  a, h				; iPlInfo_Health += H
	cp   $48				; Is it still < $48?
	jp   c, .saveHealthInc	; If so, jump
	ld   a, $48				; Otherwise, cap it
.saveHealthInc:
	; Save the new health value
	ld   hl, iPlInfo_Health
	add  hl, bc				; Seek to iPlInfo_Health
	ld   [hl], a			; Save new value
	
	
.chkWinMove:
	;
	; WINNING PLAYER -> Set the win move.
	; If we've won 2 or more rounds in a row, use the alternate one.
	;
	ld   hl, iPlInfo_RoundWinStreak
	add  hl, bc
	ld   a, [hl]			; A = iPlInfo_RoundWinStreak 
	cp   $02				; iPlInfo_RoundWinStreak >= $02?
	jr   nc, .winAlt		; If so, jump
.winNorm:
	ld   a, MOVE_SHARED_WIN_NORM	; A = Move ID to use
	jr   .setWinMove
.winAlt:
	ld   a, MOVE_SHARED_WIN_ALT		; A = Move ID to use
.setWinMove:
	ld   hl, iPlInfo_IntroMoveId
	add  hl, bc				; Seek to iPlInfo_IntroMoveId
	ld   [hl], a			; Save it here
	

.chkLoseMove:
	;
	; LOSING PLAYER -> Set the lose move if possible.
	; This is only applicable with time overs -- as otherwise the
	; opponent stays dead on the ground.
	;
	ld   hl, iPlInfo_Health
	add  hl, de
	ld   a, [hl]			; A = iPlInfo_Health
	or   a					; iPlInfo_Health != 0?
	jr   nz, .loseTimeOver	; If so, jump
.loseNorm:
	; Otherwise, set a dummy value which gets ignored since the player tasks
	; for dead players get destroyed.
	; This really could have returned instead of setting this.
	ld   a, MOVE_FF						; A = Move ID to use
	jr   .setLoseMove
.loseTimeOver:
	ld   a, MOVE_SHARED_LOST_TIMEOVER	; A = Move ID to use
.setLoseMove:
	ld   hl, iPlInfo_IntroMoveId
	add  hl, de		; Seek to iPlInfo_IntroMoveId
	ld   [hl], a	; Save it here
	ret
	
; =============== Play_SetDrawMoves ===============
; Sets the move for draws to both players
Play_SetDrawMoves:
	;
	; BOTH PLAYERS -> Set the lose move *if* possible.
	; This is because it has to handle Double KOs as well, and with
	; those both players lie dead on the ground.
	;
	
	; Since both players have the same health, checking 1P is enough.
	ld   a, [wPlInfo_Pl1+iPlInfo_Health]
	or   a					; iPlInfo_Health == 0?
	jr   z, .doubleKo		; If so, it's a double KO (set dummy move)
.timeOver:					; Otherwise, set a real move
	ld   a, MOVE_SHARED_LOST_TIMEOVER
	jr   .setMove
.doubleKo:
	ld   a, MOVE_FF
.setMove:
	ld   [wPlInfo_Pl1+iPlInfo_IntroMoveId], a
	ld   [wPlInfo_Pl2+iPlInfo_IntroMoveId], a
	ret
	
; =============== Play_PrepForWinScreen ===============
; Performs cleanup before switching to the win screen.
Play_PrepForWinScreen:
	; Blank all DMG palettes
	ld   a, $FF
	ldh  [rBGP], a
	ldh  [rOBP0], a
	ldh  [rOBP1], a
	ldh  [hScreenSect0BGP], a
	ldh  [hScreenSect1BGP], a
	ldh  [hScreenSect2BGP], a
	
	; Stop all GFX buffers
	xor  a
	ld   [wGFXBufInfo_Pl1+iGFXBufInfo_TilesLeftA], a
	ld   [wGFXBufInfo_Pl1+iGFXBufInfo_TilesLeftB], a
	ld   [wGFXBufInfo_Pl2+iGFXBufInfo_TilesLeftA], a
	ld   [wGFXBufInfo_Pl2+iGFXBufInfo_TilesLeftB], a
	call Task_PassControlFar
	
	; Reset screen scroll
	xor  a
	ldh  [rWY], a
	ldh  [rWX], a
	ldh  [rSTAT], a
	
	; Disable range check since we'll be outside gameplay
	ld   hl, wMisc_C028
	res  MISCB_PL_RANGE_CHECK, [hl]
	
	; Disable screen sections (for now, they'll get re-enabled later if not on draw)
	call DisableSectLYC
	
	; Disable the two extra tasks which write stuff for the buffers	
	ld   a, $02
	call Task_RemoveAt
	ld   a, $03
	call Task_RemoveAt
	
	; ok I guess
	xor  a
	ld   [wGFXBufInfo_Pl1+iGFXBufInfo_TilesLeftA], a
	ld   [wGFXBufInfo_Pl1+iGFXBufInfo_TilesLeftB], a
	ld   [wGFXBufInfo_Pl2+iGFXBufInfo_TilesLeftA], a
	ld   [wGFXBufInfo_Pl2+iGFXBufInfo_TilesLeftB], a
	call Task_PassControlFar
	
	ret
; =============== Play_LoadPostRoundText0 ===============
; Loads the sprite mappings + graphics for the first set of post-round text.
; See also: Play_LoadPreRoundTextAndIncRound
Play_LoadPostRoundText0:

	;
	; Wait for the players / objects to be ready before finishing the round.
	; This is the state the game is in after defeating an opponent / timer runs out
	; before the WIN/LOST/DRAW text appears.
	;
	; IMPORTANT: There's no timeout implemented, so if players or projectiles
	;            get "stuck", the game softlocks.
	;

	; Execute once a cut down version of the gameplay loop without the joypad reader.
	ld   b, $01
	call Play_MainLoop_PostRoundTextNoDisplay
	
.chkWait1P:
	; Players must be either in the idle move (winner/draw) or have no move (lost).
	; This is to allow any currently executing move to finish.
	ld   a, [wPlInfo_Pl1+iPlInfo_MoveId]
	cp   MOVE_SHARED_NONE		; MoveId == 0?
	jr   z, .chkWait2P			; If so, jump
	cp   MOVE_SHARED_IDLE		; MoveId == 2?
	jr   nz, Play_LoadPostRoundText0	; If not, wait again
.chkWait2P:
	ld   a, [wPlInfo_Pl2+iPlInfo_MoveId]
	cp   MOVE_SHARED_NONE		; MoveId == 0?
	jr   z, .chkWaitEx			; If so, jump
	cp   MOVE_SHARED_IDLE		; MoveId == 2?
	jr   nz, Play_LoadPostRoundText0	; If not, wait again
.chkWaitEx:

	; Also wait for the extra sprites to become invisible, as their
	; graphics are getting overwritten with new ones.
	xor  a
	; Merge the status bits of all OBJinfo
	ld   hl, wOBJInfo_Pl1Projectile+iOBJInfo_Status
	or   a, [hl]
	ld   hl, wOBJInfo_Pl2Projectile+iOBJInfo_Status
	or   a, [hl]
	ld   hl, wOBJInfo_Pl1SuperSparkle+iOBJInfo_Status
	or   a, [hl]
	ld   hl, wOBJInfo_Pl2SuperSparkle+iOBJInfo_Status
	or   a, [hl]
	and  a, OST_VISIBLE				; Are any of these visible?
	jr   nz, Play_LoadPostRoundText0		; If so, wait again
	
	; Wait for 2 more frames
	ld   b, $02
	call Play_MainLoop_PostRoundTextNoDisplay
	
.loadGFX:

	;
	; Load the full set of post-round graphics to the LZSS buffer.
	; For now, only copy the "KO" and cross sprite graphics to VRAM (tiles $00-$2E)
	;
	
	; Do not update the GFX buffers while this is done.
	; But why???
	ld   a, $01
	ld   [wNoCopyGFXBuf], a
	call Task_PassControlFar
	; Decompress to the temporary buffer
	ld   hl, L014458
	ld   de, wLZSS_Buffer+$1E
	call DecompressLZSS
	; Unpause and wait
	ld   a, $00
	ld   [wNoCopyGFXBuf], a
	call Task_PassControlFar
	ld   b, $01
	call Play_MainLoop_PostRoundTextNoDisplay
	
	; Copy the first set of graphics over during HBlank
	ld   hl, wLZSS_Buffer+$1E	; HL = Source ptr
	ld   de, $8800				; DE = Destination ptr
	ld   b, $2E					; B = Tile count
	call Play_CopyPostRoundGFXToVRAM
	
	;
	; Load the OBJInfo for the round text, with the sprite mapping
	; table for the KO text.
	;
	
	ld   hl, wOBJInfo_RoundText+iOBJInfo_Status
	ld   de, OBJInfoInit_Play_RoundText
	call OBJLstS_InitFrom
	ld   hl, wOBJInfo_RoundText+iOBJInfo_OBJLstPtrTbl_Low
	ld   [hl], LOW(OBJLstPtrTable_PostRoundText0)
	inc  hl
	ld   [hl], HIGH(OBJLstPtrTable_PostRoundText0)
	ld   b, $01
	call Play_MainLoop_PostRoundTextNoDisplay
	
	;
	; Load the OBJInfo for both crosses.
	; These mark the newly defeated character(s) in team mode.
	; Usually only one ends up being visible, but draws and time overs can cause both to show up.
	;
	
	; Over 2P's side
	ld   hl, wOBJInfo_Pl2Cross+iOBJInfo_Status
	ld   de, OBJInfoInit_Play_CharCross
	call OBJLstS_InitFrom
	ld   b, $01
	call Play_MainLoop_PostRoundTextNoDisplay
	
	; Over 1P's side
	ld   hl, wOBJInfo_Pl1Cross+iOBJInfo_Status
	ld   de, OBJInfoInit_Play_CharCross
	call OBJLstS_InitFrom
	ld   b, $01
	call Play_MainLoop_PostRoundTextNoDisplay
	
	ret
	
; =============== Play_CopyPostRoundGFXToVRAM ===============
; Copies the specified block of graphics to VRAM, during HBlank.
; This is used specifically for the "post round text" (ie: KO, YOU WON, ...)
; IN
; - HL: Ptr to source uncompressed GFX
; - DE: Ptr to destination in VRAM
; - B: Tiles to copy from HL ($10*B bytes)
Play_CopyPostRoundGFXToVRAM:
	push bc
		; Copy a tile at a time every frame
		ld   b, TILESIZE	; B = Bytes to copy ($10)
	.loop:
		di
		mWaitForVBlankOrHBlank
		ldi  a, [hl]		; Read from source, SrcPtr++
		ld   [de], a		; Copy it to destination
		ei
		inc  de				; DestPtr++
		dec  b				; Copied the tile?
		jr   nz, .loop		; If not, loop
		push de
			push hl
				ld   b, $01
				call Play_MainLoop_PostRoundTextNoDisplay
			pop  hl
		pop  de
	pop  bc
	dec  b									; Finished copying all tiles?
	jr   nz, Play_CopyPostRoundGFXToVRAM	; If not, loop
	ret
	
; =============== Play_DoTimeOverText ===============
; Handles the TIME OVER text display while the characters continue their animations.
Play_DoTimeOverText:
	ld   hl, wOBJInfo_RoundText+iOBJInfo_OBJLstPtrTblOffset
	ld   [hl], PLAY_POSTROUND0_OBJ_TIMEOVER
	jp   Play_DoPostRoundText0
	
; =============== Play_DoKOText ===============
; Handles the KO text display while the characters continue their animations.
Play_DoKOText:
	ld   hl, wOBJInfo_RoundText+iOBJInfo_OBJLstPtrTblOffset
	ld   [hl], PLAY_POSTROUND0_OBJ_KO
	
; =============== Play_DoPostRoundText0 ===============
; Displays text for the first set of post-round text.
; Whem it's finished, it loads the data for the second set.
Play_DoPostRoundText0:

	; Display the text horizontally centered...
	ld   hl, wOBJInfo_RoundText+iOBJInfo_Status
	set  OSTB_VISIBLE, [hl]
	call Play_CenterRoundText
	call Task_PassControlFar
	; ...for $78 frames
	ld   b, $78
	call Play_MainLoop_PostRoundTextDisplay
	
	; Then disable it again
	ld   hl, wOBJInfo_RoundText+iOBJInfo_Status
	res  OSTB_VISIBLE, [hl]
	
	
	;
	; Make the OBJInfo point to the second set of sprite mappings.
	;
	ld   hl, wOBJInfo_RoundText+iOBJInfo_OBJLstPtrTbl_Low
	ld   [hl], LOW(OBJLstPtrTable_PostRoundText1)
	inc  hl
	ld   [hl], HIGH(OBJLstPtrTable_PostRoundText1)
	
	;
	; Load to VRAM the second set of text from the buffer, which contains GFX for "YOU WIN", ...
	; This starts right after the end of the previous set 
	; (hence the $2E*TILESIZE, with $2E being the tile count for last time)
	;
	
	; Note this is copied from $8880 instead of $8800, as the first 8 tiles (ie: cross gfx) 
	; should be left untouched.
	ld   hl, (wLZSS_Buffer+$1E)+($2E*TILESIZE); HL = Source ptr
	ld   de, $8880						; DE = Destination ptr
	ld   b, $36 						; B = Tiles to copy
	call Play_CopyPostRoundGFXToVRAM
	ret
	
; =============== Play_Set1PWin ===============
; Sets 1P as the winner of the current round.
; This updates all of the needed variables across the two players and
; handles the text display.
Play_Set1PWin:

	;
	; Update win streaks (shared across modes)
	;
	ld   hl, wPlInfo_Pl1+iPlInfo_RoundWinStreak
	inc  [hl]		; 1P won, RoundWinStreak++
	ld   hl, wPlInfo_Pl2+iPlInfo_RoundWinStreak
	ld   [hl], $00	; 2P lost, resetting the streak
	
	;
	; The "win counters" are handled differently in single and team mode.
	;
	call IsInTeamMode	; In team mode?
	jp   c, .team		; If so, jump
.single:
	; 
	; SINGLE MODE
	; In single mode, iPlInfo_SingleWinCount is incremented
	; and a round marker is filled on the winner side.
	;
	ld   hl, wPlInfo_Pl1+iPlInfo_SingleWinCount
	inc  [hl]		; 1P Win Count++
	
	; Determine which of the two markers/boxes in the HUD to draw.
	ld   a, [hl]		; Read counter
	cp   $02			; Is this the second win?
	jp   z, .boxWin2	; If so, jump
.boxWin1:
	ld   hl, $9C42		; Leftmost box for first win
	jp   .drawBox
.boxWin2:
	ld   hl, $9C43		; The one on its right for the second
.drawBox:
	ld   c, $74			; C = Tile ID for filled box
	call CopyByteIfNotSingleFinalRound
	jp   .chkTextType
	
.team:
	; 
	; TEAM MODE
	; In team mode, the loss counter on the losing team is incremented,
	; and its cross is made visible.
	;
	ld   hl, wPlInfo_Pl2+iPlInfo_TeamLossCount
	inc  [hl]	; 2P Loss Count++
	
	; Set the base position for the cross.
	; Because the active character is always on the front, it has a fixed position.
	ld   a, [wOBJScrollX]
	add  a, $98
	ld   [wOBJInfo_Pl2Cross+iOBJInfo_X], a
	; Display the cross
	ld   hl, wOBJInfo_Pl2Cross+iOBJInfo_Status
	ld   [hl], $80
	
.chkTextType:
	;
	; Determine which text to display.
	;
	
	ld   a, [wPlayMode]
	bit  MODEB_VS, a	; Playing in VS mode?
	jp   nz, .chkVS		; If so, jump
.chkSingle:
	
	; In single mode, if the CPU opponent wins, "YOU LOST".
	; Otherwise we win.
	
	ld   a, [wJoyActivePl]
	or   a				; Is 1P the active player? (not CPU opponent)
	jp   z, .won		; If so, we won
	jp   .lost			; Otherwise, the CPU opponent is on the 1P side.
.chkVS:
	ld   a, [wMisc_C025]
	bit  MISCB_IS_SGB, a	; Running on the SGB?
	jp   z, .chkVS_serial	; If not, jump
	jp   .chkVS_sgb
.chkVS_serial:
	; On a VS serial battle, show "YOU WIN" on the master side (as it's always 1P)
	ld   a, [wMisc_C025]
	bit  MISCB_SERIAL_SLAVE, a	; Are we a slave?
	jr   nz, .vsSerialLost		; If not, we lost
	jp   .won
.vsSerialLost:
	jp   .lost
.lost:
	ld   a, PLAY_POSTROUND1_OBJ_YOULOST
	jp   .showText
.won:
	ld   a, PLAY_POSTROUND1_OBJ_YOUWON
	jp   .showText
.chkVS_sgb:
	; On a SGB VS battle, explicitly say that 1P won (since there's a single screen).
	ld   a, PLAY_POSTROUND1_OBJ_1PWON
	jp   .showText
.chkVS_sgb_unused:
	; [TCRF] Unreachable code "leftover" from Play_Set2PWin.
	ld   a, PLAY_POSTROUND1_OBJ_2PWON
.showText:
	ld   bc, wPlInfo_Pl1
	call Play_DoPostRoundText1PreWin
	
	; Set only 1P as last winner
	ld   hl, wLastWinner
	set  PLB1, [hl]
	res  PLB2, [hl]
	ret
	
; =============== Play_Set2PWin ===============
; Sets 2P as the winner of the current round.
; This updates all of the needed variables across the two players and
; handles the text display.
; See also: Play_Set1PWin
Play_Set2PWin:

	;
	; Update win streaks (shared across modes)
	;
	ld   hl, wPlInfo_Pl2+iPlInfo_RoundWinStreak
	inc  [hl]		; 2P won, RoundWinStreak++
	ld   hl, wPlInfo_Pl1+iPlInfo_RoundWinStreak
	ld   [hl], $00	; 1P lost, resetting the streak
	
	;
	; The "win counters" are handled differently in single and team mode.
	;
	call IsInTeamMode	; In team mode?
	jp   c, .team		; If so, jump
.single:
	; 
	; SINGLE MODE
	; In single mode, iPlInfo_SingleWinCount is incremented
	; and a round marker is filled on the winner side.
	;
	ld   hl, wPlInfo_Pl2+iPlInfo_SingleWinCount
	inc  [hl]		; 2P Win Count++
	
	; Determine which of the two markers/boxes in the HUD to draw.
	ld   a, [hl]		; Read counter
	cp   $02			; Is this the second win?
	jp   z, .boxWin2	; If so, jump
.boxWin1:
	ld   hl, $9C51		; Leftmost box for first win
	jp   .drawBox
.boxWin2:
	ld   hl, $9C50		; The one on its right for the second
.drawBox:
	ld   c, $74			; C = Tile ID for filled box
	call CopyByteIfNotSingleFinalRound
	jp   .chkTextType
	
.team:
	; 
	; TEAM MODE
	; In team mode, the loss counter on the losing team is incremented,
	; and its cross is made visible.
	;
	ld   hl, wPlInfo_Pl1+iPlInfo_TeamLossCount
	inc  [hl]	; 1P Loss Count++
	
	; Set the base position for the cross.
	; Because the active character is always on the front, it has a fixed position.
	ld   a, [wOBJScrollX]
	add  a, $08
	ld   [wOBJInfo_Pl1Cross+iOBJInfo_X], a
	; Display the cross
	ld   hl, wOBJInfo_Pl1Cross+iOBJInfo_Status
	ld   [hl], $80
	
.chkTextType:
	;
	; Determine which text to display.
	;
	
	ld   a, [wPlayMode]
	bit  MODEB_VS, a	; Playing in VS mode?
	jp   nz, .chkVS		; If so, jump
.chkSingle:
	; In single mode, if the CPU opponent wins, "YOU LOST".
	; Otherwise we win.
	
	ld   a, [wJoyActivePl]
	or   a				; Is 2P the active player? (not CPU opponent)
	jp   nz, .won		; If so, we won
	jp   .lost			; Otherwise, the CPU opponent is on the 2P side.
.chkVS:
	ld   a, [wMisc_C025]
	bit  MISCB_IS_SGB, a	; Running on the SGB?
	jp   z, .chkVS_serial	; If not, jump
	jp   .chkVS_sgb
.chkVS_serial:
	; On a VS serial battle, show "YOU WIN" on the slave side (as it's always 2P)
	ld   a, [wMisc_C025]
	bit  MISCB_SERIAL_SLAVE, a	; Are we a slave?
	jr   nz, .vsSerialWon		; If so, we won
	jp   .lost
.vsSerialWon:
	jp   .won
.lost:
	ld   a, PLAY_POSTROUND1_OBJ_YOULOST
	jp   .showText
.won:
	ld   a, PLAY_POSTROUND1_OBJ_YOUWON
	jp   .showText
.chkVS_sgb_unused:
	; [TCRF] Unreachable code "leftover" from Play_Set1PWin
	ld   a, PLAY_POSTROUND1_OBJ_1PWON
	jp   .showText
.chkVS_sgb:
	; On a SGB VS battle, explicitly say that 2P won (since there's a single screen).
	ld   a, PLAY_POSTROUND1_OBJ_2PWON
.showText:
	ld   bc, wPlInfo_Pl2
	call Play_DoPostRoundText1PreWin
	
	; Set only 2P as last winner
	ld   hl, wLastWinner
	res  PLB1, [hl]
	set  PLB2, [hl]
	ret
	
; =============== Play_DoPostRoundText1PreWin ===============
; Displays the post-round text for a second.
; Note that this doesn't start the win pose -- that's set elsewhere
; and has to wait for this to return first.
; IN
; - A: Sprite mapping ID for the text (PLAY_POSTROUND0_OBJ_*)
; - BC: Ptr to wPlInfo
Play_DoPostRoundText1PreWin:
	; Display the text
	ld   hl, wOBJInfo_RoundText+iOBJInfo_Status
	ld   [hl], OST_VISIBLE
	; Set the sprite mapping ID
	ld   [wOBJInfo_RoundText+iOBJInfo_OBJLstPtrTblOffset], a
	; Center it and update the display
	call Play_CenterRoundText
	call Task_PassControlFar
	
	; Display the text for one second
	ld   b, 60
	call Play_MainLoop_PostRoundTextDisplay
	ret

; =============== Play_SetDraw ===============
; Sets the round result as a Draw, making both players lose.
; This updates all of the needed variables across the two players and
; handles the text display.
Play_SetDraw:
	; Reset all win streaks
	ld   hl, wPlInfo_Pl1+iPlInfo_RoundWinStreak
	ld   [hl], $00
	ld   hl, wPlInfo_Pl2+iPlInfo_RoundWinStreak
	ld   [hl], $00
	
	; There's no last winner
	ld   hl, wLastWinner
	res  PLB1, [hl]
	res  PLB2, [hl]
	
	;
	; If we're in team mode, set its specific variables and the cross sprites over the active icons.
	; There's no box filling with single mode here.
	;
	call IsInTeamMode	; Are we in team mode?
	jp   nc, .setText	; If not, skip
	
	; Both players lost
	ld   hl, wPlInfo_Pl1+iPlInfo_TeamLossCount
	inc  [hl]
	ld   hl, wPlInfo_Pl2+iPlInfo_TeamLossCount
	inc  [hl]
	
	; Draw both cross sprites as long as we didn't *reach* the FINAL!! round just now.
	; In other words, if both loss counts have been incremented to $03, don't draw
	; the crosses as there's a final round with the same active characters.
	ld   a, [wPlInfo_Pl1+iPlInfo_TeamLossCount]	; A = 1P loss count
	ld   hl, wPlInfo_Pl2+iPlInfo_TeamLossCount	; HL = Ptr to 2P loss count
	cp   a, [hl]		; Are they the same value?
	jp   nz, .setCross	; If not, draw the crosses
	cp   $03			; Are they both 3?
	jp   z, .setText	; If so, skip
.setCross:
	; Set 2P side cross position
	ld   a, [wOBJScrollX]
	add  a, $98
	ld   [wOBJInfo_Pl2Cross+iOBJInfo_X], a
	; Set 1P side cross position
	ld   a, [wOBJScrollX]
	add  a, $08
	ld   [wOBJInfo_Pl1Cross+iOBJInfo_X], a
	; Display the cross for both characters
	ld   hl, wOBJInfo_Pl2Cross+iOBJInfo_Status
	ld   [hl], OST_VISIBLE
	ld   hl, wOBJInfo_Pl1Cross+iOBJInfo_Status
	ld   [hl], OST_VISIBLE
.setText:
	; Display the round text centered
	ld   hl, wOBJInfo_RoundText+iOBJInfo_Status
	ld   [hl], OST_VISIBLE
	call Play_CenterRoundText
	
	ld   a, PLAY_POSTROUND1_OBJ_DRAWGAME
	
	;--
	; why
	jp   .setOBJ
.setOBJ:
	;--

	ld   [wOBJInfo_RoundText+iOBJInfo_OBJLstPtrTblOffset], a
	call Task_PassControlFar
	
	; Display text for a second
	; After exiting, other code will set the draw pose to both players
	ld   b, 60
	call Play_MainLoop_PostRoundTextDisplay
	ret
; =============== Play_MainLoop_PostRoundTextNoDisplay ===============
; Version of the main loop used post-round when the text isn't visible.
; IN
; - B: Frames of execution (usually short)
Play_MainLoop_PostRoundTextNoDisplay:
	push bc
		call Play_DoPlInput
		call Play_DoHUD
		call Play_DoUnkChain
		call Play_DoPlColi
		call Play_WriteKeysToBuffer
		call Play_DoScrollPos
		call Play_ExecExOBJCode
		call Task_PassControlFar
	pop  bc
	dec  b											; Done all frames?	
	jp   nz, Play_MainLoop_PostRoundTextNoDisplay	; If not, loop
	ret
; =============== Play_MainLoop_PostRoundTextDisplay ===============
; Version of the main loop used when displaying post-round text.
; IN
; - B: Frames of execution (at least 1 sec)
Play_MainLoop_PostRoundTextDisplay:
	push bc
		; It's possible to end the loop prematurely if a player presses any of the non-directional keys.
		ldh  a, [hJoyNewKeys]						; A = 1P inputs
		ld   hl, hJoyNewKeys2						; HL = Ptr to 2P inputs
		or   a, [hl]								; Merge 1P & 2P inputs
		and  a, KEY_A|KEY_B|KEY_SELECT|KEY_START	; Pressing any of these keys?
		jp   nz, .abort								; If so, we're done
		
		; Flash the round text here
		call Play_AnimTextPal
		
		; Standard calls
		call Play_DoPlInput
		call Play_DoHUD
		call Play_DoUnkChain
		call Play_DoPlColi
		call Play_WriteKeysToBuffer
		call Play_DoScrollPos
		call Play_ExecExOBJCode
		call Task_PassControlFar
		
	pop  bc
	dec  b										; Executed this for all frames?
	jp   nz, Play_MainLoop_PostRoundTextDisplay	; If not, loop
	ret
.abort:;J
	pop  bc
	ret
	
; =============== Play_AnimTextPal ===============
; Flashes the palette for the three extra sprites at wOBJInfo3-wOBJInfo5, used for the text.
Play_AnimTextPal:
	ld   hl, wOBJInfo_RoundText+iOBJInfo_Status		; HL = Initial wOBJInfo
	ld   b, $03			; B = wOBJInfo to process
.loop:
	push hl
		bit  OSTB_VISIBLE, [hl]		; Is the sprite visible?
		jr   z, .nextOBJ			; If not, skip
		inc  hl
		
		; Every 4 frames, switch between OBP0 and OBP1.
		; This flashes the text color between the two shades of grays.
		ld   a, [wTimer]
		bit  2, a			; wTimer & $04 == 0?
		jp   nz, .obp1		; If not, jump
	.obp0:
		ld   [hl], SPR_OBP0
		jr   .nextOBJ
	.obp1:
		ld   [hl], SPR_OBP1
	.nextOBJ:
	
	pop  hl
	; Seek to the next OBJInfo
	ld   de, OBJINFO_SIZE	; HL += OBJINFO_SIZE
	add  hl, de
	dec  b					; Handled all wOBJInfo?
	jp   nz, .loop			; If not, loop
	ret
; =============== Play_CenterRoundText ===============
; Aligns the round text to the center of the screen.
Play_CenterRoundText:
	ld   a, [wOBJScrollX]
	add  a, SCREEN_H/2 ; Add half a screen
	ld   [wOBJInfo_RoundText+iOBJInfo_X], a
	ret
	
; =============== Play_DoScrollPos ===============
; Updates the screen scroll positions for playfield and sprites.
Play_DoScrollPos:

	;
	; HORIZONTAL SCROLLING
	;
	; Moving too close to the edge of the screen ($20px in practice) will cause the screen to scroll,
	; but if both players are far enough to trigger the opposite screen edges, there's special handling involved.
	;
	; Note that, while we're updating wOBJScrollX and the checks are performed there
	; this value will be directly copied to hScrollX.
	;
SCROLL_BORDER_H EQU $20
	
	;
	; If both players aren't far enough (distance < $60), a simple border check can be made.
	;
	; Note that $60 is the largest applicable value before the $20px border would kick in
	; on both sides. ($60 + $20*2 = SCREEN_H)
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_PlDistance]
	cp   SCREEN_H-(SCROLL_BORDER_H*2)		; PlDistance < $60?
	jp   c, .chkNearX					; If so, jump
	
.chkFarX:
	;
	; Otherwise, the screen should be positioned so both players are
	; equally far to the edge of the screen, as long as the edge of the playfield isn't reached.
	;
	
	; Calculate the new target position.
	; This is the absolute "center point" between the two players, and the screen
	; should be positioned so the center of the screen points to that coordinate.
	; B = (X2 + X1) / 2
	ld   a, [wOBJInfo_Pl2+iOBJInfo_X]
	ld   b, a							; B = 2P X Pos
	ld   a, [wOBJInfo_Pl1+iOBJInfo_X]	; A = 1P X Pos
	srl  a		; A = A / 2
	srl  b		; B = B / 2
	add  b		; B += A
	ld   b, a
	
	; However, wOBJScrollX points to the left corner of the screen, not the center.
	; Additionally, checks are needed to prevent the camera from moving past the edge.
	; To satisfy those conditions the calculation will be done by .moveL and .moveR.
	;
	; Those subroutines though scroll the screen by a specified amount and don't accept
	; an absolute value. For this, convert the absolute value to relative (to the center of the screen):
	
	; Calculate absolute position currently at the center of the screen
	ld   a, [wOBJScrollX]	; A = Absolute left corner position
	add  a, SCREEN_H/2		; Add half a screen
	
	; The offset will be the distance between the center and target.
	; Add or remove it depending on whether it's on the left or right of the screen center.
	cp   a, b				
	jp   z, .setScrollX	; MidPoint == Target? If so, don't change anything
	jp   c, .moveFarR 	; MidPoint < Target? If so, move it right
.moveFarL:				; Otherwise, move it left
	; The target is on the left of the midpoint.
	; Move left by:
	; B = Target - MidPoint
	sub  a, b		; A = MidPoint - Target
	cpl				; Convert to negative
	inc  a
	ld   b, a
	
.moveL:
	;
	; Scroll the playfield left by B. Force it back to $00 if it underflows.
	;
	
	; wOBJScrollX = MAX(wOBJScrollX + B, 0)
	; B must be a negative value.
	ld   a, [wOBJScrollX]	; wOBJScrollX += B
	add  b
	ld   [wOBJScrollX], a
	bit  7, a				; wOBJScrollX < 0?
	jp   z, .setScrollX		; If so, jump
	ld   a, $00				; Otherwise, force it back to 0
	ld   [wOBJScrollX], a
	jp   .setScrollX
.moveFarR:
	; The target is on the right side of the screen.
	; Move right by:
	; B = Target - MidPoint
	sub  a, b		; A = MidPoint - Target
	cpl				; Convert to positive
	inc  a
	ld   b, a
.moveR:

	;
	; Scroll the playfield right by B. Force it back to $60 if it goes past that.
	;
	
	; As wOBJScrollX/hScrollX point to the left corner of the screen,
	; subtracting the screen width from the tilemap width will give the max value as $60.
	
	; wOBJScrollX = MIN(wOBJScrollX + B, $60)
	ld   a, [wOBJScrollX]
	add  b
	ld   [wOBJScrollX], a
	cp   TILEMAP_H-SCREEN_H	; $60
	jp   c, .setScrollX
	ld   a, TILEMAP_H-SCREEN_H ; $60
	ld   [wOBJScrollX], a
	jp   .setScrollX
.chkNearX:
	;
	; If any player is $20px (SCROLL_BORDER_H) near the edge of the screen, scroll it accordingly.
	; As the players are close to each other, no special checks are needed.
	;
	; However, the thresholds checked aren't directly $20px, since this is going off iOBJInfo_RelX.
	; That value is offset to the right by OBJ_OFFSET_X, and as a result: 
	;
SCROLL_THRESHOLD_L EQU SCROLL_BORDER_H+OBJ_OFFSET_X
SCROLL_THRESHOLD_R EQU SCREEN_H-(SCROLL_BORDER_H-OBJ_OFFSET_X)
	
	ld   a, [wOBJInfo_Pl1+iOBJInfo_RelX]
	cp   SCROLL_THRESHOLD_L			; iOBJInfo_RelX < $28?
	jp   c, .moveNearL				; If so, scroll left
	cp   SCROLL_THRESHOLD_R+1		; iOBJInfo_RelX >= $89? (> $88?)
	jp   nc, .moveNearR				; If so, scroll right
	; Same for 2P
	ld   a, [wOBJInfo_Pl2+iOBJInfo_RelX]
	cp   SCROLL_THRESHOLD_L
	jp   c, .moveNearL
	cp   SCROLL_THRESHOLD_R+1
	jp   nc, .moveNearR
	jp   .setScrollX
.moveNearL:
	; Scroll the screen left by how much the threshold was passed.
	; ie: if currently at position SCROLL_THRESHOLD_L-2, scroll left by 2px
	sub  a, SCROLL_THRESHOLD_L	; B = iOBJInfo_RelX - SCROLL_THRESHOLD_L
	ld   b, a
	jp   .moveL
.moveNearR:
	; Scroll the screen right by how much the threshold was passed, like in .moveNearL
	sub  a, SCROLL_THRESHOLD_R ; B = iOBJInfo_RelX - SCROLL_THRESHOLD_R
	ld   b, a
	jp   .moveR
.setScrollX:
	; Save the same result to the playfield scroll position
	ld   a, [wOBJScrollX]
	ldh  [hScrollX], a
	
.doY:
	;
	; VERTICAL SCROLLING
	;
	
	;
	; Calculate the base hScrollY position.
	;
	; On the floor, characters have the internal Y position $88 (PL_FLOOR_POS).
	; It will never be higher than that, and jumping decreases the value.
	;
	; As characters move jump up, the screen scrolls up slowly, so:
	;
	; hScrollY = -MAX((PL_FLOOR_POS - Y1) + (PL_FLOOR_POS - Y2)) / $10, 8)
	;
	; Note the negative sign.
	; When both characters stand on the floor, the Y scrolling is set up so
	; it's at coordinate 0, and jumping makes it underflow.
	; The tilemap of course accounts for this.
	;
	;
	
	; Get how much the 1P has jumped up
	; H = $88 - iOBJInfo_Y (1P)
	ld   a, [wOBJInfo_Pl1+iOBJInfo_Y]
	ld   b, a
	ld   a, PL_FLOOR_POS
	sub  a, b		
	ld   h, a
	; Get how much the 2P has jumped up
	; A = $88 - iOBJInfo_Y (2P)
	ld   a, [wOBJInfo_Pl2+iOBJInfo_Y]
	ld   b, a
	ld   a, PL_FLOOR_POS
	sub  a, b
	; Sum those together, so that if both players jump if makes it go even higher
	add  a, h
	; Slow down vertical movement as much as possible
	; A /= $10
	srl  a
	srl  a
	srl  a
	srl  a
	
	; Cap the result at 8.
	; This prevents scrolling the screen in a way that would make the characters
	; move below the bottom HUD, or scroll into the blank part of the tilemap.
	cp   $08			; A < $08?
	jp   c, .invY		; If so, jump
	ld   a, $08			; Otherwise, A = $08
.invY:
	; Invert the result since we're scrolling up from coord 0
	cpl		; A -= A
	inc  a
	; Save the result for now
	ldh  [hScrollY], a
	
	; The sprites are always have their origins least $40px from the bottom of the screen
	add  a, $40
	ld   [wOBJScrollY], a
	
	;
	; Screen shake support.
	;
	; If the optional offset is specified, add it exclusively to hScrollY without affecting sprites.
	; Note that the value is relative to the inverted version of hScrollY, so we must flip that back first.
	;
	ld   a, [wScreenShakeY]
	or   a					; wScreenShakeY == 0?
	jp   z, .ret			; If so, skip
	
	; Otherwise...
	; hScrollY = MIN(hScrollY - wScreenShakeY
	ld   b, a			; B = wScreenShakeY
	ldh  a, [hScrollY]	; A = -hScrollY
	cpl
	inc  a
	add  b				; A += B
	
	; Perform the same cap as above
	cp   $08			; A < $08?
	jp   c, .inv2Y		; If so, jump
	ld   a, $08			; Otherwise, A = $08
.inv2Y:
	cpl					; A = -A
	inc  a
	
	; Save the result
	ldh  [hScrollY], a
.ret:
	ret
	
; =============== Play_DoHUD ===============
; Updates the HUD and the related variables during gameplay.
; This includes decrementing the timer, as that's part of the subroutine
; that draws it to the HUD.
Play_DoHUD:
	call Play_UpdateHealthBars
	call Play_UpdatePowBars
	call Play_DoTime
	call Play_UpdateHUDHitCount
	ret
	
; =============== Play_UpdateHealthBars ===============
; Draws/updates the health bar display for both players.
;
; This subroutine keeps the visual health value (what's displayed in the health bar) 
; synched up with the actual health (the target).
;
; The health bar increases or decreases 1px/frame, until the target value is reached.
;
Play_UpdateHealthBars:


; =============== mDrawHealthBarTile ===============
; Generates the common code used to write to the health bar tilemap when flashing.
; IN
; - HL: Ptr to tilemap
; - B: Tile ID
mDrawHealthBarTile: MACRO
	push af
		di
		mWaitForVBlankOrHBlank
		ld   [hl], b
		ei
	pop  af
ENDM
	
	ld   a, [wPlInfo_Pl1+iPlInfo_Health]
	ld   b, a									; B = Target health
	ld   a, [wPlInfo_Pl1+iPlInfo_HealthVisual]	; A = Visual Health
	cp   a, b				; Do they match?
	; If they match, skip ahead.
	jp   z, .eqTarget1P		; Health == Target?
	; If the visual health is less than the target, increase the bar.
	jp   c, .ltTarget1P		; Health < Target?
	; Otherwise, Health > Target. Decrease the bar.
.gtTarget1P:
	; Bar decreases to the right
	ld   hl, vBGHealthBar1P					; HL = Ptr to start of health bar in tilemap
	ld   bc, Play_Bar_TileIdTbl_RGrow		; BC = Tile ID table (bytes 7-0)
	ld   de, Play_Bar_BGOffsetTbl_RGrow		; DE = Tilemap offset table
	
	; VisualHealth--
	ld   a, [wPlInfo_Pl1+iPlInfo_HealthVisual] ; (not necessary, already in A)
	dec  a
	ld   [wPlInfo_Pl1+iPlInfo_HealthVisual], a
	; Update health bar
	call Play_DrawBarTip
	jp   .eqTarget1P
	
.ltTarget1P:
	; Bar grows to the left
	ld   hl, vBGHealthBar1P				; HL = Ptr to start of health bar in tilemap
	ld   bc, Play_Bar_TileIdTbl_RGrow+1	; BC = Tile ID table (bytes 1-8)
	ld   de, Play_Bar_BGOffsetTbl_RGrow	; DE = Tilemap offset table
	; VisualHealth++
	inc  a
	ld   [wPlInfo_Pl1+iPlInfo_HealthVisual], a
	; When the bar grows, it should always update the tile for the previous health value.
	; If we didn't, there'd be an empty gap between tiles when the modulo'd health goes from 7 to 8.
	;
	; ie:
	; -> 7 % 8 = 7 -> Tile+0 set at 7 filled pixels, 1 empty
	; -> 8 % 8 = 0 -> NG Tile+1 set at 8 empty pixels, leaving the previous value at Tile+0
	;                 OK Tile+0 set at 8 filled pixels
	; -> (then continuing as normal with 1 filled pixel on Tile+1)
	;
	; The VisualHealth being offset by -1 is also the reason behind the +1 offset
	; to Play_Bar_TileIdTbl_RGrow, as it shifts the tile IDs down by 1 too.
	dec  a
	call Play_DrawBarTip
	
	;--
	
.chkFixFlash1P:
	;
	; When the health increases from critical to fine, force replace
	; the blank bar graphics with the filled ones.
	;
	; This is because the flashing is done by alternating between empty and filled bar,
	; and it's very possible to switch while the bar is using the empty tiles.
	;
	
	ld   a, [wPlInfo_Pl1+iPlInfo_HealthVisual]
	cp   PLAY_HEALTH_CRITICAL		; VisualHealth != $18?
	jp   nz, .eqTarget1P			; If so, jump
	ld   hl, vBGHealthBar1P_Last	; Start at lowest tile
	
	; Write filled bar to lowest tile
	di
	mWaitForVBlankOrHBlank
	ld   a, $DF			; Tile ID for filled bar.	
	ldd  [hl], a
	ei
	
	; Write filled bar to 2nd-lowest tile
	push af	; Save $DF
		di
		mWaitForVBlankOrHBlank
	pop  af	; Restore $DF
	ldd  [hl], a			
	ei
	; No need to write it to the 3rd-lowest tile, as it's already seen done when the tip
	; was drawn due to the -1 offset.
	
.eqTarget1P:
	;
	; Handle the aforemented health bar flashing at critical health.
	; This is handled by alternating between blank and filled tiles every 4 frames
	; when the health is lower than 18 (meaning 3 tiles at most do the effect)
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_HealthVisual]
	cp   PLAY_HEALTH_CRITICAL	; VisualHealth >= $18?
	jp   nc, .do2P				; If so, skip
	
	; Every 4 frames...
	ld   a, [wPlayTimer]
	and  a, $04				; wPlayTimer % 4 != 0?	
	jp   nz, .flashShow1P	; If so, fill the bar
	
.flashBlank1P:
	ld   a, [wPlInfo_Pl1+iPlInfo_HealthVisual]	; A = Current health
	ld   b, $E0						; B = Tile ID for empty bar
	ld   hl, vBGHealthBar1P_Last	; HL = Lowest tile of 1P health bar
	
	; To save time, only write to the non-empty tiles.	
	; Decrease the health by 8 every time, until it goes negative or we updated all 3 tiles.
	
	;
	; Lowest tile
	;
	mDrawHealthBarTile
	
	;
	; 2nd-lowest tile
	;
	sub  a, $08		; VisualHealth < $08?
	jp   c, .do2P	; If so, skip (2nd-lowest tile is already empty)
	dec  hl			; Move left in tilemap
	mDrawHealthBarTile
	
	;
	; 3rd-lowest tile
	;
	sub  a, $08		; VisualHealth < $10?
	jp   c, .do2P	; If so, skip
	dec  hl
	mDrawHealthBarTile
	
	jp   .do2P
	
.flashShow1P:
	; Display the bar
	ld   a, [wPlInfo_Pl1+iPlInfo_HealthVisual]	; A = Current health
	ld   b, $DF						; B = Tile ID for filled bar
	ld   hl, vBGHealthBar1P_Last	; HL = Lowest tile of 1P health bar
	
	; Move left from the lowest tile of the health bar, drawing completely filled tiles.
	; Stop when reaching the tip as that doesn't always use the filled tile.
	
	;
	; Lowest tile
	;
	sub  a, $08				; VisualHealth < $08?
	jp   c, .flashTip1P		; If so, jump (tip already reached)
	mDrawHealthBarTile
	dec  hl					; Move left in tilemap
	
	;
	; 2nd-lowest tile
	;
	sub  a, $08				; VisualHealth < $10?
	jp   c, .flashTip1P		; If so, jump 
	mDrawHealthBarTile
	dec  hl					; Move left in tilemap
	
	;
	; 3rd-lowest tile
	;
	sub  a, $08				; VisualHealth < $18?
	jp   c, .flashTip1P		; If so, jump (always)
	;--
	; [TCRF] Unreachable code, as the health bar only flashes at VisualHealth < 18.
	mDrawHealthBarTile
	jp   .do2P
	;--
.flashTip1P:
	;
	; Draw the tip of the health bar.
	; This is a simplified version of Play_DrawBarTip with somewhat hardcoded values.
	;
	
	; TileId = $E7 + (Health % 8)
	and  a, $07		; A = VisualHealth % 8
	; The tile for the empty tile is $E0, which doesn't work with the formula above
	or   a						; Is it $00?
	jp   z, .flashTipEmpty1P	; If so, skip
	add  a, $E7					; Add tile ID base
	; Write TileId to the tilemap
	push af
		di
		mWaitForVBlankOrHBlank
	pop  af
	ld   [hl], a
	ei
	jp   .do2P
.flashTipEmpty1P:
	; Write $E0 to the tilemap
	di
	mWaitForVBlankOrHBlank
	ld   a, $E0
	ld   [hl], a
	ei
	
.do2P:
	;
	; Same thing for the 2P Health Bar
	;
	
	ld   a, [wPlInfo_Pl2+iPlInfo_Health]
	ld   b, a									; B = Target health
	ld   a, [wPlInfo_Pl2+iPlInfo_HealthVisual]	; A = Visual Health
	cp   a, b										
	jp   z, .eqTarget2P		; Health == Target? If so, jump
	jp   c, .ltTarget2P 	; Health < Target?
	
.gtTarget2P:
	; Decrease the bar to the left
	ld   hl, vBGHealthBar2P						; HL = Ptr to start of health bar in tilemap
	ld   bc, Play_Bar_TileIdTbl_LGrow			; BC = Tile ID table (bytes 0-7)
	ld   de, Play_Bar_BGOffsetTbl_LGrow		; DE = Tilemap offset table
	ld   a, [wPlInfo_Pl2+iPlInfo_HealthVisual]	; VisualHealth--
	dec  a
	ld   [wPlInfo_Pl2+iPlInfo_HealthVisual], a
	call Play_DrawBarTip
	jp   .eqTarget2P
	
.ltTarget2P:
	; Increase the bar to the right
	ld   hl, vBGHealthBar2P
	ld   bc, Play_Bar_TileIdTbl_LGrow+1
	ld   de, Play_Bar_BGOffsetTbl_LGrow
	inc  a										; VisualHealth++
	ld   [wPlInfo_Pl2+iPlInfo_HealthVisual], a
	dec  a										; Update tile for previous health value
	call Play_DrawBarTip
.chkFixFlash2P:
	; Force replace the blank bar graphics with the filled ones.
	ld   a, [wPlInfo_Pl2+iPlInfo_HealthVisual]
	cp   PLAY_HEALTH_CRITICAL	; VisualHealth != $18?
	jp   nz, .eqTarget2P		; If so, jump
	ld   hl, vBGHealthBar2P		; Start at lowest tile (matches origin in 2P)
	
	; Write filled bar to lowest tile
	di
	mWaitForVBlankOrHBlank
	ld   a, $DF
	ldi  [hl], a
	ei
	
	; Write filled bar to 2nd-lowest tile
	push af
		di
		mWaitForVBlankOrHBlank
	pop  af
	ldi  [hl], a
	ei
	
.eqTarget2P:
	;
	; Handle the health bar flashing at critical health.
	;
	ld   a, [wPlInfo_Pl2+iPlInfo_HealthVisual]
	cp   PLAY_HEALTH_CRITICAL	; VisualHealth >= $18?
	jp   nc, .ret				; If so, skip
	; Every 4 frames...
	ld   a, [wPlayTimer]
	and  a, $04				; wPlayTimer % 4 != 0?	
	jp   nz, .flashShow2P	; If so, show the bar
	
.flashBlank2P:
	ld   a, [wPlInfo_Pl2+iPlInfo_HealthVisual]	; A = Current health
	ld   b, $E0				; B = Tile ID for empty bar
	ld   hl, vBGHealthBar2P	; HL = Lowest tile of 2P health bar
	
	;
	; Lowest tile
	;
	mDrawHealthBarTile
	
	;
	; 2nd-lowest tile
	;
	sub  a, $08		; VisualHealth < $08?
	jp   c, .ret	; If so, skip (2nd-lowest tile is already empty)
	inc  hl			; Move right in tilemap
	mDrawHealthBarTile
	
	;
	; 3rd-lowest tile
	;
	sub  a, $08		; VisualHealth < $10?
	jp   c, .ret	; If so, skip
	inc  hl
	mDrawHealthBarTile
	
	jp   .ret
.flashShow2P:
	; Display the bar
	ld   a, [wPlInfo_Pl2+iPlInfo_HealthVisual]	; A = Current health
	ld   b, $DF					; B = Tile ID for filled bar
	ld   hl, vBGHealthBar2P		; HL = Lowest tile of 2P health bar
	
	; Move right from the lowest tile of the health bar, drawing completely filled tiles.
	
	ASSERT(PLAY_HEALTH_CRITICAL == $18)
	;
	; Lowest tile
	;
	sub  a, $08				; VisualHealth < $08?
	jp   c, .flashTip2P		; If so, jump (tip already reached)
	mDrawHealthBarTile
	inc  hl					; Move left in tilemap
	
	;
	; 2nd-lowest tile
	;
	sub  a, $08				; VisualHealth < $10?
	jp   c, .flashTip2P		; If so, jump 
	mDrawHealthBarTile
	inc  hl					; Move left in tilemap
	
	;
	; 3rd-lowest tile
	;
	sub  a, $08				; VisualHealth < $18?
	jp   c, .flashTip2P		; If so, jump (always)
	;--
	; [TCRF] Unreachable code, as the health bar only flashes at VisualHealth < 18.
	mDrawHealthBarTile
	jp   .ret
	;--
.flashTip2P:
	; Draw the tip of the health bar.
	; TileId = $E0 + (Health % 8)
	and  a, $07
	or   a						; This check is unnecessary for the 2P tilemap
	jp   z, .flashTipEmpty2P	; as the empty bar and tile ID base are the same
	add  a, $E0
	; Write TileId to the tilemap
	push af
		di
		mWaitForVBlankOrHBlank
	pop  af
	ld   [hl], a
	ei
	jp   .ret
.flashTipEmpty2P:
	; Write $E0 to the tilemap
	di
	mWaitForVBlankOrHBlank
	ld   a, $E0
	ld   [hl], a
	ei
.ret:
	ret
	
; =============== Play_DrawBarTip ===============
; Updates the tip tile of a bar.
; IN
; - HL: Ptr to bar in the tilemap (leftmost tile, even on 2P side)
; - BC: Ptr to tile id table. An 8 byte window of this is used.
; - DE: Ptr to tilemap offset table
; -  A: Visual bar value
Play_DrawBarTip:
	
	;
	; The bar graphics include multiple bar tiles to allow pixel-level precision.
	; Determine which tile id we're using for the tip of the bar.
	; A = TileId
	;
	push af
		; As tiles are 8px long, the tip can use 8 possible tiles (VisualHealth % 8).
		and  a, $07		; A = VisualHealth % 8
		; Use that as index to a table mapping sub-tile values to tile IDs.
		; This is different 
		add  c			; BC += A
		ld   c, a
		ld   a, [bc]	; Read value
	pop  bc
	
	;
	; Determine the tilemap ptr to the tip of the bar.
	; HL = TilemapPtr
	;
	push af
		; As tiles are 8px long...
		ld   a, b		; A = B / 8
		srl  a
		srl  a
		srl  a
		; Use that as index to a table of tilemap *offsets*.
		; The byte read out from here is added to the tilemap's origin passed in HL.
		;
		; Note that there are two different tables for the two players, as both
		; bars grow from the center of the screen.
		; Because the bar origin is always the leftmost tile for both sides, these
		; offsets are always positive.
		add  a, e		; DE += A (index table)
		ld   e, a
		ld   a, [de]	; A = TilemapOffset
		add  a, l		; HL += A (add it to tilemap ptr)
		ld   l, a
		
	;
	; Write the tile id to the tilemap
	;
		di
		mWaitForVBlankOrHBlank
	pop  af
	
	ld   [hl], a	
	ei
	
	ret
	
; =============== Play_UpdatePowBars ===============
; Draws/updates the POW bar display for both players, including in the MAXIMUM POW mode.
; See also: Play_UpdateHealthBars
Play_UpdatePowBars:

	; In max power mode, a different bar is handled.
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPowExtraLen]
	cp   PLAY_MAXMODE_NONE		; In Max Power mode? (!= $00)
	jp   nz, .maxPow1P			; If so, jump
	
	ld   a, [wPlInfo_Pl1+iPlInfo_Pow]
	ld   b, a								; B = Target POW
	ld   a, [wPlInfo_Pl1+iPlInfo_PowVisual]	; A = Visual POW
	cp   a, b
	; If nothing changes, skip to checking the 2P POW bar
	jp   z, .chk2P		; VisualPOW == Target? If so, jump
	; If the visual POW value is less than the target, increase the bar.
	jp   c, .ltTarget1P	; VisualPOW < Target? If so, jump
	; Otherwise, POW > Target. Decrease the POW bar.
.gtTarget1P:
	; If we're decreasing the bar from $28, it means the MAXIMUM POW effect just ended.
	; That uses its own different tilemap, so replace it with the normal POW bar.
	cp   PLAY_POW_MAX			; VisualPOW == $28?
	jp   nz, .decPow1P			; If not, jump
	ld   hl, vBGPowBar1P_Left-1	; HL = Ptr to left *border* of the POW bar
	push af
		call Play_DrawFilledPowBar		; Write the normal POW tilemap
	pop  af
.decPow1P:

	; Decrease the POW bar
	ld   hl, vBGPowBar1P_Left
	ld   bc, Play_Bar_TileIdTbl_LGrow
	ld   de, Play_Bar_BGOffsetTbl_LGrow	; Use offsets 0-4
	; VisualPOW--
	dec  a
	ld   [wPlInfo_Pl1+iPlInfo_PowVisual], a
	call Play_DrawBarTip
	jp   .chk2P
.ltTarget1P:
	;
	; Increase the POW bar
	;
	ld   hl, vBGPowBar1P_Left
	ld   bc, Play_Bar_TileIdTbl_LGrow+1
	ld   de, Play_Bar_BGOffsetTbl_LGrow	; Use offsets 0-4
	inc  a
	ld   [wPlInfo_Pl1+iPlInfo_PowVisual], a
	
	;
	; If we've filled the POW bar, switch to MAXIMUM POW mode
	;
	cp   PLAY_POW_MAX 		; VisualPOW == $28?			
	jp   z, .setMaxPow1P	; If so, jump
	; Otherwise, draw the tip of the normal POW bar.
	; Like with the health bar, draw it for VisualPOW-1 for modulo reasons
	dec  a
	call Play_DrawBarTip
	jp   .chk2P
.setMaxPow1P:
	; Replace normal POW bar with "MAXIMUM" text
	ld   hl, vBGPowBar1P_Left-1 ; Left corner 
	call Play_DrawMaximumText
	; Set final bar info
	ld   bc, wPlInfo_Pl1
	ld   de, Play_MaxPowBGPtrTbl_1P
	call Play_PlSetMaxPowInfo
	
	;
	; Prepare the scroll-in to the right.
	;
	
	; Enable scroll-in for the 1P bar
	ld   hl, wPlayMaxPowScroll1P
	ld   a, PLAY_MAXPOWFADE_IN
	ldi  [hl], a
	; Set initial BG offset for the effect.
	; As the bar moves to the right, this points to its right corner, which is always $00 here.
	ld   a, $00			; wPlayMaxPowScrollBGOffset1P
	ldi  [hl], a
	; Move right for $0A frames.
	ld   a, $0A			; wPlayMaxPowScrollTimer1P
	ld   [hl], a
	jp   .chk2P
	
.maxPow1P:
	; Check if the MAX power bar is moving in or out
	ld   a, [wPlayMaxPowScroll1P]
	cp   PLAY_MAXPOWFADE_IN		; Scrolling on-screen the MAX power bar?
	jp   z, .maxPowScrollIn1P	; If so, jump
	cp   PLAY_MAXPOWFADE_OUT	; Scrolling off-screen the MAX power bar?
	jp   z, .maxPowScrollOut1P	; If so, jump
	
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPow]
	ld   b, a									; B = Target MaxPow
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPowVisual]	; A = Visual MaxPow
	cp   a, b
	jp   z, .chk2P		; VisualMaxPow == Target? If so, skip
	; [TCRF] The MAX power bar always shrinks slowly and never grows.
	;        In case it is, don't do anything.
	jp   c, .unused_ltTargetMax1P	; VisualMaxPow < Target? If so, skip
	
	; Otherwise, VisualMaxPow > Target.
.gtTargetMax1P:

	;
	; Decrease the MAX power bar.
	;
	
	; Prepare the args for Play_DrawBarTip
	push af
		; HL = Ptr to start of MAX power bar in tilemap
		ld   hl, wPlInfo_Pl1+iPlInfo_MaxPowBGPtr_High
		ldi  a, [hl]	; D = iPlInfo_MaxPowBGPtr_High
		ld   d, a
		ld   a, [hl]	; E = iPlInfo_MaxPowBGPtr_Low
		ld   e, a
		push de			; Move to HL
		pop  hl
	pop  af
	ld   bc, Play_Bar_TileIdTbl_LGrow	; BC = Tile ID table (bytes 0-8)
	ld   de, Play_Bar_BGOffsetTbl_LGrow	; DE = Tilemap offset table (bytes 0-x)
	
	; VisualMaxPOW--
	dec  a
	ld   [wPlInfo_Pl1+iPlInfo_MaxPowVisual], a
	call Play_DrawBarTip
	
	;
	; If the MAX power bar is visually empty now, start the animation
	; to move it off-screen to the left.
	;
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPowVisual]
	cp   $00			; VisualMaxPOW == 0?
	jp   nz, .chk2P		; If not, skip
	
	; Set animation mode
	ld   hl, wPlayMaxPowScroll1P
	ld   a, PLAY_MAXPOWFADE_OUT		
	ldi  [hl], a	
	
	; Set offset to the left corner of the MAX pow bar.
	; As the bar can grow to the left:
	; wPlayMaxPowScrollBGOffset1P = (Max Length) - (Additional Length) - 1
	;   With the extra -1 since the entire thing is being already moved to the left.
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPowExtraLen]
	ld   b, a		
	ld   a, PLAY_MAXMODE_LENGTH4
	sub  a, b		
	dec  a					
	ldi  [hl], a			; wPlayMaxPowScrollBGOffset1P = 4 - iPlInfo_MaxPowExtraLen - 1
	; Move it left for $0A frames, to make it go fully off-screen
	ld   a, $0A
	ld   [hl], a			; wPlayMaxPowScrollTimer1P = $0A
	jp   .chk2P
	
.unused_ltTargetMax1P:
	jp   .chk2P
	
.maxPowScrollIn1P:
	;
	; The 1P scroll-in effect is handled by partially redrawing the bar every frame,
	; and moving it right $0A times.
	;
	ld   a, [wPlayMaxPowScrollBGOffset1P]
	ld   e, a							; E = Bar Origin (in tiles)
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPowExtraLen]
	add  a, PLAY_MAXMODE_BASELENGTH		; B = iPlInfo_MaxPowExtraLen + $04
	ld   b, a
	ld   c, $DF							; C = Filled bar tile ID
	call Play_DrawMaxPowBarFromR
	
	;
	; Move bar to the right by 1 tile for the next time we get here
	; When this is repeated for the last time, the bar should be
	; in the same position that the previously set iPlInfo_MaxPowBGPtr expects it to be.
	;
	ld   hl, wPlayMaxPowScrollBGOffset1P
	inc  [hl]
	; Decrease scroll counter
	inc  hl			; Seek to wPlayMaxPowScrollTimer1P
	dec  [hl]		; Counter == 0?
	jp   nz, .chk2P	; If not, jump
	
	; Otherwise, we're done moving the bar
	ld   a, PLAY_MAXPOWFADE_NONE	; Disable fade
	ld   [wPlayMaxPowScroll1P], a
	ld   a, SCT_MAXPOWSTART			; Play max power SFX
	call HomeCall_Sound_ReqPlayExId
	jp   .chk2P
	
.maxPowScrollOut1P:
	;
	; Move the max pow bar to the left, until it goes off-screen.
	;
	ld   a, [wPlayMaxPowScrollBGOffset1P]
	ld   e, a						; E = Bar Origin (in tiles)
	ld   a, [wPlInfo_Pl1+iPlInfo_MaxPowExtraLen]
	add  a, PLAY_MAXMODE_BASELENGTH	; B = iPlInfo_MaxPowExtraLen + $04
	ld   b, a
	ld   c, $E0						; C = Empty bar tile ID
	call Play_DrawMaxPowBarFromL
	
	; Move bar to the left by 1 tile for the next time we get here
	ld   hl, wPlayMaxPowScrollBGOffset1P
	dec  [hl]
	; Decrease scroll counter
	inc  hl			; Seek to wPlayMaxPowScrollTimer1P
	dec  [hl]		; Counter == 0?
	jp   nz, .chk2P	; If not, jump
	; Otherwise, we're done moving the bar
	ld   a, PLAY_MAXPOWFADE_NONE
	ld   [wPlayMaxPowScroll1P], a		; Stop moving the bar
	ld   [wPlInfo_Pl1+iPlInfo_MaxPowExtraLen], a ; Return to normal POW display
	; Reset *actual POW* value to $00, forcing the POW bar to deplete from the previous
	; filled state to empty.
	ld   [wPlInfo_Pl1+iPlInfo_Pow], a
	jp   .chk2P
	
.chk2P:
	
	; In max power mode, a different bar is handled.
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowExtraLen]
	cp   PLAY_MAXMODE_NONE		; In Max Power mode? (!= $00)
	jp   nz, .maxPow2P			; If so, jump
	
	ld   a, [wPlInfo_Pl2+iPlInfo_Pow]
	ld   b, a								; B = Target POW
	ld   a, [wPlInfo_Pl2+iPlInfo_PowVisual]	; A = Visual POW
	cp   a, b
	; If nothing changes, skip to checking the 2P POW bar
	jp   z, .ret		; VisualPOW == Target? If so, jump
	; If the visual POW value is less than the target, increase the bar.
	jp   c, .ltTarget2P	; VisualPOW < Target? If so, jump
	; Otherwise, POW > Target. Decrease the POW bar.
.gtTarget2P:
	; If we're decreasing the bar from $28, it means the MAXIMUM POW effect just ended.
	; That uses its own different tilemap, so replace it with the normal POW bar.
	cp   PLAY_POW_MAX			; VisualPOW == $28?
	jp   nz, .decPow2P			; If not, jump
	ld   hl, vBGPowBar2P_Left-1	; HL = Ptr to left *border* of the POW bar
	push af
		call Play_DrawFilledPowBar		; Write the normal POW tilemap
	pop  af
.decPow2P:
	; Decrease the POW bar.
	ld   hl, vBGPowBar2P_Left
	ld   bc, Play_Bar_TileIdTbl_RGrow
	ld   de, Play_Bar_BGOffsetTbl_RGrow+4	; Use offsets 4-8 (due to the reverse order of Play_Bar_BGOffsetTbl_RGrow)
	; VisualPOW--
	dec  a
	ld   [wPlInfo_Pl2+iPlInfo_PowVisual], a
	call Play_DrawBarTip
	jp   .ret
.ltTarget2P:
	;
	; Increase the POW bar
	;
	ld   hl, vBGPowBar2P_Left
	ld   bc, Play_Bar_TileIdTbl_RGrow+1
	ld   de, Play_Bar_BGOffsetTbl_RGrow+4	; Use offsets 4-8
	inc  a
	ld   [wPlInfo_Pl2+iPlInfo_PowVisual], a
	;
	; If we've filled the POW bar, switch to MAXIMUM POW mode
	;
	cp   PLAY_POW_MAX 		; VisualPOW == $28?			
	jp   z, .setMaxPow2P	; If so, jump
	; Otherwise, draw the tip of the normal POW bar.
	; Like with the health bar, draw it for VisualPOW-1 for modulo reasons
	dec  a
	call Play_DrawBarTip
	jp   .ret
.setMaxPow2P:
	; Replace normal POW bar with "MAXIMUM" text
	ld   hl, vBGPowBar2P_Left-1 ; Left corner 
	call Play_DrawMaximumText
	; Set final bar info
	ld   bc, wPlInfo_Pl2
	ld   de, Play_MaxPowBGPtrTbl_2P
	call Play_PlSetMaxPowInfo
	
	;
	; Prepare the scroll-in to the left.
	;
	
	; Enable scroll-in for the 2P bar
	ld   hl, wPlayMaxPowScroll2P
	ld   a, PLAY_MAXPOWFADE_IN
	ldi  [hl], a
	; Set initial BG offset for the effect.
	; As the bar moves to the left, this points to its left corner, which is always $13 here.
	ld   a, (SCREEN_H/TILE_H)-1			; wPlayMaxPowScrollBGOffset2P
	ldi  [hl], a
	; Move left for $0A frames.
	ld   a, $0A			; wPlayMaxPowScrollTimer2P
	ld   [hl], a
	jp   .ret
.maxPow2P:
	; Check if the MAX power bar is moving in or out
	ld   a, [wPlayMaxPowScroll2P]
	cp   PLAY_MAXPOWFADE_IN		; Scrolling on-screen the MAX power bar?
	jp   z, .maxPowScrollIn2P	; If so, jump
	cp   PLAY_MAXPOWFADE_OUT	; Scrolling off-screen the MAX power bar?
	jp   z, .maxPowScrollOut2P	; If so, jump
	
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPow]
	ld   b, a									; B = Target MaxPow
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowVisual]	; A = Visual MaxPow
	cp   a, b
	jp   z, .ret		; VisualMaxPow == Target? If so, skip
	; [TCRF] The MAX power bar always shrinks slowly and never grows.
	;        In case it is, don't do anything.
	jp   c, .unused_ltTargetMax2P	; VisualMaxPow < Target? If so, skip
	
	; Otherwise, VisualMaxPow > Target.
.gtTargetMax2P:

	;
	; Decrease the MAX power bar.
	;
	push af
		; HL = Ptr to start of MAX power bar in tilemap
		ld   hl, wPlInfo_Pl2+iPlInfo_MaxPowBGPtr_High
		ldi  a, [hl]	; D = iPlInfo_MaxPowBGPtr_High
		ld   d, a
		ld   a, [hl]	; E = iPlInfo_MaxPowBGPtr_Low
		ld   e, a
		push de			; Move to HL
		pop  hl
	pop  af
	
	ld   bc, Play_Bar_TileIdTbl_RGrow	; BC = Tile ID table
	
	; Determine the starting ptr to the tilemap offset table.
	push af
		; Start with byte range 4-8 (5 bytes) as entries are right-aligned.
		; For any extension to the bar, decrement the starting offset by 1.
		ld   de, Play_Bar_BGOffsetTbl_RGrow+4  
		
		ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowExtraLen]
		cp   PLAY_MAXMODE_LENGTH1	; No extra length?
		jp   z, .setVisual2P		; If so, jump
		dec  de						; Otherwise, byte range is 3-8
		cp   PLAY_MAXMODE_LENGTH2	; 1 additional tile?
		jp   z, .setVisual2P		; If so, jump
		dec  de						; Otherwise, byte range is 2-8
		cp   PLAY_MAXMODE_LENGTH3	; 2 additional tiles?
		jp   z, .setVisual2P		; If so, jump
		dec  de						; Otherwise, byte range is 1-8
	.setVisual2P:
	pop  af
	
	; VisualMaxPOW--
	dec  a
	ld   [wPlInfo_Pl2+iPlInfo_MaxPowVisual], a
	call Play_DrawBarTip
	
	;
	; If the MAX power bar is visually empty now, start the animation
	; to move it off-screen to the right.
	;
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowVisual]
	cp   $00			; VisualMaxPOW == 0?
	jp   nz, .ret		; If not, skip
	
	; Set animation mode
	ld   hl, wPlayMaxPowScroll2P
	ld   a, PLAY_MAXPOWFADE_OUT		
	ldi  [hl], a	
	
	; Set initial bar offset for the effect. 
	; On the 2P side, this is the right corner of the bar.
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowExtraLen]
	add  a, $10
	ldi  [hl], a	; wPlayMaxPowScrollBGOffset2P = $10 + iPlInfo_MaxPowExtraLen
	; Move it right for $0A frames, to make it go fully off-screen
	ld   a, $0A
	ld   [hl], a	; wPlayMaxPowScrollTimer2P = $0A
	jp   .ret
.unused_ltTargetMax2P:
	jp   .ret
.maxPowScrollIn2P:
	;
	; The 2P scroll-in effect is handled by partially redrawing the bar every frame,
	; and moving it left $0A times.
	;
	ld   a, [wPlayMaxPowScrollBGOffset2P]
	ld   e, a							; E = Bar Origin (in tiles)
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowExtraLen]
	add  a, PLAY_MAXMODE_BASELENGTH		; B = iPlInfo_MaxPowExtraLen + $04
	ld   b, a
	ld   c, $DF							; C = Filled bar tile ID
	call Play_DrawMaxPowBarFromL
	
	;
	; Move bar to the left by 1 tile for the next time we get here.
	; When this is repeated for the last time, the bar should be
	; in the same position that the previously set iPlInfo_MaxPowBGPtr expects it to be.
	;
	ld   hl, wPlayMaxPowScrollBGOffset2P
	dec  [hl]
	; Decrease scroll counter
	inc  hl			; Seek to wPlayMaxPowScrollTimer2P
	dec  [hl]		; Counter == 0?
	jp   nz, .ret	; If not, jump
	
	; Otherwise, we're done moving the bar
	ld   a, PLAY_MAXPOWFADE_NONE	; Disable fade
	ld   [wPlayMaxPowScroll2P], a
	ld   a, SCT_MAXPOWSTART			; Play max power SFX
	call HomeCall_Sound_ReqPlayExId
	jp   .ret
	
.maxPowScrollOut2P:
	;
	; Move the max pow bar to the right, until it goes off-screen.
	;
	ld   a, [wPlayMaxPowScrollBGOffset2P]
	ld   e, a						; E = Bar Origin (in tiles)
	ld   a, [wPlInfo_Pl2+iPlInfo_MaxPowExtraLen]
	add  a, PLAY_MAXMODE_BASELENGTH	; B = iPlInfo_MaxPowExtraLen + $04
	ld   b, a
	ld   c, $E0						; C = Empty bar tile ID
	call Play_DrawMaxPowBarFromR
	
	; Move bar to the right by 1 tile for the next time we get here
	ld   hl, wPlayMaxPowScrollBGOffset2P
	inc  [hl]
	; Decrease scroll counter
	inc  hl			; Seek to wPlayMaxPowScrollTimer2P
	dec  [hl]		; Counter == 0?
	jp   nz, .ret	; If not, jump
	; Otherwise, we're done moving the bar
	ld   a, PLAY_MAXPOWFADE_NONE
	ld   [wPlayMaxPowScroll2P], a		; Stop moving the bar
	ld   [wPlInfo_Pl2+iPlInfo_MaxPowExtraLen], a ; Return to normal POW display
	; Reset *actual POW* value to $00, forcing the POW bar to deplete from the previous
	; filled state to empty.
	ld   [wPlInfo_Pl2+iPlInfo_Pow], a
	jp   .ret
	
.ret:
	ret
	
; =============== Play_DrawMaxPowBarFromR ===============
; Draws part of the MAX Power bar from right to left,
; intended to be used when doing the scroll animation.
; IN
; - E: Offset to the right corner of the bar, relative to wBGMaxPowBarRow
; - B: Bar content length (in tiles)
; - C: Tile ID for the bar contents.
Play_DrawMaxPowBarFromR:
	;
	; Sign extend E to DE
	;
	ld   d, $00		
	bit  7, e		; E < 0?
	jp   z, .draw	; If not, jump
	ld   d, $FF 	; We never get here?
	
.draw:

	; Only the 4 edges need to be updated to move the bar.

	; Draw right corner
	ld   a, $D3		; A = $D3
	call Play_WriteTileToMaxPowBar
	dec  de			; Seek left in tilemap
	
	; Draw bar content
	ld   a, c
	call Play_WriteTileToMaxPowBar
	
	;
	; Seek to the left corner of the bar by subtracting
	; the bar length to the tilemap ptr.
	;
	; DE -= B (Bar length)
	;
	
	; HL = B
	ld   h, $00	
	ld   l, b
	; Convert HL to negative
	; H = ^H (flip bits)
	ld   a, h	
	cpl
	ld   h, a
	; L = -L (invert L)
	ld   a, l	
	cpl
	ld   l, a
	inc  l		
	; If this overflowed to 0, increase H
	jp   nz, .setOffset
	inc  h ; We never get here
.setOffset:
	; Add that negative offset to HL, then move it to DE
	add  hl, de	
	push hl
	pop  de
	
	; Draw left corner
	ld   a, $D2
	call Play_WriteTileToMaxPowBar
	dec  de
	
	; Draw empty tile, to clear out the left corner of the previous frame
	ld   a, $00
	call Play_WriteTileToMaxPowBar
	ret
	
; =============== Play_DrawMaxPowBarFromL ===============
; Draws part of the MAX Power bar from *left* to *right*,
; intended to be used when doing the scroll animation.
; See also: Play_DrawMaxPowBarFromR
; IN
; - E: Offset to the *left* corner of the bar, relative to wBGMaxPowBarRow
; - B: Bar content length (in tiles)
; - C: Tile ID for the bar contents.
Play_DrawMaxPowBarFromL:
	;
	; Sign extend E to DE
	;
	ld   d, $00		
	bit  7, e		; E < 0?
	jp   z, .draw	; If not, jump
	ld   d, $FF 	; We never get here?
	
.draw:
	; Draw left corner
	ld   a, $D2
	call Play_WriteTileToMaxPowBar
	inc  de
	
	; Draw bar content
	ld   a, c
	call Play_WriteTileToMaxPowBar
	
	; Seek to the right corner of the bar
	; DE += B
	ld   h, $00
	ld   l, b
	add  hl, de
	push hl
	pop  de
	
	; Draw right corner
	ld   a, $D3
	call Play_WriteTileToMaxPowBar
	inc  de
	
	; Draw empty tile
	ld   a, $00
	call Play_WriteTileToMaxPowBar
	ret
	
; =============== Play_WriteTileToMaxPowBar ===============
; Writes a tile to the tilemap for the MAX power bar.
; IN
; - A: Tile ID
; - DE: Tilemap offset, relative to wBGMaxPowBarRow
Play_WriteTileToMaxPowBar:
	; Don't write off-screen tiles.
	; This is checked because the scroll-in/scroll-out animation
	; makes the bar move from or to the off-screen area.
	push af
		ld   a, e			
		bit  7, a				; DE < 0?
		jp   nz, .popRet		; If so, return
		cp   SCREEN_H/TILE_H	; DE >= $14?
		jp   nc, .popRet		; If so, return
	pop  af
	
	; Get ptr to tilemap
	ld   hl, wBGMaxPowBarRow	; HL = wBGMaxPowBarRow + DE
	add  hl, de
	
	; Wait for VRAM to be writable
	push af
		di
		mWaitForVBlankOrHBlank
	pop  af
	
	; Write to the tilemap
	ld   [hl], a
	ei
	jp   .ret
.popRet:
	pop  af
.ret:
	ret
	
L017B83: db $E5;X
L017B84: db $FA;X
L017B85: db $6C;X
L017B86: db $C1;X
L017B87: db $16;X
L017B88: db $00;X
L017B89: db $5F;X
L017B8A: db $F5;X
L017B8B: db $19;X
L017B8C: db $F3;X
L017B8D: db $F0;X
L017B8E: db $41;X
L017B8F: db $CB;X
L017B90: db $4F;X
L017B91: db $C2;X
L017B92: db $8D;X
L017B93: db $7B;X
L017B94: db $3E;X
L017B95: db $DF;X
L017B96: db $22;X
L017B97: db $FB;X
L017B98: db $F3;X
L017B99: db $F0;X
L017B9A: db $41;X
L017B9B: db $CB;X
L017B9C: db $4F;X
L017B9D: db $C2;X
L017B9E: db $99;X
L017B9F: db $7B;X
L017BA0: db $3E;X
L017BA1: db $D3;X
L017BA2: db $77;X
L017BA3: db $FB;X
L017BA4: db $21;X
L017BA5: db $55;X
L017BA6: db $00;X
L017BA7: db $09;X
L017BA8: db $7E;X
L017BA9: db $C6;X
L017BAA: db $04;X
L017BAB: db $47;X
L017BAC: db $F1;X
L017BAD: db $E1;X
L017BAE: db $90;X
L017BAF: db $DA;X
L017BB0: db $D5;X
L017BB1: db $7B;X
L017BB2: db $16;X
L017BB3: db $00;X
L017BB4: db $5F;X
L017BB5: db $19;X
L017BB6: db $F5;X
L017BB7: db $F3;X
L017BB8: db $F0;X
L017BB9: db $41;X
L017BBA: db $CB;X
L017BBB: db $4F;X
L017BBC: db $C2;X
L017BBD: db $B8;X
L017BBE: db $7B;X
L017BBF: db $3E;X
L017BC0: db $D2;X
L017BC1: db $32;X
L017BC2: db $FB;X
L017BC3: db $F1;X
L017BC4: db $FE;X
L017BC5: db $00;X
L017BC6: db $CA;X
L017BC7: db $D5;X
L017BC8: db $7B;X
L017BC9: db $F3;X
L017BCA: db $F0;X
L017BCB: db $41;X
L017BCC: db $CB;X
L017BCD: db $4F;X
L017BCE: db $C2;X
L017BCF: db $CA;X
L017BD0: db $7B;X
L017BD1: db $3E;X
L017BD2: db $00;X
L017BD3: db $77;X
L017BD4: db $FB;X
L017BD5: db $FA;X
L017BD6: db $6C;X
L017BD7: db $C1;X
L017BD8: db $3C;X
L017BD9: db $EA;X
L017BDA: db $6C;X
L017BDB: db $C1;X
L017BDC: db $FE;X
L017BDD: db $09;X
L017BDE: db $C2;X
L017BDF: db $E6;X
L017BE0: db $7B;X
L017BE1: db $3E;X
L017BE2: db $00;X
L017BE3: db $EA;X
L017BE4: db $6B;X
L017BE5: db $C1;X
L017BE6: db $C9;X
L017BE7: db $21;X
L017BE8: db $56;X
L017BE9: db $00;X
L017BEA: db $09;X
L017BEB: db $2A;X
L017BEC: db $57;X
L017BED: db $7E;X
L017BEE: db $5F;X
L017BEF: db $D5;X
L017BF0: db $E1;X
L017BF1: db $2B;X
L017BF2: db $E5;X
L017BF3: db $FA;X
L017BF4: db $6C;X
L017BF5: db $C1;X
L017BF6: db $16;X
L017BF7: db $00;X
L017BF8: db $5F;X
L017BF9: db $F5;X
L017BFA: db $19;X
L017BFB: db $F3;X
L017BFC: db $F0;X
L017BFD: db $41;X
L017BFE: db $CB;X
L017BFF: db $4F;X
L017C00: db $C2;X
L017C01: db $FC;X
L017C02: db $7B;X
L017C03: db $3E;X
L017C04: db $DF;X
L017C05: db $22;X
L017C06: db $FB;X
L017C07: db $F3;X
L017C08: db $F0;X
L017C09: db $41;X
L017C0A: db $CB;X
L017C0B: db $4F;X
L017C0C: db $C2;X
L017C0D: db $08;X
L017C0E: db $7C;X
L017C0F: db $3E;X
L017C10: db $D3;X
L017C11: db $77;X
L017C12: db $FB;X
L017C13: db $21;X
L017C14: db $55;X
L017C15: db $00;X
L017C16: db $09;X
L017C17: db $7E;X
L017C18: db $C6;X
L017C19: db $04;X
L017C1A: db $47;X
L017C1B: db $F1;X
L017C1C: db $E1;X
L017C1D: db $90;X
L017C1E: db $DA;X
L017C1F: db $44;X
L017C20: db $7C;X
L017C21: db $16;X
L017C22: db $00;X
L017C23: db $5F;X
L017C24: db $19;X
L017C25: db $F5;X
L017C26: db $F3;X
L017C27: db $F0;X
L017C28: db $41;X
L017C29: db $CB;X
L017C2A: db $4F;X
L017C2B: db $C2;X
L017C2C: db $27;X
L017C2D: db $7C;X
L017C2E: db $3E;X
L017C2F: db $D2;X
L017C30: db $32;X
L017C31: db $FB;X
L017C32: db $F1;X
L017C33: db $FE;X
L017C34: db $00;X
L017C35: db $CA;X
L017C36: db $44;X
L017C37: db $7C;X
L017C38: db $F3;X
L017C39: db $F0;X
L017C3A: db $41;X
L017C3B: db $CB;X
L017C3C: db $4F;X
L017C3D: db $C2;X
L017C3E: db $39;X
L017C3F: db $7C;X
L017C40: db $3E;X
L017C41: db $00;X
L017C42: db $77;X
L017C43: db $FB;X
L017C44: db $FA;X
L017C45: db $6C;X
L017C46: db $C1;X
L017C47: db $3C;X
L017C48: db $EA;X
L017C49: db $6C;X
L017C4A: db $C1;X
L017C4B: db $FE;X
L017C4C: db $09;X
L017C4D: db $C2;X
L017C4E: db $55;X
L017C4F: db $7C;X
L017C50: db $3E;X
L017C51: db $00;X
L017C52: db $EA;X
L017C53: db $6B;X
L017C54: db $C1;X
L017C55: db $C9;X
L017C56: db $21;X
L017C57: db $56;X
L017C58: db $00;X
L017C59: db $09;X
L017C5A: db $2A;X
L017C5B: db $57;X
L017C5C: db $7E;X
L017C5D: db $5F;X
L017C5E: db $D5;X
L017C5F: db $E1;X
L017C60: db $2B;X
L017C61: db $F3;X
L017C62: db $F0;X
L017C63: db $41;X
L017C64: db $CB;X
L017C65: db $4F;X
L017C66: db $C2;X
L017C67: db $62;X
L017C68: db $7C;X
L017C69: db $3E;X
L017C6A: db $D2;X
L017C6B: db $22;X
L017C6C: db $FB;X
L017C6D: db $E5;X
L017C6E: db $21;X
L017C6F: db $55;X
L017C70: db $00;X
L017C71: db $09;X
L017C72: db $7E;X
L017C73: db $E1;X
L017C74: db $C6;X
L017C75: db $04;X
L017C76: db $47;X
L017C77: db $F3;X
L017C78: db $F0;X
L017C79: db $41;X
L017C7A: db $CB;X
L017C7B: db $4F;X
L017C7C: db $C2;X
L017C7D: db $78;X
L017C7E: db $7C;X
L017C7F: db $3E;X
L017C80: db $DF;X
L017C81: db $22;X
L017C82: db $FB;X
L017C83: db $05;X
L017C84: db $C2;X
L017C85: db $77;X
L017C86: db $7C;X
L017C87: db $F3;X
L017C88: db $F0;X
L017C89: db $41;X
L017C8A: db $CB;X
L017C8B: db $4F;X
L017C8C: db $C2;X
L017C8D: db $88;X
L017C8E: db $7C;X
L017C8F: db $3E;X
L017C90: db $D3;X
L017C91: db $22;X
L017C92: db $FB;X
L017C93: db $C9;X
L017C94: db $06;X
L017C95: db $0A;X
L017C96: db $F3;X
L017C97: db $F0;X
L017C98: db $41;X
L017C99: db $CB;X
L017C9A: db $4F;X
L017C9B: db $C2;X
L017C9C: db $97;X
L017C9D: db $7C;X
L017C9E: db $3E;X
L017C9F: db $00;X
L017CA0: db $22;X
L017CA1: db $FB;X
L017CA2: db $05;X
L017CA3: db $C2;X
L017CA4: db $96;X
L017CA5: db $7C;X
L017CA6: db $C9;X

; =============== Play_PlSetMaxPowInfo ===============
; Sets the final length of the MAX Power bar for the specified player.
; - BC: Ptr to wPlInfo struct
; - DE: Ptr to ptr table of iPlInfo_MaxPowBGPtr
Play_PlSetMaxPowInfo:
	;
	; The MAX Power bar is longer when the player has less health.
	;
	
	; A = Current health
	ld   hl, iPlInfo_Health
	add  hl, bc		
	ld   a, [hl]
	
	ld   hl, iPlInfo_MaxPow
	add  hl, bc		; Seek to max power for writing
	
	cp   $08		; Health < $08?
	jp   c, .lv4	; If so, jump
	cp   $18		; Health < $18?
	jp   c, .lv3	; If so, jump
	cp   $30		; Health < $30?
	jp   c, .lv2	; If so, jump
	
.lv1:
	; Otherwise, HP >= $30.
	ld   [hl], $28	; iPlInfo_MaxPow
	inc  hl
	ld   [hl], $28	; iPlInfo_MaxPowVisual
	inc  hl
	ld   [hl], $01	; iPlInfo_MaxPowExtraLen
	; Use for ptr table offset 0
	jp   .setBGPtr
.lv2:
	ld   [hl], $30	; iPlInfo_MaxPow
	inc  hl
	ld   [hl], $30	; iPlInfo_MaxPowVisual
	inc  hl
	ld   [hl], $02	; iPlInfo_MaxPowExtraLen
	; Use for ptr table offset 2
	inc  de
	inc  de
	jp   .setBGPtr
.lv3:
	ld   [hl], $38	; iPlInfo_MaxPow
	inc  hl
	ld   [hl], $38	; iPlInfo_MaxPowVisual
	inc  hl
	ld   [hl], $03	; iPlInfo_MaxPowExtraLen
	; Use for ptr table offset 4
	inc  de
	inc  de
	inc  de
	inc  de
	jp   .setBGPtr
.lv4:
	ld   [hl], $40	; iPlInfo_MaxPow
	inc  hl
	ld   [hl], $40	; iPlInfo_MaxPowVisual
	inc  hl
	ld   [hl], $04	; iPlInfo_MaxPowExtraLen
	; Use for ptr table offset 6
	inc  de
	inc  de
	inc  de
	inc  de
	inc  de
	inc  de
.setBGPtr:

	; Copy the entry from the table to iPlInfo_MaxPowBGPtr.
	; This will be the *final* origin of the Max POW bar used after it finishes scrolling on-screen.
	; This always points to the leftmost usable tile (see: not the corner tile) of the bar.
	
	; This is also stored as big endian on the wPlInfo, so more ldd usage.
	inc  hl			; Seek to iPlInfo_MaxPowBGPtr_High
	inc  hl 		; Seek to iPlInfo_MaxPowBGPtr_Low
	ld   a, [de]	; Read byte0 of entry
	inc  de
	ldd  [hl], a	; Write to iPlInfo_MaxPowBGPtr_Low, seek to iPlInfo_MaxPowBGPtr_High
	ld   a, [de]	; Read byte1 of entry
	ld   [hl], a	; Write to iPlInfo_MaxPowBGPtr_High
	ret
Play_MaxPowBGPtrTbl_1P:
	dw $9CA4 ; PLAY_MAXMODE_LENGTH1
	dw $9CA3 ; PLAY_MAXMODE_LENGTH2
	dw $9CA2 ; PLAY_MAXMODE_LENGTH3
	dw $9CA1 ; PLAY_MAXMODE_LENGTH4
Play_MaxPowBGPtrTbl_2P:
	dw $9CAB ; PLAY_MAXMODE_LENGTH1
	dw $9CAB ; PLAY_MAXMODE_LENGTH2
	dw $9CAB ; PLAY_MAXMODE_LENGTH3
	dw $9CAB ; PLAY_MAXMODE_LENGTH4

; =============== Play_DrawFilledPowBar ===============
; Draws a completely filled POW bar.
; Meant to be used when redrawing the POW bar after Max POW mode ends,
; since it's always visually full the first frame (only to deplete immediately).
; IN
; - HL: Ptr to left corner of bar in tilemap
Play_DrawFilledPowBar:

	; Left corner
	di
	mWaitForVBlankOrHBlank
	ld   a, $D2
	ldi  [hl], a
	ei
	
	; Filled bar tiles
	ld   b, $05		; B = Bar length (5 tiles)
.loop:
	di
	mWaitForVBlankOrHBlank
	ld   a, $DF
	ldi  [hl], a
	ei
	dec  b			; Copied all tiles?
	jp   nz, .loop	; If not, loop
	
	; Right corner
	di
	mWaitForVBlankOrHBlank
	ld   a, $D3
	ldi  [hl], a
	ei
	ret
	
; =============== Play_DrawMaximumText ===============
; Draws the "MAXIMUM" text, replacing a normal POW bar.
; IN
; - HL: Ptr to tilemap
Play_DrawMaximumText:
	di
	mWaitForVBlankOrHBlank
	ld   a, $D8 ; M
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	ld   a, $D9 ; A
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	ld   a, $DA ; X
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	ld   a, $DB ; IM
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	ld   a, $DC ; M
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	ld   a, $DD ; U
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	ld   a, $DE ; M
	ld   [hl], a
	ei
	ret
	
	
; =============== Play_DoTime ===============
; Handles the round timer during gameplay.
Play_DoTime:

	;
	; There's a gauntlet of checks before we're allowed to draw the timer or decrement a timer digit.
	;
	
	ld   a, [wRoundTime]
	or   a						; Time Over?
	jp   z, Play_NoDrawTime		; If so, return
	cp   TIMER_INFINITE			; Is the timer set to infinite?
	jp   z, Play_NoDrawTime		; If so, return
	
	; If any player lost (has no health), constantly redraw the current time
	ld   a, [wPlInfo_Pl1+iPlInfo_Health]
	or   a						
	jp   z, Play_DrawTime
	ld   a, [wPlInfo_Pl2+iPlInfo_Health]
	or   a
	jp   z, Play_DrawTime
	
	; If we're in a scene with controls disabled (ie: intro), return
	ld   hl, wMisc_C027
	bit  MISCB_PLAY_STOP, [hl]
	jp   nz, Play_NoDrawTime
	
	; Decrement subsecond counter.
	; If it reaches 0, jump and decrement the seconds too.
	ld   hl, wRoundTimeSub
	dec  [hl]
	jp   z, .decTime
	
	; The rest is to handle the timer flashing with 10 or less seconds.
	ld   a, [wRoundTime]
	cp   $11				; Timer < 11?
	jp   c, .flashTime			; If so, jump
	jp   Play_NoDrawTime	; Otherwise, return
.flashTime:
	; Show/hide the timer every 4 frames
	ld   a, [wPlayTimer]
	bit  2, a				; wPlayTimer & 4 == 0?
	jp   nz, .flashTimeShow	; If not, jump
.flashTimeHide:
	; Replace the two timer digits in the tilemap with blank tiles
	ld   hl, vBGRoundTime
	di
	mWaitForVBlankOrHBlank
	xor  a
	ldi  [hl], a
	mWaitForVBlankOrHBlank
	xor  a
	ld   [hl], a
	ei
	jp   Play_NoDrawTime
.flashTimeShow:
	; Redraw the timer normally
	jp   Play_DrawTime
.decTime:
	; wRoundTime--
	ld   a, [wRoundTime]
	sub  a, $01
	daa
	ld   [wRoundTime], a
	; Reset counter to 60 frames
	ld   a, 60
	ld   [wRoundTimeSub], a
	jp   Play_DrawTime
	
; =============== Play_DrawTime ===============
; Draws the round timer in the HUD.
Play_DrawTime:
	ld   hl, vBGRoundTime			; HL = Ptr to high digit in the tilemap
	
	;
	; Get the tile ID for the upper nybble.
	; As the round timer is in BCD format, it can be done by isolating the upper nybble
	; and then using it as index to a number -> tileID table.
	;
	
	ld   a, [wRoundTime]		; A  = Time
	ld   de, Play_HUDTileIdTbl	; DE = Tile ID table
	; Generate index
	swap a				; A = A >> 4
	and  a, $0F	 
	; Index the map table
	add  a, e			; DE += A
	ld   e, a
	; Write it to the tilemap
	di
	mWaitForVBlankOrHBlank
	ld   a, [de]		; Read tile ID
	ldi  [hl], a		; Write it over, VRAMPtr++
	ei
	
	;
	; Do the same for the lower digit.
	;
	ld   a, [wRoundTime]		; A  = Time
	ld   de, Play_HUDTileIdTbl	; DE = Tile ID table
	; Generate index
	and  a, $0F			; A = A & $0F
	; Index the map table
	add  a, e			; DE += A
	ld   e, a
	; Write it to the tilemap
	di
	mWaitForVBlankOrHBlank
	ld   a, [de]		; Read tile ID
	ld   [hl], a		; Write it over
	ei
	; Fall-through
	
; =============== Play_NoDrawTime ===============
; Target used to skip writing the time.
Play_NoDrawTime:
	ret
	
; =============== Play_UpdateHUDHitCount ===============
; Checks if the number of combo hits to the HUD should be updated.
Play_UpdateHUDHitCount:

	;
	; Note that the hit counter is displayed to the OTHER player's side.
	;
	; This is because we want to display how many hits a player dishes out, however what
	; the hit count variable actually tracks is how many hits the player *received*.
	;
	; ie: the iPlInfo_HitComboRecv field on 1P tracks 2P's combo.
	;
	
	; Don't redraw the hit combo counter if the current value didn't change.
	ld   hl, $9C6B									; HL = Ptr to tilemap (2P side)
	ld   a, [wPlInfo_Pl1+iPlInfo_HitComboRecv]		; B = Previous hit count
	ld   b, a
	ld   a, [wPlInfo_Pl1+iPlInfo_HitComboRecvSet]	; A = New hit count
	cp   a, b										; Do they match?
	jp   z, .noChg1P								; If so, jump
.chg1P:
	; Otherwise, update the tilemap.
	ld   [wPlInfo_Pl1+iPlInfo_HitComboRecv], a
	call Play_DrawHitCountBG
	jp   .chk2P
.noChg1P:
	; Weirdly, the check to clear the combo counter is done here,
	; when HitComboRecv and HitComboRecvSet don't match.
	; This causes it to execute and redraw the screen every time the hit counter is $02,
	; instead of only doing it when HitComboRecvSet changes.
	cp   $02					; NewCount >= $02?
	jp   nc, .chk2P				; If so, jump
	call Play_BlankHitCountBG	; Otherwise, wipe the hit counter.
.chk2P:

	;
	; Same thing for Player 2
	;
	ld   hl, $9C65									; HL = Ptr to tilemap (1P side)
	ld   a, [wPlInfo_Pl2+iPlInfo_HitComboRecv]		; B = Previous hit count
	ld   b, a										
	ld   a, [wPlInfo_Pl2+iPlInfo_HitComboRecvSet]	; A = New hit count
	cp   a, b										; Do they match?
	jp   z, .noChg2P								; If so, jump
.chg2P:
	; Otherwise, update the tilemap.
	ld   [wPlInfo_Pl2+iPlInfo_HitComboRecv], a
	call Play_DrawHitCountBG
	jp   .end
.noChg2P:
	cp   $02					; NewCount >= $02?
	jp   nc, .end				; If so, jump
	call Play_BlankHitCountBG	; Otherwise, wipe the hit counter.
.end:
	ret
	
; =============== Play_DrawHitCountBG ===============
; Draws the hit count to the specified location, if possible.
; This is in the format of "nnHIT".
; IN
; - HL: Destination ptr to tilemap
; -  A: Hit count
Play_DrawHitCountBG:
	; Don't draw if the hit count is less than 2.
	cp   $02
	jp   c, .ret
	
	;
	; Draw upper digit (high nybble)
	;
	push af	; Save full digit
		; Separate the high nybble and use it as index
		; to a table mapping numbers to tile IDs.
		ld   de, Play_HUDTileIdTbl	; DE = Ptr to Tile ID table
		swap a			; A = A >> 4
		and  a, $0F
		; Index the table
		add  a, e		; DE += A
		ld   e, a
		di
		mWaitForVBlankOrHBlank
		ld   a, [de]	; Read tile ID from entry
		ldi  [hl], a	; Write it over, move right in tilemap
		ei
	pop  af	; Restore full digit
	
	;
	; Draw lower digit (low nybble)
	;
	ld   de, Play_HUDTileIdTbl	; DE = Ptr to Tile ID table
	and  a, $0F					; A = A & $0F
	add  a, e					; DE += A
	ld   e, a
	di
	mWaitForVBlankOrHBlank
	ld   a, [de]				; Read tile ID from entry
	ldi  [hl], a				; Write it over, move right in tilemap
	ei
	
	;
	; Draw "HIT" (2 tiles)
	;
	ld   de, BG_Play_HUDHit		; DE = Ptr to BG
	ld   b, $02					; B = BG Length
.loop:
	di
	mWaitForVBlankOrHBlank
	ld   a, [de]				; Read tile ID
	ldi  [hl], a				; Write it over, move right in tilemap
	ei
	inc  de						; Next tile ID
	dec  b						; Are we done?
	jp   nz, .loop				; If not, loop
.ret:
	ret
; =============== Play_DrawHitCountBG ===============
; Erases the hit count with black tiles from the specified location.
; IN
; - HL: Destination ptr to tilemap
Play_BlankHitCountBG:
	; Clear the bytes from HL to HL+3
	ld   a, $00		; A = TileID of black tile
	ld   b, $04		; B = Tiles to clear
.loop:
	push af
		di
		mWaitForVBlankOrHBlank
	pop  af
	ldi  [hl], a				; Blank tile, move right in tilemap
	ei	
	dec  b						; Are we done?
	jp   nz, .loop				; If not, loop
	ret
	
; =============== Play_WriteKeysToBuffer ===============
; Updates the input buffers for both players.
Play_WriteKeysToBuffer:
	; Human player only
	ld   hl, wPlInfo_Pl1+iPlInfo_Flags0
	bit  PF0B_CPU, [hl]
	jr   nz, .chk2P
	call Play_WriteDirKeysToBuffer1P
	call Play_WriteBtnKeysToBuffer1P
.chk2P:
	; Same thing for 2P
	ld   hl, wPlInfo_Pl2+iPlInfo_Flags0
	bit  PF0B_CPU, [hl]
	jr   nz, .ret
	call Play_WriteDirKeysToBuffer2P
	call Play_WriteBtnKeysToBuffer2P
.ret:
	ret
	
; =============== mWriteDirKeysToBuffer ===============
; Generates code to write the held directional keys to its wPlInfo joypad buffer.
; IN
; - 1: Ptr to wPlInfo
; - 2: Ptr to wOBJInfo
mWriteDirKeysToBuffer: MACRO
	; DE = Offset to buffer entry
	;      This must be a multiple of 2 as each entry in this table
	;      is 2 bytes long (key, timer)
	ld   d, $00
	ld   a, [\1+iPlInfo_JoyDirBufferOffset]
	ld   e, a
	
	; Write the directional keys only
	; A = Held directional keys
	ld   a, [\1+iPlInfo_JoyKeys]
	and  a, $0F
	
	;
	; Invert the left/right inputs if we're (internally) facing right.
	; For consistency with the sprite display, move inputs are stored relative to players facing left (on the 2P side).
	; 
	ld   hl, \2+iOBJInfo_OBJLstFlags
	bit  SPRXB_PLDIR_R, [hl]	; Is 1P facing right?
	jr   z, .writeToBuf			; If not, jump
	
	; Don't invert input bits if neither L nor R are held
	ld   b, a					; Save orig inputs
	and  a, KEY_LEFT|KEY_RIGHT	; Holding either left or right?
	jr   z, .noLr				; If not, jump
	ld   a, b					; Restore input bits
	xor  KEY_LEFT|KEY_RIGHT		; Invert left/right inputs
	jr   .writeToBuf
.noLr:
	ld   a, b					; Restore orig inputs as there's nothing to invert
	
.writeToBuf:
	; Seek HL to the current buffer entry
	ld   hl, \1+iPlInfo_JoyDirBuffer
	add  hl, de			; HL = iPlInfo_JoyDirBuffer + iPlInfo_JoyDirBufferOffset
	
	; If the currently held d-pad keys are the same as what's in the buffer entry,
	; continue increasing its timer.
	cp   a, [hl]		; CurKeys == BufKeys?
	jr   z, .incTimer	; If so, jump

.newKey:	
	;
	; Seek to the next buffer entry.
	;
	
	; Generate the new buffer offset from the ptr, looping back to $00 when it goes past the buffer.
	; Index = (DE + 2) & $0F 
	;
	; This works due to the buffer being aligned to a specific address and for having a specific size.
	inc  e			; DE += 2 (next entry)
	inc  e
	push af			; E &= $0F (force in range/loop to $00 if needed)
		ld   a, e	
		and  a, $0F
		ld   e, a
	pop  af
	; Seek to the new offset 
	ld   hl, \1+iPlInfo_JoyDirBuffer
	add  hl, de
	
	; Write the new keys
	ld   [hl], a
	; Initialize the timer at 1
	inc  hl
	ld   [hl], $01
	
	; Save back the new buffer offset
	ld   a, e
	ld   [\1+iPlInfo_JoyDirBufferOffset], a
	ret
.incTimer:
	; Increase timer, maxing out at $FF
	inc  hl			; Seek to timer byte
	ld   a, [hl]	
	cp   $FF		; Timer == $FF?
	ret  z			; If so, return
	inc  [hl]		; Otherwise, Timer++
	ret
ENDM

; =============== mWriteBtnKeysToBuffer ===============
; Generates code to write the held button keys to its wPlInfo joypad buffer.
; See also: mWriteDirKeysToBuffer
; IN
; - 1: Ptr to player struct
mWriteBtnKeysToBuffer: MACRO

	; This uses its own buffer, separate from the one with directional keys.

	; DE = Offset to buffer entry
	ld   d, $00
	ld   a, [\1+iPlInfo_JoyBtnBufferOffset]
	ld   e, a
	; Write the directional keys only
	ld   a, [\1+iPlInfo_JoyKeys]
	and  a, KEY_A|KEY_B
	
	; (the buttons aren't afffected by facing left/right for obvious reasons, so direct skip to .writeToBuf)
.writeToBuf:
	; Seek HL to the current buffer entry
	ld   hl, \1+iPlInfo_JoyBtnBuffer
	add  hl, de
	
	; If the currently held buttons are the same as what's in the buffer entry,
	; continue increasing its timer.
	cp   a, [hl]		; CurKeys == BufKeys?
	jr   z, .incTimer	; If so, jump
	
.newKey:	
	;
	; Seek to the next buffer entry, exactly like in the other function.
	;
	
	; Index = (DE + 2) & $0F  
	inc  e
	inc  e
	push af
		ld   a, e
		and  a, $0F
		ld   e, a
	pop  af
	
	; Seek to the new offset 
	ld   hl, \1+iPlInfo_JoyBtnBuffer
	add  hl, de
	
	; Write the new keys
	ld   [hl], a
	; Initialize the timer at 1
	inc  hl
	ld   [hl], $01
	
	; Save back the new buffer offset
	ld   a, e
	ld   [\1+iPlInfo_JoyBtnBufferOffset], a
	ret
.incTimer:
	; Increase timer, maxing out at $FF
	inc  hl			; Seek to timer byte
	ld   a, [hl]	
	cp   $FF		; Timer == $FF?
	ret  z			; If so, return
	inc  [hl]		; Otherwise, Timer++
	ret
ENDM

Play_WriteDirKeysToBuffer1P: mWriteDirKeysToBuffer wPlInfo_Pl1, wOBJInfo_Pl1
Play_WriteDirKeysToBuffer2P: mWriteDirKeysToBuffer wPlInfo_Pl2, wOBJInfo_Pl2
Play_WriteBtnKeysToBuffer1P: mWriteBtnKeysToBuffer wPlInfo_Pl1
Play_WriteBtnKeysToBuffer2P: mWriteBtnKeysToBuffer wPlInfo_Pl2
; =============== END OF BANK ===============
; Junk area below with incomplete copies of the above subroutines.
L017FA8: db $C8;X
L017FA9: db $34;X
L017FAA: db $C9;X
L017FAB: db $FE;X
L017FAC: db $FF;X
L017FAD: db $C8;X
L017FAE: db $34;X
L017FAF: db $C9;X
L017FB0: db $5F;X
L017FB1: db $F1;X
L017FB2: db $21;X
L017FB3: db $10;X
L017FB4: db $DA;X
L017FB5: db $19;X
L017FB6: db $77;X
L017FB7: db $23;X
L017FB8: db $36;X
L017FB9: db $01;X
L017FBA: db $7B;X
L017FBB: db $EA;X
L017FBC: db $4C;X
L017FBD: db $DA;X
L017FBE: db $C9;X
L017FBF: db $23;X
L017FC0: db $7E;X
L017FC1: db $FE;X
L017FC2: db $FF;X
L017FC3: db $C8;X
L017FC4: db $34;X
L017FC5: db $C9;X
L017FC6: db $16;X
L017FC7: db $00;X
L017FC8: db $FA;X
L017FC9: db $4D;X
L017FCA: db $D9;X
L017FCB: db $5F;X
L017FCC: db $FA;X
L017FCD: db $45;X
L017FCE: db $D9;X
L017FCF: db $E6;X
L017FD0: db $30;X
L017FD1: db $21;X
L017FD2: db $00;X
L017FD3: db $D9;X
L017FD4: db $19;X
L017FD5: db $BE;X
L017FD6: db $28;X
L017FD7: db $15;X
L017FD8: db $1C;X
L017FD9: db $1C;X
L017FDA: db $F5;X
L017FDB: db $7B;X
L017FDC: db $E6;X
L017FDD: db $0F;X
L017FDE: db $5F;X
L017FDF: db $F1;X
L017FE0: db $21;X
L017FE1: db $00;X
L017FE2: db $D9;X
L017FE3: db $19;X
L017FE4: db $77;X
L017FE5: db $23;X
L017FE6: db $36;X
L017FE7: db $01;X
L017FE8: db $7B;X
L017FE9: db $EA;X
L017FEA: db $4D;X
L017FEB: db $D9;X
L017FEC: db $C9;X
L017FED: db $23;X
L017FEE: db $7E;X
L017FEF: db $FE;X
L017FF0: db $FF;X
L017FF1: db $C8;X
L017FF2: db $34;X
L017FF3: db $C9;X
L017FF4: db $16;X
L017FF5: db $00;X
L017FF6: db $FA;X
L017FF7: db $4D;X
L017FF8: db $DA;X
L017FF9: db $5F;X
L017FFA: db $FA;X
L017FFB: db $45;X
L017FFC: db $DA;X
L017FFD: db $E6;X
L017FFE: db $30;X
L017FFF: db $21;X
