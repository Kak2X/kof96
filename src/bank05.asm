L054000: db $80
L054001: db $45
L054002: db $FF
L054003: db $FF
L054004: db $9D
L054005: db $45
L054006: db $BE
L054007: db $45
L054008: db $D8
L054009: db $45
L05400A: db $FF
L05400B: db $FF
L05400C: db $F5
L05400D: db $45
L05400E: db $FF
L05400F: db $FF
L054010: db $FF;X
L054011: db $FF
L054012: db $12
L054013: db $46
L054014: db $FF
L054015: db $FF
L054016: db $2F
L054017: db $46
L054018: db $FF
L054019: db $FF
L05401A: db $4C
L05401B: db $46
L05401C: db $FF
L05401D: db $FF
L05401E: db $2F
L05401F: db $46
L054020: db $FF
L054021: db $FF
L054022: db $FF;X
L054023: db $FF
L054024: db $9D
L054025: db $45
L054026: db $BE
L054027: db $45
L054028: db $69
L054029: db $46
L05402A: db $FF
L05402B: db $FF
L05402C: db $83
L05402D: db $46
L05402E: db $FF
L05402F: db $FF
L054030: db $69
L054031: db $46
L054032: db $FF
L054033: db $FF
L054034: db $FF;X
L054035: db $FF
L054036: db $69
L054037: db $46
L054038: db $FF
L054039: db $FF
L05403A: db $83
L05403B: db $46
L05403C: db $FF
L05403D: db $FF
L05403E: db $69
L05403F: db $46
L054040: db $FF
L054041: db $FF
L054042: db $9D
L054043: db $45
L054044: db $BE
L054045: db $45
L054046: db $FF;X
L054047: db $FF
L054048: db $9D
L054049: db $46
L05404A: db $FF
L05404B: db $FF
L05404C: db $FF;X
L05404D: db $FF;X
L05404E: db $9D
L05404F: db $46
L054050: db $FF
L054051: db $FF
L054052: db $15
L054053: db $47
L054054: db $FF
L054055: db $FF
L054056: db $15
L054057: db $47
L054058: db $FF
L054059: db $FF
L05405A: db $35
L05405B: db $47
L05405C: db $FF
L05405D: db $FF
L05405E: db $35
L05405F: db $47
L054060: db $FF
L054061: db $FF
L054062: db $15
L054063: db $47
L054064: db $FF
L054065: db $FF
L054066: db $15
L054067: db $47
L054068: db $FF
L054069: db $FF
L05406A: db $9D
L05406B: db $46
L05406C: db $FF
L05406D: db $FF
L05406E: db $FF;X
L05406F: db $FF;X
L054070: db $B7
L054071: db $46
L054072: db $DF
L054073: db $46
L054074: db $FF;X
L054075: db $FF;X
L054076: db $CB
L054077: db $46
L054078: db $F1
L054079: db $46
L05407A: db $FF;X
L05407B: db $FF;X
L05407C: db $D5;X
L05407D: db $46;X
L05407E: db $03;X
L05407F: db $47;X
L054080: db $9D;X
L054081: db $46;X
L054082: db $FF;X
L054083: db $FF;X
L054084: db $FF;X
L054085: db $FF;X
L054086: db $50
L054087: db $4E
L054088: db $78
L054089: db $4E
L05408A: db $64
L05408B: db $4E
L05408C: db $8A
L05408D: db $4E
L05408E: db $6E
L05408F: db $4E
L054090: db $9C
L054091: db $4E
L054092: db $FF;X
L054093: db $FF
L054094: db $15
L054095: db $47
L054096: db $FF
L054097: db $FF
L054098: db $15
L054099: db $47
L05409A: db $FF
L05409B: db $FF
L05409C: db $9D
L05409D: db $46
L05409E: db $FF
L05409F: db $FF
L0540A0: db $FF;X
L0540A1: db $FF;X
L0540A2: db $52
L0540A3: db $47
L0540A4: db $6F
L0540A5: db $47
L0540A6: db $7E
L0540A7: db $47
L0540A8: db $98
L0540A9: db $47
L0540AA: db $FF;X
L0540AB: db $FF
L0540AC: db $52
L0540AD: db $47
L0540AE: db $A7
L0540AF: db $47
L0540B0: db $7E
L0540B1: db $47
L0540B2: db $BF
L0540B3: db $47
L0540B4: db $FF;X
L0540B5: db $FF
L0540B6: db $D7
L0540B7: db $47
L0540B8: db $6F
L0540B9: db $47
L0540BA: db $D7
L0540BB: db $47
L0540BC: db $6F
L0540BD: db $47
L0540BE: db $D7
L0540BF: db $47
L0540C0: db $6F
L0540C1: db $47
L0540C2: db $FF;X
L0540C3: db $FF;X
L0540C4: db $7E
L0540C5: db $49
L0540C6: db $FF
L0540C7: db $FF
L0540C8: db $9B
L0540C9: db $49
L0540CA: db $B6
L0540CB: db $49
L0540CC: db $AC
L0540CD: db $49
L0540CE: db $CB
L0540CF: db $49
L0540D0: db $B0
L0540D1: db $4F
L0540D2: db $D0
L0540D3: db $45
L0540D4: db $FF;X
L0540D5: db $FF;X
L0540D6: db $F1
L0540D7: db $47
L0540D8: db $15
L0540D9: db $48
L0540DA: db $2F
L0540DB: db $48
L0540DC: db $15
L0540DD: db $48
L0540DE: db $40
L0540DF: db $4A
L0540E0: db $FF
L0540E1: db $FF
L0540E2: db $6A
L0540E3: db $4A
L0540E4: db $87
L0540E5: db $4A
L0540E6: db $A4
L0540E7: db $4A
L0540E8: db $FF
L0540E9: db $FF
L0540EA: db $A6
L0540EB: db $4B
L0540EC: db $CA
L0540ED: db $4B
L0540EE: db $11
L0540EF: db $4C
L0540F0: db $CA
L0540F1: db $4B
L0540F2: db $86
L0540F3: db $51
L0540F4: db $FF
L0540F5: db $FF
L0540F6: db $FF;X
L0540F7: db $FF;X
L0540F8: db $C4
L0540F9: db $48
L0540FA: db $DE
L0540FB: db $48
L0540FC: db $64
L0540FD: db $49
L0540FE: db $DE
L0540FF: db $48
L054100: db $9C
L054101: db $4F
L054102: db $BE
L054103: db $45
L054104: db $FF;X
L054105: db $FF;X
L054106: db $F1
L054107: db $47
L054108: db $15
L054109: db $48
L05410A: db $2F
L05410B: db $48
L05410C: db $15
L05410D: db $48
L05410E: db $F1
L05410F: db $47
L054110: db $15
L054111: db $48
L054112: db $2F
L054113: db $48
L054114: db $15
L054115: db $48
L054116: db $7C
L054117: db $48
L054118: db $6A
L054119: db $48
L05411A: db $53
L05411B: db $48
L05411C: db $6A
L05411D: db $48
L05411E: db $7C
L05411F: db $48
L054120: db $6A
L054121: db $48
L054122: db $53
L054123: db $48
L054124: db $6A
L054125: db $48
L054126: db $7C
L054127: db $48
L054128: db $6A
L054129: db $48
L05412A: db $53
L05412B: db $48
L05412C: db $6A
L05412D: db $48
L05412E: db $AA
L05412F: db $48
L054130: db $6A
L054131: db $48
L054132: db $93
L054133: db $48
L054134: db $6A
L054135: db $48
L054136: db $AA
L054137: db $48
L054138: db $6A
L054139: db $48
L05413A: db $93
L05413B: db $48
L05413C: db $6A
L05413D: db $48
L05413E: db $AA
L05413F: db $48
L054140: db $6A
L054141: db $48
L054142: db $93
L054143: db $48
L054144: db $6A
L054145: db $48
L054146: db $AA
L054147: db $48
L054148: db $6A
L054149: db $48
L05414A: db $93
L05414B: db $48
L05414C: db $6A
L05414D: db $48
L05414E: db $AA
L05414F: db $48
L054150: db $6A
L054151: db $48
L054152: db $93
L054153: db $48
L054154: db $6A
L054155: db $48
L054156: db $AA
L054157: db $48
L054158: db $6A
L054159: db $48
L05415A: db $FF;X
L05415B: db $FF;X
L05415C: db $C4
L05415D: db $48
L05415E: db $DE
L05415F: db $48
L054160: db $F3
L054161: db $48
L054162: db $DE
L054163: db $48
L054164: db $0D
L054165: db $49
L054166: db $DE
L054167: db $48
L054168: db $27
L054169: db $49
L05416A: db $38
L05416B: db $49
L05416C: db $50
L05416D: db $49
L05416E: db $38
L05416F: db $49
L054170: db $FF;X
L054171: db $FF
L054172: db $0B
L054173: db $48
L054174: db $27
L054175: db $48
L054176: db $49
L054177: db $48
L054178: db $27
L054179: db $48
L05417A: db $C4
L05417B: db $48
L05417C: db $DE
L05417D: db $48
L05417E: db $F3
L05417F: db $48
L054180: db $DE
L054181: db $48
L054182: db $0D
L054183: db $49
L054184: db $DE
L054185: db $48
L054186: db $27
L054187: db $49
L054188: db $38
L054189: db $49
L05418A: db $50
L05418B: db $49
L05418C: db $38
L05418D: db $49
L05418E: db $FF;X
L05418F: db $FF
L054190: db $98
L054191: db $4C
L054192: db $FF
L054193: db $FF
L054194: db $FF;X
L054195: db $FF;X
L054196: db $0F
L054197: db $4A
L054198: db $FF
L054199: db $FF
L05419A: db $E3
L05419B: db $49
L05419C: db $FD
L05419D: db $49
L05419E: db $0F
L05419F: db $4A
L0541A0: db $FF
L0541A1: db $FF
L0541A2: db $FF;X
L0541A3: db $FF;X
L0541A4: db $40
L0541A5: db $4A
L0541A6: db $FF
L0541A7: db $FF
L0541A8: db $6A
L0541A9: db $4A
L0541AA: db $87
L0541AB: db $4A
L0541AC: db $6A
L0541AD: db $4A
L0541AE: db $87
L0541AF: db $4A
L0541B0: db $A4
L0541B1: db $4A
L0541B2: db $FF
L0541B3: db $FF
L0541B4: db $FF;X
L0541B5: db $FF;X
L0541B6: db $EE
L0541B7: db $4A
L0541B8: db $FF
L0541B9: db $FF
L0541BA: db $CE
L0541BB: db $4A
L0541BC: db $FF
L0541BD: db $FF
L0541BE: db $EE
L0541BF: db $4A
L0541C0: db $FF
L0541C1: db $FF
L0541C2: db $FF;X
L0541C3: db $FF;X
L0541C4: db $A4
L0541C5: db $4A
L0541C6: db $FF
L0541C7: db $FF
L0541C8: db $0B
L0541C9: db $4B
L0541CA: db $FF
L0541CB: db $FF
L0541CC: db $28
L0541CD: db $4B
L0541CE: db $FF
L0541CF: db $FF
L0541D0: db $42
L0541D1: db $4B
L0541D2: db $FF
L0541D3: db $FF
L0541D4: db $FF;X
L0541D5: db $FF;X
L0541D6: db $86
L0541D7: db $4B
L0541D8: db $FF
L0541D9: db $FF
L0541DA: db $66
L0541DB: db $4B
L0541DC: db $FF
L0541DD: db $FF
L0541DE: db $86
L0541DF: db $4B
L0541E0: db $FF
L0541E1: db $FF
L0541E2: db $FF;X
L0541E3: db $FF;X
L0541E4: db $A6
L0541E5: db $4B
L0541E6: db $CA
L0541E7: db $4B
L0541E8: db $E7
L0541E9: db $4B
L0541EA: db $CA
L0541EB: db $4B
L0541EC: db $E7
L0541ED: db $4B
L0541EE: db $CA
L0541EF: db $4B
L0541F0: db $11
L0541F1: db $4C
L0541F2: db $CA
L0541F3: db $4B
L0541F4: db $FF;X
L0541F5: db $FF;X
L0541F6: db $58
L0541F7: db $4C
L0541F8: db $FF
L0541F9: db $FF
L0541FA: db $38
L0541FB: db $4C
L0541FC: db $FF
L0541FD: db $FF
L0541FE: db $58
L0541FF: db $4C
L054200: db $FF
L054201: db $FF
L054202: db $FF;X
L054203: db $FF;X
L054204: db $58
L054205: db $4C
L054206: db $FF
L054207: db $FF
L054208: db $75
L054209: db $4C
L05420A: db $FF
L05420B: db $FF
L05420C: db $75
L05420D: db $4C
L05420E: db $FF
L05420F: db $FF
L054210: db $98
L054211: db $4C
L054212: db $FF
L054213: db $FF
L054214: db $58
L054215: db $4C
L054216: db $FF
L054217: db $FF
L054218: db $FF;X
L054219: db $FF;X
L05421A: db $B5
L05421B: db $4C
L05421C: db $FF
L05421D: db $FF
L05421E: db $B5
L05421F: db $4C
L054220: db $FF
L054221: db $FF
L054222: db $35
L054223: db $47
L054224: db $FF
L054225: db $FF
L054226: db $15
L054227: db $47
L054228: db $FF
L054229: db $FF
L05422A: db $9D
L05422B: db $46
L05422C: db $FF
L05422D: db $FF
L05422E: db $FF;X
L05422F: db $FF;X
L054230: db $D5
L054231: db $4C
L054232: db $FF
L054233: db $FF
L054234: db $D5
L054235: db $4C
L054236: db $FF
L054237: db $FF
L054238: db $35
L054239: db $47
L05423A: db $FF
L05423B: db $FF
L05423C: db $15
L05423D: db $47
L05423E: db $FF
L05423F: db $FF
L054240: db $9D
L054241: db $46
L054242: db $FF
L054243: db $FF
L054244: db $12
L054245: db $4D
L054246: db $FF
L054247: db $FF
L054248: db $2F
L054249: db $4D
L05424A: db $FF
L05424B: db $FF
L05424C: db $35
L05424D: db $47
L05424E: db $FF
L05424F: db $FF
L054250: db $15
L054251: db $47
L054252: db $FF
L054253: db $FF
L054254: db $9D
L054255: db $46
L054256: db $FF
L054257: db $FF
L054258: db $FF;X
L054259: db $FF;X
L05425A: db $9D
L05425B: db $46
L05425C: db $FF
L05425D: db $FF
L05425E: db $9D
L05425F: db $46
L054260: db $FF
L054261: db $FF
L054262: db $F5
L054263: db $4C
L054264: db $FF
L054265: db $FF
L054266: db $FF;X
L054267: db $FF;X
L054268: db $9D
L054269: db $46
L05426A: db $FF
L05426B: db $FF
L05426C: db $49
L05426D: db $4D
L05426E: db $FF
L05426F: db $FF
L054270: db $49
L054271: db $4D
L054272: db $FF
L054273: db $FF
L054274: db $49
L054275: db $4D
L054276: db $FF
L054277: db $FF
L054278: db $9D
L054279: db $46
L05427A: db $FF
L05427B: db $FF
L05427C: db $FF;X
L05427D: db $FF;X
L05427E: db $9D
L05427F: db $46
L054280: db $FF
L054281: db $FF
L054282: db $66
L054283: db $4D
L054284: db $FF
L054285: db $FF
L054286: db $9D
L054287: db $46
L054288: db $FF
L054289: db $FF
L05428A: db $83
L05428B: db $4D
L05428C: db $FF
L05428D: db $FF
L05428E: db $9D
L05428F: db $46
L054290: db $FF
L054291: db $FF
L054292: db $FF;X
L054293: db $FF;X
L054294: db $CF
L054295: db $4D
L054296: db $FF
L054297: db $FF
L054298: db $FF;X
L054299: db $FF;X
L05429A: db $80
L05429B: db $45
L05429C: db $FF
L05429D: db $FF
L05429E: db $CF
L05429F: db $4D
L0542A0: db $FF
L0542A1: db $FF
L0542A2: db $8D
L0542A3: db $4D
L0542A4: db $FF
L0542A5: db $FF
L0542A6: db $FF;X
L0542A7: db $FF;X
L0542A8: db $EC;X
L0542A9: db $4D;X
L0542AA: db $FF;X
L0542AB: db $FF;X
L0542AC: db $FF;X
L0542AD: db $FF;X
L0542AE: db $CF;X
L0542AF: db $4D;X
L0542B0: db $FF;X
L0542B1: db $FF;X
L0542B2: db $9D;X
L0542B3: db $46;X
L0542B4: db $FF;X
L0542B5: db $FF;X
L0542B6: db $FF;X
L0542B7: db $FF;X
L0542B8: db $CF
L0542B9: db $4D
L0542BA: db $FF
L0542BB: db $FF
L0542BC: db $35
L0542BD: db $47
L0542BE: db $FF
L0542BF: db $FF
L0542C0: db $35
L0542C1: db $47
L0542C2: db $FF
L0542C3: db $FF
L0542C4: db $35
L0542C5: db $47
L0542C6: db $FF
L0542C7: db $FF
L0542C8: db $35
L0542C9: db $47
L0542CA: db $FF
L0542CB: db $FF
L0542CC: db $15
L0542CD: db $47
L0542CE: db $FF
L0542CF: db $FF
L0542D0: db $9D
L0542D1: db $46
L0542D2: db $FF
L0542D3: db $FF
L0542D4: db $FF;X
L0542D5: db $FF;X
L0542D6: db $CF
L0542D7: db $4D
L0542D8: db $FF
L0542D9: db $FF
L0542DA: db $0C
L0542DB: db $4E
L0542DC: db $FF
L0542DD: db $FF
L0542DE: db $36
L0542DF: db $4E
L0542E0: db $FF
L0542E1: db $FF
L0542E2: db $0C
L0542E3: db $4E
L0542E4: db $FF
L0542E5: db $FF
L0542E6: db $36
L0542E7: db $4E
L0542E8: db $FF
L0542E9: db $FF
L0542EA: db $FF;X
L0542EB: db $FF;X
L0542EC: db $8D
L0542ED: db $4D
L0542EE: db $FF
L0542EF: db $FF
L0542F0: db $B1
L0542F1: db $4D
L0542F2: db $FF
L0542F3: db $FF
L0542F4: db $BB
L0542F5: db $4D
L0542F6: db $FF
L0542F7: db $FF
L0542F8: db $C5
L0542F9: db $4D
L0542FA: db $FF
L0542FB: db $FF
L0542FC: db $C5
L0542FD: db $4D
L0542FE: db $FF
L0542FF: db $FF
L054300: db $0C
L054301: db $4E
L054302: db $FF
L054303: db $FF
L054304: db $36
L054305: db $4E
L054306: db $FF
L054307: db $FF
L054308: db $FF;X
L054309: db $FF
L05430A: db $8D
L05430B: db $4D
L05430C: db $FF
L05430D: db $FF
L05430E: db $0C
L05430F: db $4E
L054310: db $FF
L054311: db $FF
L054312: db $36
L054313: db $4E
L054314: db $FF
L054315: db $FF
L054316: db $FF;X
L054317: db $FF;X
L054318: db $2C
L054319: db $4E
L05431A: db $FF
L05431B: db $FF
L05431C: db $FF;X
L05431D: db $FF;X
L05431E: db $9D
L05431F: db $46
L054320: db $FF
L054321: db $FF
L054322: db $9D
L054323: db $46
L054324: db $FF
L054325: db $FF
L054326: db $FF;X
L054327: db $FF;X
L054328: db $1C
L054329: db $4F
L05432A: db $FF
L05432B: db $FF
L05432C: db $3C
L05432D: db $4F
L05432E: db $63
L05432F: db $4F
L054330: db $75
L054331: db $4F
L054332: db $63
L054333: db $4F
L054334: db $75
L054335: db $4F
L054336: db $63
L054337: db $4F
L054338: db $9C
L054339: db $4F
L05433A: db $BE
L05433B: db $45
L05433C: db $FF;X
L05433D: db $FF;X
L05433E: db $50
L05433F: db $4E
L054340: db $78
L054341: db $4E
L054342: db $64
L054343: db $4E
L054344: db $8A
L054345: db $4E
L054346: db $6E
L054347: db $4E
L054348: db $9C
L054349: db $4E
L05434A: db $50
L05434B: db $4E
L05434C: db $78
L05434D: db $4E
L05434E: db $9D
L05434F: db $46
L054350: db $FF
L054351: db $FF
L054352: db $BA
L054353: db $4F
L054354: db $CA
L054355: db $4B
L054356: db $11
L054357: db $4C
L054358: db $CA
L054359: db $4B
L05435A: db $D1
L05435B: db $4F
L05435C: db $87
L05435D: db $4A
L05435E: db $FF;X
L05435F: db $FF;X
L054360: db $50
L054361: db $4E
L054362: db $78
L054363: db $4E
L054364: db $64
L054365: db $4E
L054366: db $8A
L054367: db $4E
L054368: db $6E
L054369: db $4E
L05436A: db $9C
L05436B: db $4E
L05436C: db $50
L05436D: db $4E
L05436E: db $78
L05436F: db $4E
L054370: db $9D
L054371: db $46
L054372: db $FF
L054373: db $FF
L054374: db $BA
L054375: db $4F
L054376: db $CA
L054377: db $4B
L054378: db $11
L054379: db $4C
L05437A: db $CA
L05437B: db $4B
L05437C: db $F1
L05437D: db $4B
L05437E: db $CA
L05437F: db $4B
L054380: db $FF;X
L054381: db $FF;X
L054382: db $EE
L054383: db $4F
L054384: db $FD
L054385: db $49
L054386: db $0F
L054387: db $4A
L054388: db $FF
L054389: db $FF
L05438A: db $08
L05438B: db $50
L05438C: db $FF
L05438D: db $FF
L05438E: db $15
L05438F: db $47
L054390: db $FF
L054391: db $FF
L054392: db $2B
L054393: db $50
L054394: db $FF
L054395: db $FF
L054396: db $9D
L054397: db $46
L054398: db $FF
L054399: db $FF
L05439A: db $FF;X
L05439B: db $FF;X
L05439C: db $48
L05439D: db $50
L05439E: db $FF
L05439F: db $FF
L0543A0: db $6B
L0543A1: db $50
L0543A2: db $8E
L0543A3: db $50
L0543A4: db $6B
L0543A5: db $50
L0543A6: db $A6
L0543A7: db $50
L0543A8: db $BE
L0543A9: db $50
L0543AA: db $FF
L0543AB: db $FF
L0543AC: db $15
L0543AD: db $47
L0543AE: db $FF
L0543AF: db $FF
L0543B0: db $9D
L0543B1: db $46
L0543B2: db $FF
L0543B3: db $FF
L0543B4: db $FF;X
L0543B5: db $FF;X
L0543B6: db $48
L0543B7: db $50
L0543B8: db $FF
L0543B9: db $FF
L0543BA: db $6B
L0543BB: db $50
L0543BC: db $8E
L0543BD: db $50
L0543BE: db $6B
L0543BF: db $50
L0543C0: db $A6
L0543C1: db $50
L0543C2: db $12
L0543C3: db $4D
L0543C4: db $E4
L0543C5: db $50
L0543C6: db $F6
L0543C7: db $50
L0543C8: db $0D
L0543C9: db $51
L0543CA: db $F6
L0543CB: db $50
L0543CC: db $25
L0543CD: db $51
L0543CE: db $9D
L0543CF: db $46
L0543D0: db $FF
L0543D1: db $FF
L0543D2: db $FF;X
L0543D3: db $FF;X
L0543D4: db $E3
L0543D5: db $49
L0543D6: db $FD
L0543D7: db $49
L0543D8: db $19
L0543D9: db $4A
L0543DA: db $FF
L0543DB: db $FF
L0543DC: db $97
L0543DD: db $4D
L0543DE: db $FF
L0543DF: db $FF
L0543E0: db $3A
L0543E1: db $51
L0543E2: db $CB
L0543E3: db $4E
L0543E4: db $B4
L0543E5: db $45
L0543E6: db $D0
L0543E7: db $45
L0543E8: db $FF;X
L0543E9: db $FF;X
L0543EA: db $B0
L0543EB: db $52
L0543EC: db $43
L0543ED: db $52
L0543EE: db $B0
L0543EF: db $52
L0543F0: db $43
L0543F1: db $52
L0543F2: db $6C
L0543F3: db $52
L0543F4: db $FF
L0543F5: db $FF
L0543F6: db $6C
L0543F7: db $52
L0543F8: db $89
L0543F9: db $52
L0543FA: db $6C
L0543FB: db $52
L0543FC: db $91
L0543FD: db $52
L0543FE: db $6C
L0543FF: db $52
L054400: db $99
L054401: db $52
L054402: db $6C
L054403: db $52
L054404: db $A1
L054405: db $52
L054406: db $C4
L054407: db $52
L054408: db $1D
L054409: db $52
L05440A: db $C4
L05440B: db $52
L05440C: db $1D
L05440D: db $52
L05440E: db $B0
L05440F: db $52
L054410: db $43
L054411: db $52
L054412: db $C4
L054413: db $52
L054414: db $1D
L054415: db $52
L054416: db $B0
L054417: db $52
L054418: db $43
L054419: db $52
L05441A: db $C4
L05441B: db $52
L05441C: db $1D
L05441D: db $52
L05441E: db $B0
L05441F: db $52
L054420: db $43
L054421: db $52
L054422: db $C4
L054423: db $52
L054424: db $1D
L054425: db $52
L054426: db $B0
L054427: db $52
L054428: db $43
L054429: db $52
L05442A: db $C4
L05442B: db $52
L05442C: db $1D
L05442D: db $52
L05442E: db $B0
L05442F: db $52
L054430: db $43
L054431: db $52
L054432: db $C4
L054433: db $52
L054434: db $1D
L054435: db $52
L054436: db $B0
L054437: db $52
L054438: db $43
L054439: db $52
L05443A: db $C4
L05443B: db $52
L05443C: db $1D
L05443D: db $52
L05443E: db $B0
L05443F: db $52
L054440: db $43
L054441: db $52
L054442: db $C4
L054443: db $52
L054444: db $1D
L054445: db $52
L054446: db $B0
L054447: db $52
L054448: db $43
L054449: db $52
L05444A: db $C4
L05444B: db $52
L05444C: db $1D
L05444D: db $52
L05444E: db $B0
L05444F: db $52
L054450: db $43
L054451: db $52
L054452: db $C4
L054453: db $52
L054454: db $1D
L054455: db $52
L054456: db $B0
L054457: db $52
L054458: db $43
L054459: db $52
L05445A: db $B0
L05445B: db $52
L05445C: db $43
L05445D: db $52
L05445E: db $9D
L05445F: db $46
L054460: db $FF
L054461: db $FF
L054462: db $FF;X
L054463: db $FF;X
L054464: db $66
L054465: db $51
L054466: db $FF
L054467: db $FF
L054468: db $49
L054469: db $4D
L05446A: db $FF
L05446B: db $FF
L05446C: db $36
L05446D: db $4A
L05446E: db $FF
L05446F: db $FF
L054470: db $60
L054471: db $4A
L054472: db $FF
L054473: db $FF
L054474: db $6A
L054475: db $4A
L054476: db $87
L054477: db $4A
L054478: db $C4
L054479: db $4A
L05447A: db $FF
L05447B: db $FF
L05447C: db $5C
L05447D: db $4B
L05447E: db $FF
L05447F: db $FF
L054480: db $0B
L054481: db $4B
L054482: db $FF
L054483: db $FF
L054484: db $5C
L054485: db $4B
L054486: db $FF
L054487: db $FF
L054488: db $36
L054489: db $4A
L05448A: db $FF
L05448B: db $FF
L05448C: db $E3
L05448D: db $49
L05448E: db $FD
L05448F: db $49
L054490: db $5C
L054491: db $4B
L054492: db $FF
L054493: db $FF
L054494: db $59
L054495: db $4F
L054496: db $63
L054497: db $4F
L054498: db $92
L054499: db $4F
L05449A: db $63
L05449B: db $4F
L05449C: db $60
L05449D: db $4A
L05449E: db $FF
L05449F: db $FF
L0544A0: db $6A
L0544A1: db $4A
L0544A2: db $87
L0544A3: db $4A
L0544A4: db $86
L0544A5: db $51
L0544A6: db $FF
L0544A7: db $FF
L0544A8: db $A9
L0544A9: db $51
L0544AA: db $BA
L0544AB: db $51
L0544AC: db $D5
L0544AD: db $51
L0544AE: db $BA
L0544AF: db $51
L0544B0: db $A9
L0544B1: db $51
L0544B2: db $BA
L0544B3: db $51
L0544B4: db $9D;X
L0544B5: db $46;X
L0544B6: db $FF;X
L0544B7: db $FF;X
L0544B8: db $FF;X
L0544B9: db $FF;X
L0544BA: db $66
L0544BB: db $51
L0544BC: db $FF
L0544BD: db $FF
L0544BE: db $49
L0544BF: db $4D
L0544C0: db $FF
L0544C1: db $FF
L0544C2: db $86
L0544C3: db $51
L0544C4: db $FF
L0544C5: db $FF
L0544C6: db $2E
L0544C7: db $4C
L0544C8: db $CA
L0544C9: db $4B
L0544CA: db $E6
L0544CB: db $51
L0544CC: db $FF
L0544CD: db $FF
L0544CE: db $06
L0544CF: db $52
L0544D0: db $1D
L0544D1: db $52
L0544D2: db $E6
L0544D3: db $51
L0544D4: db $FF
L0544D5: db $FF
L0544D6: db $2F
L0544D7: db $52
L0544D8: db $43
L0544D9: db $52
L0544DA: db $E6
L0544DB: db $51
L0544DC: db $FF
L0544DD: db $FF
L0544DE: db $06
L0544DF: db $52
L0544E0: db $1D
L0544E1: db $52
L0544E2: db $E6
L0544E3: db $51
L0544E4: db $FF
L0544E5: db $FF
L0544E6: db $2F
L0544E7: db $52
L0544E8: db $43
L0544E9: db $52
L0544EA: db $E6
L0544EB: db $51
L0544EC: db $FF
L0544ED: db $FF
L0544EE: db $06
L0544EF: db $52
L0544F0: db $1D
L0544F1: db $52
L0544F2: db $E6
L0544F3: db $51
L0544F4: db $FF
L0544F5: db $FF
L0544F6: db $55
L0544F7: db $52
L0544F8: db $1D
L0544F9: db $52
L0544FA: db $E6
L0544FB: db $51
L0544FC: db $FF
L0544FD: db $FF
L0544FE: db $6C
L0544FF: db $52
L054500: db $FF
L054501: db $FF
L054502: db $6C
L054503: db $52
L054504: db $FF
L054505: db $FF
L054506: db $B0
L054507: db $52
L054508: db $43
L054509: db $52
L05450A: db $C4
L05450B: db $52
L05450C: db $1D
L05450D: db $52
L05450E: db $B0
L05450F: db $52
L054510: db $43
L054511: db $52
L054512: db $C4
L054513: db $52
L054514: db $1D
L054515: db $52
L054516: db $B0
L054517: db $52
L054518: db $43
L054519: db $52
L05451A: db $C4
L05451B: db $52
L05451C: db $1D
L05451D: db $52
L05451E: db $C4
L05451F: db $52
L054520: db $1D
L054521: db $52
L054522: db $B0
L054523: db $52
L054524: db $43
L054525: db $52
L054526: db $9D
L054527: db $46
L054528: db $FF
L054529: db $FF
L05452A: db $FF;X
L05452B: db $FF;X
L05452C: db $86
L05452D: db $51
L05452E: db $FF
L05452F: db $FF
L054530: db $49
L054531: db $4D
L054532: db $FF
L054533: db $FF
L054534: db $B0
L054535: db $4B
L054536: db $CA
L054537: db $4B
L054538: db $2E
L054539: db $4C
L05453A: db $CA
L05453B: db $4B
L05453C: db $6A
L05453D: db $4A
L05453E: db $87
L05453F: db $4A
L054540: db $C4
L054541: db $4A
L054542: db $FF
L054543: db $FF
L054544: db $A6
L054545: db $4B
L054546: db $CA
L054547: db $4B
L054548: db $E7
L054549: db $4B
L05454A: db $CA
L05454B: db $4B
L05454C: db $D1
L05454D: db $4F
L05454E: db $87
L05454F: db $4A
L054550: db $11
L054551: db $4C
L054552: db $CA
L054553: db $4B
L054554: db $D1
L054555: db $4F
L054556: db $87
L054557: db $4A
L054558: db $E7
L054559: db $4B
L05455A: db $CA
L05455B: db $4B
L05455C: db $A9
L05455D: db $51
L05455E: db $BA
L05455F: db $51
L054560: db $D5
L054561: db $51
L054562: db $BA
L054563: db $51
L054564: db $A9
L054565: db $51
L054566: db $BA
L054567: db $51
L054568: db $9D;X
L054569: db $46;X
L05456A: db $FF;X
L05456B: db $FF;X
L05456C: db $FF;X
L05456D: db $FF;X
L05456E: db $B1
L05456F: db $4E
L054570: db $D3
L054571: db $4E
L054572: db $E8
L054573: db $4E
L054574: db $8F
L054575: db $4A
L054576: db $05
L054577: db $4F
L054578: db $D2
L054579: db $4B
L05457A: db $EE
L05457B: db $4A
L05457C: db $FF
L05457D: db $FF
L05457E: db $FF;X
L05457F: db $FF;X
L054580: db $00
L054581: db $01
L054582: db $00
L054583: db $00
L054584: db $40
L054585: db $17
L054586: db $8A
L054587: db $45
L054588: db $00
L054589: db $00
L05458A: db $06
L05458B: db $21
L05458C: db $F4
L05458D: db $00
L05458E: db $21
L05458F: db $FC
L054590: db $02
L054591: db $23
L054592: db $04
L054593: db $04
L054594: db $31
L054595: db $F4
L054596: db $06
L054597: db $31
L054598: db $FC
L054599: db $08
L05459A: db $33
L05459B: db $04
L05459C: db $0A
L05459D: db $00
L05459E: db $01
L05459F: db $00
L0545A0: db $C0
L0545A1: db $40
L0545A2: db $17
L0545A3: db $A7
L0545A4: db $45
L0545A5: db $00
L0545A6: db $00
L0545A7: db $04
L0545A8: db $28
L0545A9: db $F4
L0545AA: db $00
L0545AB: db $20
L0545AC: db $FC
L0545AD: db $02
L0545AE: db $20
L0545AF: db $04
L0545B0: db $04
L0545B1: db $18
L0545B2: db $F4
L0545B3: db $06
L0545B4: db $20
L0545B5: db $01
L0545B6: db $00
L0545B7: db $C0
L0545B8: db $40
L0545B9: db $17
L0545BA: db $A7
L0545BB: db $45
L0545BC: db $00
L0545BD: db $00
L0545BE: db $00
L0545BF: db $40
L0545C0: db $41
L0545C1: db $17
L0545C2: db $C6
L0545C3: db $45
L0545C4: db $00
L0545C5: db $00
L0545C6: db $03
L0545C7: db $38
L0545C8: db $F4
L0545C9: db $00
L0545CA: db $30
L0545CB: db $FC
L0545CC: db $02
L0545CD: db $30
L0545CE: db $04
L0545CF: db $04
L0545D0: db $20
L0545D1: db $40
L0545D2: db $41
L0545D3: db $17
L0545D4: db $C6
L0545D5: db $45
L0545D6: db $00
L0545D7: db $00
L0545D8: db $00
L0545D9: db $01
L0545DA: db $00
L0545DB: db $A0
L0545DC: db $41
L0545DD: db $17
L0545DE: db $E2
L0545DF: db $45
L0545E0: db $00
L0545E1: db $00
L0545E2: db $06
L0545E3: db $23
L0545E4: db $F4
L0545E5: db $00
L0545E6: db $22
L0545E7: db $FC
L0545E8: db $02
L0545E9: db $24
L0545EA: db $04
L0545EB: db $04
L0545EC: db $33
L0545ED: db $F4
L0545EE: db $06
L0545EF: db $32
L0545F0: db $FC
L0545F1: db $08
L0545F2: db $34
L0545F3: db $04
L0545F4: db $0A
L0545F5: db $00
L0545F6: db $01
L0545F7: db $00
L0545F8: db $60
L0545F9: db $42
L0545FA: db $17
L0545FB: db $FF
L0545FC: db $45
L0545FD: db $00
L0545FE: db $00
L0545FF: db $06
L054600: db $22
L054601: db $F4
L054602: db $00
L054603: db $21
L054604: db $FC
L054605: db $02
L054606: db $23
L054607: db $04
L054608: db $04
L054609: db $32
L05460A: db $F4
L05460B: db $06
L05460C: db $31
L05460D: db $FC
L05460E: db $08
L05460F: db $33
L054610: db $04
L054611: db $0A
L054612: db $00
L054613: db $01
L054614: db $00
L054615: db $40
L054616: db $64
L054617: db $1B
L054618: db $1C
L054619: db $46
L05461A: db $FE
L05461B: db $00
L05461C: db $06
L05461D: db $20
L05461E: db $F5
L05461F: db $00
L054620: db $20
L054621: db $FD
L054622: db $02
L054623: db $20
L054624: db $05
L054625: db $04
L054626: db $30
L054627: db $F5
L054628: db $06
L054629: db $30
L05462A: db $FD
L05462B: db $08
L05462C: db $30
L05462D: db $05
L05462E: db $0A
L05462F: db $00
L054630: db $01
L054631: db $00
L054632: db $00
L054633: db $65
L054634: db $1B
L054635: db $39
L054636: db $46
L054637: db $FE
L054638: db $00
L054639: db $06
L05463A: db $20
L05463B: db $F5
L05463C: db $00
L05463D: db $20
L05463E: db $FD
L05463F: db $02
L054640: db $20
L054641: db $05
L054642: db $04
L054643: db $30
L054644: db $F5
L054645: db $06
L054646: db $30
L054647: db $FD
L054648: db $08
L054649: db $30
L05464A: db $05
L05464B: db $0A
L05464C: db $00
L05464D: db $01
L05464E: db $00
L05464F: db $C0
L054650: db $65
L054651: db $1B
L054652: db $56
L054653: db $46
L054654: db $FE
L054655: db $00
L054656: db $06
L054657: db $20
L054658: db $F5
L054659: db $00
L05465A: db $20
L05465B: db $FD
L05465C: db $02
L05465D: db $20
L05465E: db $05
L05465F: db $04
L054660: db $30
L054661: db $F5
L054662: db $06
L054663: db $30
L054664: db $FD
L054665: db $08
L054666: db $30
L054667: db $05
L054668: db $0A
L054669: db $00
L05466A: db $01
L05466B: db $00
L05466C: db $20
L05466D: db $43
L05466E: db $17
L05466F: db $73
L054670: db $46
L054671: db $00
L054672: db $00
L054673: db $05
L054674: db $21
L054675: db $F0
L054676: db $00
L054677: db $20
L054678: db $F8
L054679: db $02
L05467A: db $20
L05467B: db $00
L05467C: db $04
L05467D: db $30
L05467E: db $F8
L05467F: db $06
L054680: db $30
L054681: db $00
L054682: db $08
L054683: db $00
L054684: db $01
L054685: db $00
L054686: db $C0
L054687: db $43
L054688: db $17
L054689: db $8D
L05468A: db $46
L05468B: db $00
L05468C: db $00
L05468D: db $05
L05468E: db $23
L05468F: db $F2
L054690: db $00
L054691: db $20
L054692: db $FA
L054693: db $02
L054694: db $20
L054695: db $02
L054696: db $04
L054697: db $30
L054698: db $FA
L054699: db $06
L05469A: db $30
L05469B: db $02
L05469C: db $08
L05469D: db $00
L05469E: db $01
L05469F: db $00
L0546A0: db $60
L0546A1: db $44
L0546A2: db $17
L0546A3: db $A7
L0546A4: db $46
L0546A5: db $00
L0546A6: db $00
L0546A7: db $05
L0546A8: db $29
L0546A9: db $F7
L0546AA: db $00
L0546AB: db $29
L0546AC: db $FF
L0546AD: db $02
L0546AE: db $30
L0546AF: db $03
L0546B0: db $04
L0546B1: db $39
L0546B2: db $F3
L0546B3: db $06
L0546B4: db $39
L0546B5: db $FB
L0546B6: db $08
L0546B7: db $00
L0546B8: db $01
L0546B9: db $00
L0546BA: db $20
L0546BB: db $48
L0546BC: db $17
L0546BD: db $C1
L0546BE: db $46
L0546BF: db $00
L0546C0: db $00
L0546C1: db $03
L0546C2: db $20
L0546C3: db $FA
L0546C4: db $00
L0546C5: db $20
L0546C6: db $02
L0546C7: db $02
L0546C8: db $20
L0546C9: db $F2
L0546CA: db $04
L0546CB: db $00
L0546CC: db $01
L0546CD: db $00
L0546CE: db $20
L0546CF: db $48
L0546D0: db $17
L0546D1: db $C1
L0546D2: db $46
L0546D3: db $00
L0546D4: db $06
L0546D5: db $00;X
L0546D6: db $01;X
L0546D7: db $00;X
L0546D8: db $20;X
L0546D9: db $48;X
L0546DA: db $17;X
L0546DB: db $C1;X
L0546DC: db $46;X
L0546DD: db $00;X
L0546DE: db $FA;X
L0546DF: db $00
L0546E0: db $80
L0546E1: db $48
L0546E2: db $17
L0546E3: db $E7
L0546E4: db $46
L0546E5: db $00
L0546E6: db $00
L0546E7: db $03
L0546E8: db $30
L0546E9: db $F4
L0546EA: db $00
L0546EB: db $30
L0546EC: db $FC
L0546ED: db $02
L0546EE: db $30
L0546EF: db $04
L0546F0: db $04
L0546F1: db $00
L0546F2: db $E0
L0546F3: db $48
L0546F4: db $17
L0546F5: db $F9
L0546F6: db $46
L0546F7: db $00
L0546F8: db $00
L0546F9: db $03
L0546FA: db $36
L0546FB: db $F4
L0546FC: db $00
L0546FD: db $36
L0546FE: db $FC
L0546FF: db $02
L054700: db $36
L054701: db $04
L054702: db $04
L054703: db $00;X
L054704: db $40;X
L054705: db $49;X
L054706: db $17;X
L054707: db $0B;X
L054708: db $47;X
L054709: db $00;X
L05470A: db $12;X
L05470B: db $03;X
L05470C: db $18;X
L05470D: db $F4;X
L05470E: db $00;X
L05470F: db $18;X
L054710: db $FC;X
L054711: db $02;X
L054712: db $18;X
L054713: db $04;X
L054714: db $04;X
L054715: db $00
L054716: db $01
L054717: db $00
L054718: db $80
L054719: db $46
L05471A: db $17
L05471B: db $1F
L05471C: db $47
L05471D: db $FB
L05471E: db $01
L05471F: db $07
L054720: db $0C
L054721: db $F4
L054722: db $00
L054723: db $10
L054724: db $FC
L054725: db $02
L054726: db $10
L054727: db $04
L054728: db $04
L054729: db $20
L05472A: db $FC
L05472B: db $06
L05472C: db $20
L05472D: db $04
L05472E: db $08
L05472F: db $30
L054730: db $FC
L054731: db $0A
L054732: db $30
L054733: db $04
L054734: db $0C
L054735: db $00
L054736: db $01
L054737: db $00
L054738: db $60
L054739: db $47
L05473A: db $17
L05473B: db $3F
L05473C: db $47
L05473D: db $FA
L05473E: db $16
L05473F: db $06
L054740: db $08
L054741: db $F8
L054742: db $00
L054743: db $08
L054744: db $00
L054745: db $02
L054746: db $08
L054747: db $08
L054748: db $04
L054749: db $18
L05474A: db $F8
L05474B: db $06
L05474C: db $18
L05474D: db $00
L05474E: db $08
L05474F: db $18
L054750: db $08
L054751: db $0A
L054752: db $00
L054753: db $01
L054754: db $00
L054755: db $80
L054756: db $61
L054757: db $17
L054758: db $5C
L054759: db $47
L05475A: db $FE
L05475B: db $00
L05475C: db $06
L05475D: db $15
L05475E: db $F4
L05475F: db $00
L054760: db $18
L054761: db $FC
L054762: db $02
L054763: db $18
L054764: db $04
L054765: db $04
L054766: db $28
L054767: db $F4
L054768: db $06
L054769: db $28
L05476A: db $FC
L05476B: db $08
L05476C: db $28
L05476D: db $04
L05476E: db $0A
L05476F: db $00
L054770: db $40
L054771: db $62
L054772: db $17
L054773: db $77
L054774: db $47
L054775: db $FE
L054776: db $00
L054777: db $02
L054778: db $38
L054779: db $FB
L05477A: db $00
L05477B: db $38
L05477C: db $03
L05477D: db $02
L05477E: db $00
L05477F: db $01
L054780: db $00
L054781: db $80
L054782: db $62
L054783: db $17
L054784: db $88
L054785: db $47
L054786: db $FE
L054787: db $00
L054788: db $05
L054789: db $20
L05478A: db $F4
L05478B: db $00
L05478C: db $20
L05478D: db $FC
L05478E: db $02
L05478F: db $20
L054790: db $04
L054791: db $04
L054792: db $10
L054793: db $F4
L054794: db $06
L054795: db $10
L054796: db $FC
L054797: db $08
L054798: db $00
L054799: db $20
L05479A: db $63
L05479B: db $17
L05479C: db $A0
L05479D: db $47
L05479E: db $F6
L05479F: db $00
L0547A0: db $02
L0547A1: db $30
L0547A2: db $02
L0547A3: db $00
L0547A4: db $30
L0547A5: db $0A
L0547A6: db $02
L0547A7: db $00
L0547A8: db $80
L0547A9: db $66
L0547AA: db $1B
L0547AB: db $AF
L0547AC: db $47
L0547AD: db $FE
L0547AE: db $00
L0547AF: db $05
L0547B0: db $3C
L0547B1: db $EC
L0547B2: db $00
L0547B3: db $38
L0547B4: db $F4
L0547B5: db $02
L0547B6: db $38
L0547B7: db $FC
L0547B8: db $04
L0547B9: db $38
L0547BA: db $04
L0547BB: db $06
L0547BC: db $38
L0547BD: db $0C
L0547BE: db $08
L0547BF: db $00
L0547C0: db $20
L0547C1: db $67
L0547C2: db $1B
L0547C3: db $C7
L0547C4: db $47
L0547C5: db $FE
L0547C6: db $00
L0547C7: db $05
L0547C8: db $3C
L0547C9: db $EC
L0547CA: db $00
L0547CB: db $30
L0547CC: db $F4
L0547CD: db $02
L0547CE: db $30
L0547CF: db $FC
L0547D0: db $04
L0547D1: db $30
L0547D2: db $04
L0547D3: db $06
L0547D4: db $38
L0547D5: db $0C
L0547D6: db $08
L0547D7: db $00
L0547D8: db $01
L0547D9: db $00
L0547DA: db $20
L0547DB: db $66
L0547DC: db $17
L0547DD: db $E1
L0547DE: db $47
L0547DF: db $06
L0547E0: db $00
L0547E1: db $05
L0547E2: db $18
L0547E3: db $F1
L0547E4: db $00
L0547E5: db $18
L0547E6: db $F9
L0547E7: db $02
L0547E8: db $28
L0547E9: db $F1
L0547EA: db $04
L0547EB: db $28
L0547EC: db $F9
L0547ED: db $06
L0547EE: db $20
L0547EF: db $01
L0547F0: db $08
L0547F1: db $00
L0547F2: db $01
L0547F3: db $00
L0547F4: db $C0
L0547F5: db $66
L0547F6: db $17
L0547F7: db $FB
L0547F8: db $47
L0547F9: db $00
L0547FA: db $00
L0547FB: db $05
L0547FC: db $18
L0547FD: db $F9
L0547FE: db $00
L0547FF: db $18
L054800: db $01
L054801: db $02
L054802: db $28
L054803: db $F9
L054804: db $04
L054805: db $28
L054806: db $01
L054807: db $06
L054808: db $22
L054809: db $09
L05480A: db $08
L05480B: db $20
L05480C: db $01
L05480D: db $00
L05480E: db $C0
L05480F: db $66
L054810: db $17
L054811: db $FB
L054812: db $47
L054813: db $00
L054814: db $00
L054815: db $00
L054816: db $60
L054817: db $67
L054818: db $17
L054819: db $1D
L05481A: db $48
L05481B: db $00
L05481C: db $00
L05481D: db $03
L05481E: db $38
L05481F: db $F4
L054820: db $00
L054821: db $38
L054822: db $FC
L054823: db $02
L054824: db $38
L054825: db $04
L054826: db $04
L054827: db $20
L054828: db $60
L054829: db $67
L05482A: db $17
L05482B: db $1D
L05482C: db $48
L05482D: db $00
L05482E: db $00
L05482F: db $00
L054830: db $01
L054831: db $00
L054832: db $C0
L054833: db $67
L054834: db $17
L054835: db $39
L054836: db $48
L054837: db $00
L054838: db $00
L054839: db $05
L05483A: db $18
L05483B: db $F9
L05483C: db $00
L05483D: db $18
L05483E: db $01
L05483F: db $02
L054840: db $28
L054841: db $F9
L054842: db $04
L054843: db $28
L054844: db $01
L054845: db $06
L054846: db $21
L054847: db $09
L054848: db $08
L054849: db $20
L05484A: db $01
L05484B: db $00
L05484C: db $C0
L05484D: db $67
L05484E: db $17
L05484F: db $39
L054850: db $48
L054851: db $00
L054852: db $00
L054853: db $00
L054854: db $01
L054855: db $00
L054856: db $60
L054857: db $68
L054858: db $17
L054859: db $5D
L05485A: db $48
L05485B: db $00
L05485C: db $00
L05485D: db $04
L05485E: db $18
L05485F: db $F8
L054860: db $00
L054861: db $18
L054862: db $00
L054863: db $02
L054864: db $28
L054865: db $F8
L054866: db $04
L054867: db $28
L054868: db $00
L054869: db $06
L05486A: db $00
L05486B: db $E0
L05486C: db $68
L05486D: db $17
L05486E: db $72
L05486F: db $48
L054870: db $00
L054871: db $00
L054872: db $03
L054873: db $38
L054874: db $F4
L054875: db $00
L054876: db $38
L054877: db $FC
L054878: db $02
L054879: db $38
L05487A: db $04
L05487B: db $04
L05487C: db $00
L05487D: db $01
L05487E: db $00
L05487F: db $40
L054880: db $69
L054881: db $17
L054882: db $86
L054883: db $48
L054884: db $00
L054885: db $00
L054886: db $04
L054887: db $18
L054888: db $F8
L054889: db $00
L05488A: db $18
L05488B: db $00
L05488C: db $02
L05488D: db $28
L05488E: db $F8
L05488F: db $04
L054890: db $28
L054891: db $00
L054892: db $06
L054893: db $00
L054894: db $01
L054895: db $00
L054896: db $C0
L054897: db $69
L054898: db $17
L054899: db $9D
L05489A: db $48
L05489B: db $00
L05489C: db $00
L05489D: db $04
L05489E: db $18
L05489F: db $FA
L0548A0: db $00
L0548A1: db $18
L0548A2: db $02
L0548A3: db $02
L0548A4: db $28
L0548A5: db $FA
L0548A6: db $04
L0548A7: db $28
L0548A8: db $02
L0548A9: db $06
L0548AA: db $00
L0548AB: db $01
L0548AC: db $00
L0548AD: db $40
L0548AE: db $6A
L0548AF: db $17
L0548B0: db $B4
L0548B1: db $48
L0548B2: db $00
L0548B3: db $00
L0548B4: db $05
L0548B5: db $18
L0548B6: db $F9
L0548B7: db $00
L0548B8: db $18
L0548B9: db $01
L0548BA: db $02
L0548BB: db $28
L0548BC: db $F9
L0548BD: db $04
L0548BE: db $28
L0548BF: db $01
L0548C0: db $06
L0548C1: db $14
L0548C2: db $09
L0548C3: db $08
L0548C4: db $00
L0548C5: db $01
L0548C6: db $00
L0548C7: db $E0
L0548C8: db $6A
L0548C9: db $17
L0548CA: db $CE
L0548CB: db $48
L0548CC: db $04
L0548CD: db $00
L0548CE: db $05
L0548CF: db $18
L0548D0: db $F4
L0548D1: db $00
L0548D2: db $18
L0548D3: db $FC
L0548D4: db $02
L0548D5: db $18
L0548D6: db $04
L0548D7: db $04
L0548D8: db $28
L0548D9: db $F4
L0548DA: db $06
L0548DB: db $28
L0548DC: db $FC
L0548DD: db $08
L0548DE: db $00
L0548DF: db $80
L0548E0: db $6B
L0548E1: db $17
L0548E2: db $E6
L0548E3: db $48
L0548E4: db $04
L0548E5: db $00
L0548E6: db $04
L0548E7: db $38
L0548E8: db $F4
L0548E9: db $00
L0548EA: db $38
L0548EB: db $FC
L0548EC: db $02
L0548ED: db $28
L0548EE: db $04
L0548EF: db $04
L0548F0: db $38
L0548F1: db $04
L0548F2: db $06
L0548F3: db $00
L0548F4: db $01
L0548F5: db $00
L0548F6: db $00
L0548F7: db $6C
L0548F8: db $17
L0548F9: db $FD
L0548FA: db $48
L0548FB: db $04
L0548FC: db $00
L0548FD: db $05
L0548FE: db $18
L0548FF: db $F4
L054900: db $00
L054901: db $18
L054902: db $FC
L054903: db $02
L054904: db $18
L054905: db $04
L054906: db $04
L054907: db $28
L054908: db $F4
L054909: db $06
L05490A: db $28
L05490B: db $FC
L05490C: db $08
L05490D: db $00
L05490E: db $01
L05490F: db $00
L054910: db $A0
L054911: db $6C
L054912: db $17
L054913: db $17
L054914: db $49
L054915: db $04
L054916: db $00
L054917: db $05
L054918: db $18
L054919: db $F4
L05491A: db $00
L05491B: db $18
L05491C: db $FC
L05491D: db $02
L05491E: db $18
L05491F: db $04
L054920: db $04
L054921: db $28
L054922: db $F4
L054923: db $06
L054924: db $28
L054925: db $FC
L054926: db $08
L054927: db $00
L054928: db $01
L054929: db $00
L05492A: db $40
L05492B: db $6D
L05492C: db $17
L05492D: db $31
L05492E: db $49
L05492F: db $04
L054930: db $00
L054931: db $02
L054932: db $18
L054933: db $F4
L054934: db $00
L054935: db $18
L054936: db $FC
L054937: db $02
L054938: db $00
L054939: db $80
L05493A: db $6D
L05493B: db $17
L05493C: db $40
L05493D: db $49
L05493E: db $04
L05493F: db $00
L054940: db $05
L054941: db $28
L054942: db $F8
L054943: db $00
L054944: db $23
L054945: db $00
L054946: db $02
L054947: db $33
L054948: db $00
L054949: db $04
L05494A: db $38
L05494B: db $F0
L05494C: db $06
L05494D: db $38
L05494E: db $F8
L05494F: db $08
L054950: db $00
L054951: db $01
L054952: db $00
L054953: db $20
L054954: db $6E
L054955: db $17
L054956: db $5A
L054957: db $49
L054958: db $04
L054959: db $00
L05495A: db $03
L05495B: db $18
L05495C: db $F4
L05495D: db $00
L05495E: db $18
L05495F: db $FC
L054960: db $02
L054961: db $08
L054962: db $F7
L054963: db $04
L054964: db $00
L054965: db $01
L054966: db $00
L054967: db $60
L054968: db $63
L054969: db $17
L05496A: db $6E
L05496B: db $49
L05496C: db $04
L05496D: db $00
L05496E: db $05
L05496F: db $18
L054970: db $F4
L054971: db $00
L054972: db $18
L054973: db $FC
L054974: db $02
L054975: db $18
L054976: db $04
L054977: db $04
L054978: db $28
L054979: db $F4
L05497A: db $06
L05497B: db $28
L05497C: db $FC
L05497D: db $08
L05497E: db $00
L05497F: db $01
L054980: db $00
L054981: db $00
L054982: db $64
L054983: db $17
L054984: db $88
L054985: db $49
L054986: db $F5
L054987: db $00
L054988: db $06
L054989: db $19
L05498A: db $09
L05498B: db $00
L05498C: db $20
L05498D: db $04
L05498E: db $02
L05498F: db $1A
L054990: db $11
L054991: db $04
L054992: db $30
L054993: db $04
L054994: db $06
L054995: db $29
L054996: db $0C
L054997: db $08
L054998: db $39
L054999: db $0C
L05499A: db $0A
L05499B: db $00
L05499C: db $01
L05499D: db $00
L05499E: db $C0
L05499F: db $64
L0549A0: db $17
L0549A1: db $A5
L0549A2: db $49
L0549A3: db $F5
L0549A4: db $00
L0549A5: db $02
L0549A6: db $18
L0549A7: db $04
L0549A8: db $00
L0549A9: db $18
L0549AA: db $0C
L0549AB: db $02
L0549AC: db $00
L0549AD: db $01
L0549AE: db $00
L0549AF: db $C0
L0549B0: db $64
L0549B1: db $17
L0549B2: db $A5
L0549B3: db $49
L0549B4: db $F3
L0549B5: db $01
L0549B6: db $00
L0549B7: db $00
L0549B8: db $65
L0549B9: db $17
L0549BA: db $BE
L0549BB: db $49
L0549BC: db $F5
L0549BD: db $00
L0549BE: db $04
L0549BF: db $28
L0549C0: db $04
L0549C1: db $00
L0549C2: db $28
L0549C3: db $0C
L0549C4: db $02
L0549C5: db $38
L0549C6: db $04
L0549C7: db $04
L0549C8: db $38
L0549C9: db $0C
L0549CA: db $06
L0549CB: db $00
L0549CC: db $80
L0549CD: db $65
L0549CE: db $17
L0549CF: db $D3
L0549D0: db $49
L0549D1: db $F5
L0549D2: db $00
L0549D3: db $05
L0549D4: db $28
L0549D5: db $04
L0549D6: db $00
L0549D7: db $28
L0549D8: db $0C
L0549D9: db $02
L0549DA: db $39
L0549DB: db $FC
L0549DC: db $04
L0549DD: db $38
L0549DE: db $04
L0549DF: db $06
L0549E0: db $38
L0549E1: db $0C
L0549E2: db $08
L0549E3: db $00
L0549E4: db $01
L0549E5: db $02
L0549E6: db $A0
L0549E7: db $49
L0549E8: db $17
L0549E9: db $ED
L0549EA: db $49
L0549EB: db $F8
L0549EC: db $00
L0549ED: db $05
L0549EE: db $28
L0549EF: db $F4
L0549F0: db $00
L0549F1: db $28
L0549F2: db $FC
L0549F3: db $02
L0549F4: db $18
L0549F5: db $FC
L0549F6: db $04
L0549F7: db $20
L0549F8: db $04
L0549F9: db $06
L0549FA: db $20
L0549FB: db $0C
L0549FC: db $08
L0549FD: db $00
L0549FE: db $40
L0549FF: db $4A
L054A00: db $17
L054A01: db $05
L054A02: db $4A
L054A03: db $F8
L054A04: db $00
L054A05: db $03
L054A06: db $38
L054A07: db $FC
L054A08: db $00
L054A09: db $30
L054A0A: db $04
L054A0B: db $02
L054A0C: db $30
L054A0D: db $0C
L054A0E: db $04
L054A0F: db $00
L054A10: db $01
L054A11: db $00
L054A12: db $A0
L054A13: db $4A
L054A14: db $17
L054A15: db $23
L054A16: db $4A
L054A17: db $00
L054A18: db $00
L054A19: db $00
L054A1A: db $01
L054A1B: db $05
L054A1C: db $A0
L054A1D: db $4A
L054A1E: db $17
L054A1F: db $23
L054A20: db $4A
L054A21: db $00
L054A22: db $00
L054A23: db $06
L054A24: db $22
L054A25: db $F4
L054A26: db $00
L054A27: db $22
L054A28: db $FC
L054A29: db $02
L054A2A: db $29
L054A2B: db $04
L054A2C: db $04
L054A2D: db $32
L054A2E: db $F4
L054A2F: db $06
L054A30: db $32
L054A31: db $FC
L054A32: db $08
L054A33: db $39
L054A34: db $04
L054A35: db $0A
L054A36: db $00
L054A37: db $01
L054A38: db $02
L054A39: db $A0
L054A3A: db $4A
L054A3B: db $17
L054A3C: db $23
L054A3D: db $4A
L054A3E: db $00
L054A3F: db $00
L054A40: db $00
L054A41: db $01
L054A42: db $00
L054A43: db $60
L054A44: db $4B
L054A45: db $17
L054A46: db $4A
L054A47: db $4A
L054A48: db $FC
L054A49: db $00
L054A4A: db $07
L054A4B: db $1D
L054A4C: db $F4
L054A4D: db $00
L054A4E: db $24
L054A4F: db $FC
L054A50: db $02
L054A51: db $20
L054A52: db $04
L054A53: db $04
L054A54: db $1E
L054A55: db $0C
L054A56: db $06
L054A57: db $34
L054A58: db $FA
L054A59: db $08
L054A5A: db $30
L054A5B: db $02
L054A5C: db $0A
L054A5D: db $38
L054A5E: db $0A
L054A5F: db $0C
L054A60: db $00
L054A61: db $01
L054A62: db $02
L054A63: db $60
L054A64: db $4B
L054A65: db $17
L054A66: db $4A
L054A67: db $4A
L054A68: db $FC
L054A69: db $00
L054A6A: db $00
L054A6B: db $01
L054A6C: db $57
L054A6D: db $40
L054A6E: db $4C
L054A6F: db $17
L054A70: db $74
L054A71: db $4A
L054A72: db $F8
L054A73: db $00
L054A74: db $06
L054A75: db $28
L054A76: db $F4
L054A77: db $00
L054A78: db $18
L054A79: db $FC
L054A7A: db $02
L054A7B: db $20
L054A7C: db $04
L054A7D: db $04
L054A7E: db $18
L054A7F: db $0C
L054A80: db $06
L054A81: db $26
L054A82: db $EC
L054A83: db $08
L054A84: db $28
L054A85: db $FC
L054A86: db $0A
L054A87: db $00
L054A88: db $00
L054A89: db $4D
L054A8A: db $17
L054A8B: db $97
L054A8C: db $4A
L054A8D: db $F8
L054A8E: db $00
L054A8F: db $20
L054A90: db $00
L054A91: db $4D
L054A92: db $17
L054A93: db $97
L054A94: db $4A
L054A95: db $08
L054A96: db $00
L054A97: db $04
L054A98: db $38
L054A99: db $F4
L054A9A: db $00
L054A9B: db $38
L054A9C: db $FC
L054A9D: db $02
L054A9E: db $30
L054A9F: db $04
L054AA0: db $04
L054AA1: db $30
L054AA2: db $0C
L054AA3: db $06
L054AA4: db $00
L054AA5: db $01
L054AA6: db $00
L054AA7: db $80
L054AA8: db $4D
L054AA9: db $17
L054AAA: db $AE
L054AAB: db $4A
L054AAC: db $F8
L054AAD: db $00
L054AAE: db $07
L054AAF: db $20
L054AB0: db $FC
L054AB1: db $00
L054AB2: db $1E
L054AB3: db $04
L054AB4: db $02
L054AB5: db $2A
L054AB6: db $0C
L054AB7: db $04
L054AB8: db $30
L054AB9: db $FC
L054ABA: db $06
L054ABB: db $2E
L054ABC: db $04
L054ABD: db $08
L054ABE: db $3A
L054ABF: db $0C
L054AC0: db $0A
L054AC1: db $3E
L054AC2: db $04
L054AC3: db $0C
L054AC4: db $00
L054AC5: db $01
L054AC6: db $02
L054AC7: db $80
L054AC8: db $4D
L054AC9: db $17
L054ACA: db $AE
L054ACB: db $4A
L054ACC: db $F8
L054ACD: db $00
L054ACE: db $00
L054ACF: db $01
L054AD0: db $6B
L054AD1: db $60
L054AD2: db $4E
L054AD3: db $17
L054AD4: db $D8
L054AD5: db $4A
L054AD6: db $00
L054AD7: db $00
L054AD8: db $07
L054AD9: db $37
L054ADA: db $EE
L054ADB: db $00
L054ADC: db $32
L054ADD: db $F6
L054ADE: db $02
L054ADF: db $2B
L054AE0: db $FE
L054AE1: db $04
L054AE2: db $28
L054AE3: db $06
L054AE4: db $06
L054AE5: db $27
L054AE6: db $0E
L054AE7: db $08
L054AE8: db $3B
L054AE9: db $FE
L054AEA: db $0A
L054AEB: db $38
L054AEC: db $06
L054AED: db $0C
L054AEE: db $00
L054AEF: db $01
L054AF0: db $00
L054AF1: db $40
L054AF2: db $4F
L054AF3: db $17
L054AF4: db $F8
L054AF5: db $4A
L054AF6: db $00
L054AF7: db $00
L054AF8: db $06
L054AF9: db $29
L054AFA: db $F6
L054AFB: db $00
L054AFC: db $24
L054AFD: db $FE
L054AFE: db $02
L054AFF: db $24
L054B00: db $06
L054B01: db $04
L054B02: db $34
L054B03: db $FC
L054B04: db $06
L054B05: db $34
L054B06: db $04
L054B07: db $08
L054B08: db $39
L054B09: db $F4
L054B0A: db $0A
L054B0B: db $00
L054B0C: db $01
L054B0D: db $50
L054B0E: db $00
L054B0F: db $50
L054B10: db $17
L054B11: db $15
L054B12: db $4B
L054B13: db $F0
L054B14: db $00
L054B15: db $06
L054B16: db $20
L054B17: db $EC
L054B18: db $00
L054B19: db $2B
L054B1A: db $F4
L054B1B: db $02
L054B1C: db $25
L054B1D: db $FC
L054B1E: db $04
L054B1F: db $20
L054B20: db $04
L054B21: db $06
L054B22: db $20
L054B23: db $0C
L054B24: db $08
L054B25: db $30
L054B26: db $04
L054B27: db $0A
L054B28: db $00
L054B29: db $01
L054B2A: db $00
L054B2B: db $C0
L054B2C: db $50
L054B2D: db $17
L054B2E: db $32
L054B2F: db $4B
L054B30: db $F0
L054B31: db $00
L054B32: db $05
L054B33: db $29
L054B34: db $F4
L054B35: db $00
L054B36: db $28
L054B37: db $FC
L054B38: db $02
L054B39: db $20
L054B3A: db $04
L054B3B: db $04
L054B3C: db $20
L054B3D: db $0C
L054B3E: db $06
L054B3F: db $30
L054B40: db $04
L054B41: db $08
L054B42: db $00
L054B43: db $01
L054B44: db $00
L054B45: db $60
L054B46: db $51
L054B47: db $17
L054B48: db $4C
L054B49: db $4B
L054B4A: db $F0
L054B4B: db $00
L054B4C: db $05
L054B4D: db $1A
L054B4E: db $FA
L054B4F: db $00
L054B50: db $22
L054B51: db $02
L054B52: db $02
L054B53: db $22
L054B54: db $0A
L054B55: db $04
L054B56: db $32
L054B57: db $02
L054B58: db $06
L054B59: db $32
L054B5A: db $0A
L054B5B: db $08
L054B5C: db $00
L054B5D: db $01
L054B5E: db $02
L054B5F: db $60
L054B60: db $51
L054B61: db $17
L054B62: db $4C
L054B63: db $4B
L054B64: db $F0
L054B65: db $00
L054B66: db $00
L054B67: db $01
L054B68: db $02
L054B69: db $00
L054B6A: db $52
L054B6B: db $17
L054B6C: db $70
L054B6D: db $4B
L054B6E: db $00
L054B6F: db $00
L054B70: db $07
L054B71: db $21
L054B72: db $EA
L054B73: db $00
L054B74: db $29
L054B75: db $F2
L054B76: db $02
L054B77: db $29
L054B78: db $FA
L054B79: db $04
L054B7A: db $29
L054B7B: db $02
L054B7C: db $06
L054B7D: db $39
L054B7E: db $F4
L054B7F: db $08
L054B80: db $39
L054B81: db $FC
L054B82: db $0A
L054B83: db $39
L054B84: db $04
L054B85: db $0C
L054B86: db $00
L054B87: db $01
L054B88: db $00
L054B89: db $E0
L054B8A: db $52
L054B8B: db $17
L054B8C: db $90
L054B8D: db $4B
L054B8E: db $00
L054B8F: db $00
L054B90: db $07
L054B91: db $31
L054B92: db $EC
L054B93: db $00
L054B94: db $29
L054B95: db $F4
L054B96: db $02
L054B97: db $29
L054B98: db $FC
L054B99: db $04
L054B9A: db $29
L054B9B: db $04
L054B9C: db $06
L054B9D: db $39
L054B9E: db $F4
L054B9F: db $08
L054BA0: db $39
L054BA1: db $FC
L054BA2: db $0A
L054BA3: db $39
L054BA4: db $04
L054BA5: db $0C
L054BA6: db $00
L054BA7: db $01
L054BA8: db $00
L054BA9: db $C0
L054BAA: db $53
L054BAB: db $17
L054BAC: db $BA
L054BAD: db $4B
L054BAE: db $F6
L054BAF: db $00
L054BB0: db $00
L054BB1: db $01
L054BB2: db $02
L054BB3: db $C0
L054BB4: db $53
L054BB5: db $17
L054BB6: db $BA
L054BB7: db $4B
L054BB8: db $F6
L054BB9: db $00
L054BBA: db $05
L054BBB: db $18
L054BBC: db $01
L054BBD: db $00
L054BBE: db $18
L054BBF: db $09
L054BC0: db $02
L054BC1: db $28
L054BC2: db $FC
L054BC3: db $04
L054BC4: db $28
L054BC5: db $04
L054BC6: db $06
L054BC7: db $28
L054BC8: db $0C
L054BC9: db $08
L054BCA: db $00
L054BCB: db $60
L054BCC: db $54
L054BCD: db $17
L054BCE: db $DA
L054BCF: db $4B
L054BD0: db $F6
L054BD1: db $00
L054BD2: db $20
L054BD3: db $60
L054BD4: db $54
L054BD5: db $17
L054BD6: db $DA
L054BD7: db $4B
L054BD8: db $0A
L054BD9: db $00
L054BDA: db $04
L054BDB: db $38
L054BDC: db $FC
L054BDD: db $00
L054BDE: db $38
L054BDF: db $04
L054BE0: db $02
L054BE1: db $38
L054BE2: db $0C
L054BE3: db $04
L054BE4: db $38
L054BE5: db $14
L054BE6: db $06
L054BE7: db $00
L054BE8: db $01
L054BE9: db $02
L054BEA: db $E0
L054BEB: db $54
L054BEC: db $17
L054BED: db $FB
L054BEE: db $4B
L054BEF: db $F6
L054BF0: db $00
L054BF1: db $00
L054BF2: db $01
L054BF3: db $15
L054BF4: db $E0
L054BF5: db $54
L054BF6: db $17
L054BF7: db $FB
L054BF8: db $4B
L054BF9: db $F6
L054BFA: db $00
L054BFB: db $07
L054BFC: db $1D
L054BFD: db $F4
L054BFE: db $00
L054BFF: db $18
L054C00: db $FC
L054C01: db $02
L054C02: db $18
L054C03: db $04
L054C04: db $04
L054C05: db $18
L054C06: db $0C
L054C07: db $06
L054C08: db $28
L054C09: db $FC
L054C0A: db $08
L054C0B: db $28
L054C0C: db $04
L054C0D: db $0A
L054C0E: db $28
L054C0F: db $0C
L054C10: db $0C
L054C11: db $00
L054C12: db $01
L054C13: db $00
L054C14: db $C0
L054C15: db $55
L054C16: db $17
L054C17: db $1B
L054C18: db $4C
L054C19: db $F6
L054C1A: db $00
L054C1B: db $06
L054C1C: db $18
L054C1D: db $F9
L054C1E: db $00
L054C1F: db $18
L054C20: db $01
L054C21: db $02
L054C22: db $28
L054C23: db $09
L054C24: db $04
L054C25: db $21
L054C26: db $11
L054C27: db $06
L054C28: db $28
L054C29: db $F9
L054C2A: db $08
L054C2B: db $28
L054C2C: db $01
L054C2D: db $0A
L054C2E: db $00
L054C2F: db $01
L054C30: db $02
L054C31: db $C0
L054C32: db $55
L054C33: db $17
L054C34: db $1B
L054C35: db $4C
L054C36: db $F6
L054C37: db $00
L054C38: db $00
L054C39: db $01
L054C3A: db $64
L054C3B: db $80
L054C3C: db $56
L054C3D: db $17
L054C3E: db $42
L054C3F: db $4C
L054C40: db $F8
L054C41: db $00
L054C42: db $07
L054C43: db $3B
L054C44: db $F5
L054C45: db $00
L054C46: db $30
L054C47: db $FD
L054C48: db $02
L054C49: db $30
L054C4A: db $05
L054C4B: db $04
L054C4C: db $30
L054C4D: db $0D
L054C4E: db $06
L054C4F: db $20
L054C50: db $FF
L054C51: db $08
L054C52: db $20
L054C53: db $07
L054C54: db $0A
L054C55: db $23
L054C56: db $0F
L054C57: db $0C
L054C58: db $00
L054C59: db $01
L054C5A: db $00
L054C5B: db $60
L054C5C: db $57
L054C5D: db $17
L054C5E: db $62
L054C5F: db $4C
L054C60: db $F8
L054C61: db $00
L054C62: db $06
L054C63: db $3A
L054C64: db $FC
L054C65: db $00
L054C66: db $3A
L054C67: db $04
L054C68: db $02
L054C69: db $3B
L054C6A: db $0C
L054C6B: db $04
L054C6C: db $2A
L054C6D: db $FC
L054C6E: db $06
L054C6F: db $2A
L054C70: db $04
L054C71: db $08
L054C72: db $2B
L054C73: db $0C
L054C74: db $0A
L054C75: db $00
L054C76: db $01
L054C77: db $51
L054C78: db $20
L054C79: db $58
L054C7A: db $17
L054C7B: db $7F
L054C7C: db $4C
L054C7D: db $00
L054C7E: db $00
L054C7F: db $08
L054C80: db $24
L054C81: db $E4
L054C82: db $00
L054C83: db $2E
L054C84: db $EC
L054C85: db $02
L054C86: db $28
L054C87: db $F4
L054C88: db $04
L054C89: db $2D
L054C8A: db $FC
L054C8B: db $06
L054C8C: db $1E
L054C8D: db $03
L054C8E: db $08
L054C8F: db $2E
L054C90: db $04
L054C91: db $0A
L054C92: db $39
L054C93: db $0C
L054C94: db $0C
L054C95: db $29
L054C96: db $0B
L054C97: db $0E
L054C98: db $00
L054C99: db $01
L054C9A: db $00
L054C9B: db $20
L054C9C: db $59
L054C9D: db $17
L054C9E: db $A2
L054C9F: db $4C
L054CA0: db $00
L054CA1: db $00
L054CA2: db $06
L054CA3: db $30
L054CA4: db $F4
L054CA5: db $00
L054CA6: db $2D
L054CA7: db $FC
L054CA8: db $02
L054CA9: db $2C
L054CAA: db $04
L054CAB: db $04
L054CAC: db $31
L054CAD: db $0C
L054CAE: db $06
L054CAF: db $3D
L054CB0: db $FC
L054CB1: db $08
L054CB2: db $3C
L054CB3: db $04
L054CB4: db $0A
L054CB5: db $00
L054CB6: db $01
L054CB7: db $02
L054CB8: db $E0
L054CB9: db $59
L054CBA: db $17
L054CBB: db $BF
L054CBC: db $4C
L054CBD: db $04
L054CBE: db $14
L054CBF: db $07
L054CC0: db $08
L054CC1: db $EC
L054CC2: db $00
L054CC3: db $08
L054CC4: db $F4
L054CC5: db $02
L054CC6: db $08
L054CC7: db $FC
L054CC8: db $04
L054CC9: db $18
L054CCA: db $EC
L054CCB: db $06
L054CCC: db $18
L054CCD: db $F4
L054CCE: db $08
L054CCF: db $18
L054CD0: db $FC
L054CD1: db $0A
L054CD2: db $18
L054CD3: db $04
L054CD4: db $0C
L054CD5: db $00
L054CD6: db $01
L054CD7: db $02
L054CD8: db $C0
L054CD9: db $5A
L054CDA: db $17
L054CDB: db $DF
L054CDC: db $4C
L054CDD: db $00
L054CDE: db $0A
L054CDF: db $07
L054CE0: db $0D
L054CE1: db $FC
L054CE2: db $00
L054CE3: db $0F
L054CE4: db $04
L054CE5: db $02
L054CE6: db $2B
L054CE7: db $E4
L054CE8: db $04
L054CE9: db $26
L054CEA: db $EC
L054CEB: db $06
L054CEC: db $24
L054CED: db $F4
L054CEE: db $08
L054CEF: db $1D
L054CF0: db $FC
L054CF1: db $0A
L054CF2: db $1F
L054CF3: db $04
L054CF4: db $0C
L054CF5: db $00
L054CF6: db $01
L054CF7: db $02
L054CF8: db $A0
L054CF9: db $5B
L054CFA: db $17
L054CFB: db $FF
L054CFC: db $4C
L054CFD: db $00
L054CFE: db $00
L054CFF: db $06
L054D00: db $28
L054D01: db $EC
L054D02: db $00
L054D03: db $25
L054D04: db $F4
L054D05: db $02
L054D06: db $23
L054D07: db $FC
L054D08: db $04
L054D09: db $35
L054D0A: db $F4
L054D0B: db $06
L054D0C: db $33
L054D0D: db $FC
L054D0E: db $08
L054D0F: db $38
L054D10: db $04
L054D11: db $0A
L054D12: db $00
L054D13: db $01
L054D14: db $00
L054D15: db $60
L054D16: db $5C
L054D17: db $17
L054D18: db $1C
L054D19: db $4D
L054D1A: db $FE
L054D1B: db $12
L054D1C: db $06
L054D1D: db $08
L054D1E: db $FD
L054D1F: db $00
L054D20: db $08
L054D21: db $05
L054D22: db $02
L054D23: db $05
L054D24: db $0D
L054D25: db $04
L054D26: db $18
L054D27: db $FA
L054D28: db $06
L054D29: db $18
L054D2A: db $02
L054D2B: db $08
L054D2C: db $1E
L054D2D: db $0A
L054D2E: db $0A
L054D2F: db $00
L054D30: db $01
L054D31: db $02
L054D32: db $20
L054D33: db $5D
L054D34: db $17
L054D35: db $39
L054D36: db $4D
L054D37: db $FC
L054D38: db $0C
L054D39: db $05
L054D3A: db $14
L054D3B: db $F2
L054D3C: db $00
L054D3D: db $10
L054D3E: db $FA
L054D3F: db $02
L054D40: db $10
L054D41: db $02
L054D42: db $04
L054D43: db $20
L054D44: db $FA
L054D45: db $06
L054D46: db $20
L054D47: db $02
L054D48: db $08
L054D49: db $00
L054D4A: db $01
L054D4B: db $02
L054D4C: db $00
L054D4D: db $45
L054D4E: db $17
L054D4F: db $53
L054D50: db $4D
L054D51: db $00
L054D52: db $00
L054D53: db $06
L054D54: db $30
L054D55: db $EC
L054D56: db $00
L054D57: db $2D
L054D58: db $F4
L054D59: db $02
L054D5A: db $2D
L054D5B: db $FC
L054D5C: db $04
L054D5D: db $34
L054D5E: db $04
L054D5F: db $06
L054D60: db $38
L054D61: db $0C
L054D62: db $08
L054D63: db $3D
L054D64: db $F4
L054D65: db $0A
L054D66: db $00
L054D67: db $01
L054D68: db $00
L054D69: db $C0
L054D6A: db $45
L054D6B: db $17
L054D6C: db $70
L054D6D: db $4D
L054D6E: db $F8
L054D6F: db $00
L054D70: db $06
L054D71: db $20
L054D72: db $FC
L054D73: db $00
L054D74: db $20
L054D75: db $04
L054D76: db $02
L054D77: db $20
L054D78: db $0C
L054D79: db $04
L054D7A: db $30
L054D7B: db $FC
L054D7C: db $06
L054D7D: db $30
L054D7E: db $04
L054D7F: db $08
L054D80: db $30
L054D81: db $0C
L054D82: db $0A
L054D83: db $60
L054D84: db $01
L054D85: db $00
L054D86: db $C0
L054D87: db $45
L054D88: db $17
L054D89: db $70
L054D8A: db $4D
L054D8B: db $08
L054D8C: db $0C
L054D8D: db $00
L054D8E: db $01
L054D8F: db $00
L054D90: db $C0
L054D91: db $5D
L054D92: db $17
L054D93: db $A1
L054D94: db $4D
L054D95: db $00
L054D96: db $00
L054D97: db $00
L054D98: db $01
L054D99: db $05
L054D9A: db $C0
L054D9B: db $5D
L054D9C: db $17
L054D9D: db $A1
L054D9E: db $4D
L054D9F: db $00
L054DA0: db $00
L054DA1: db $05
L054DA2: db $23
L054DA3: db $F9
L054DA4: db $00
L054DA5: db $23
L054DA6: db $01
L054DA7: db $02
L054DA8: db $34
L054DA9: db $F4
L054DAA: db $04
L054DAB: db $33
L054DAC: db $FC
L054DAD: db $06
L054DAE: db $33
L054DAF: db $04
L054DB0: db $08
L054DB1: db $20
L054DB2: db $01
L054DB3: db $00
L054DB4: db $C0
L054DB5: db $5D
L054DB6: db $17
L054DB7: db $A1
L054DB8: db $4D
L054DB9: db $00
L054DBA: db $00
L054DBB: db $40
L054DBC: db $01
L054DBD: db $00
L054DBE: db $C0
L054DBF: db $5D
L054DC0: db $17
L054DC1: db $A1
L054DC2: db $4D
L054DC3: db $00
L054DC4: db $04
L054DC5: db $60
L054DC6: db $01
L054DC7: db $00
L054DC8: db $C0
L054DC9: db $5D
L054DCA: db $17
L054DCB: db $A1
L054DCC: db $4D
L054DCD: db $00
L054DCE: db $04
L054DCF: db $00
L054DD0: db $01
L054DD1: db $00
L054DD2: db $60
L054DD3: db $5E
L054DD4: db $17
L054DD5: db $D9
L054DD6: db $4D
L054DD7: db $00
L054DD8: db $00
L054DD9: db $06
L054DDA: db $24
L054DDB: db $FD
L054DDC: db $00
L054DDD: db $24
L054DDE: db $05
L054DDF: db $02
L054DE0: db $18
L054DE1: db $0D
L054DE2: db $04
L054DE3: db $34
L054DE4: db $FC
L054DE5: db $06
L054DE6: db $34
L054DE7: db $04
L054DE8: db $08
L054DE9: db $26
L054DEA: db $0C
L054DEB: db $0A
L054DEC: db $00;X
L054DED: db $01;X
L054DEE: db $00;X
L054DEF: db $20;X
L054DF0: db $5F;X
L054DF1: db $17;X
L054DF2: db $F6;X
L054DF3: db $4D;X
L054DF4: db $00;X
L054DF5: db $00;X
L054DF6: db $07;X
L054DF7: db $2C;X
L054DF8: db $F6;X
L054DF9: db $00;X
L054DFA: db $2C;X
L054DFB: db $FE;X
L054DFC: db $02;X
L054DFD: db $20;X
L054DFE: db $06;X
L054DFF: db $04;X
L054E00: db $3C;X
L054E01: db $F5;X
L054E02: db $06;X
L054E03: db $3C;X
L054E04: db $FD;X
L054E05: db $08;X
L054E06: db $30;X
L054E07: db $05;X
L054E08: db $0A;X
L054E09: db $29;X
L054E0A: db $0D;X
L054E0B: db $0C;X
L054E0C: db $00
L054E0D: db $01
L054E0E: db $00
L054E0F: db $00
L054E10: db $60
L054E11: db $17
L054E12: db $16
L054E13: db $4E
L054E14: db $00
L054E15: db $1E
L054E16: db $07
L054E17: db $06
L054E18: db $EC
L054E19: db $00
L054E1A: db $12
L054E1B: db $F4
L054E1C: db $02
L054E1D: db $10
L054E1E: db $FC
L054E1F: db $04
L054E20: db $12
L054E21: db $04
L054E22: db $06
L054E23: db $13
L054E24: db $0C
L054E25: db $08
L054E26: db $1E
L054E27: db $EC
L054E28: db $0A
L054E29: db $20
L054E2A: db $FC
L054E2B: db $0C
L054E2C: db $60
L054E2D: db $01
L054E2E: db $00
L054E2F: db $00
L054E30: db $60
L054E31: db $17
L054E32: db $16
L054E33: db $4E
L054E34: db $02
L054E35: db $F2
L054E36: db $00
L054E37: db $01
L054E38: db $00
L054E39: db $E0
L054E3A: db $60
L054E3B: db $17
L054E3C: db $40
L054E3D: db $4E
L054E3E: db $00
L054E3F: db $00
L054E40: db $05
L054E41: db $3A
L054E42: db $EC
L054E43: db $00
L054E44: db $37
L054E45: db $F4
L054E46: db $02
L054E47: db $34
L054E48: db $FC
L054E49: db $04
L054E4A: db $32
L054E4B: db $04
L054E4C: db $06
L054E4D: db $36
L054E4E: db $0C
L054E4F: db $08
L054E50: db $00
L054E51: db $01
L054E52: db $00
L054E53: db $E0
L054E54: db $70
L054E55: db $17
L054E56: db $5A
L054E57: db $4E
L054E58: db $F8
L054E59: db $00
L054E5A: db $03
L054E5B: db $28
L054E5C: db $F4
L054E5D: db $00
L054E5E: db $28
L054E5F: db $FC
L054E60: db $02
L054E61: db $20
L054E62: db $04
L054E63: db $04
L054E64: db $00
L054E65: db $01
L054E66: db $00
L054E67: db $E0
L054E68: db $70
L054E69: db $17
L054E6A: db $5A
L054E6B: db $4E
L054E6C: db $F8
L054E6D: db $FF
L054E6E: db $00
L054E6F: db $01
L054E70: db $00
L054E71: db $E0
L054E72: db $70
L054E73: db $17
L054E74: db $5A
L054E75: db $4E
L054E76: db $F8
L054E77: db $FE
L054E78: db $00
L054E79: db $40
L054E7A: db $71
L054E7B: db $17
L054E7C: db $80
L054E7D: db $4E
L054E7E: db $00
L054E7F: db $00
L054E80: db $03
L054E81: db $30
L054E82: db $FC
L054E83: db $00
L054E84: db $2E
L054E85: db $04
L054E86: db $02
L054E87: db $3E
L054E88: db $04
L054E89: db $04
L054E8A: db $00
L054E8B: db $A0
L054E8C: db $71
L054E8D: db $17
L054E8E: db $92
L054E8F: db $4E
L054E90: db $00
L054E91: db $00
L054E92: db $03
L054E93: db $2F
L054E94: db $FB
L054E95: db $00
L054E96: db $2F
L054E97: db $03
L054E98: db $02
L054E99: db $33
L054E9A: db $0B
L054E9B: db $04
L054E9C: db $00
L054E9D: db $00
L054E9E: db $72
L054E9F: db $17
L054EA0: db $A4
L054EA1: db $4E
L054EA2: db $00
L054EA3: db $00
L054EA4: db $04
L054EA5: db $2E
L054EA6: db $F8
L054EA7: db $00
L054EA8: db $2E
L054EA9: db $00
L054EAA: db $02
L054EAB: db $30
L054EAC: db $08
L054EAD: db $04
L054EAE: db $3E
L054EAF: db $F8
L054EB0: db $06
L054EB1: db $00
L054EB2: db $01
L054EB3: db $05
L054EB4: db $80
L054EB5: db $6E
L054EB6: db $17
L054EB7: db $BB
L054EB8: db $4E
L054EB9: db $FC
L054EBA: db $00
L054EBB: db $05
L054EBC: db $18
L054EBD: db $FB
L054EBE: db $00
L054EBF: db $20
L054EC0: db $03
L054EC1: db $02
L054EC2: db $30
L054EC3: db $EE
L054EC4: db $04
L054EC5: db $25
L054EC6: db $F4
L054EC7: db $06
L054EC8: db $28
L054EC9: db $FC
L054ECA: db $08
L054ECB: db $00
L054ECC: db $20
L054ECD: db $6F
L054ECE: db $17
L054ECF: db $DB
L054ED0: db $4E
L054ED1: db $00
L054ED2: db $00
L054ED3: db $00
L054ED4: db $20
L054ED5: db $6F
L054ED6: db $17
L054ED7: db $DB
L054ED8: db $4E
L054ED9: db $FC
L054EDA: db $00
L054EDB: db $04
L054EDC: db $38
L054EDD: db $F4
L054EDE: db $00
L054EDF: db $38
L054EE0: db $FC
L054EE1: db $02
L054EE2: db $30
L054EE3: db $04
L054EE4: db $04
L054EE5: db $34
L054EE6: db $0C
L054EE7: db $06
L054EE8: db $00
L054EE9: db $01
L054EEA: db $05
L054EEB: db $A0
L054EEC: db $6F
L054EED: db $17
L054EEE: db $F2
L054EEF: db $4E
L054EF0: db $FC
L054EF1: db $00
L054EF2: db $06
L054EF3: db $28
L054EF4: db $08
L054EF5: db $00
L054EF6: db $20
L054EF7: db $00
L054EF8: db $02
L054EF9: db $18
L054EFA: db $08
L054EFB: db $04
L054EFC: db $18
L054EFD: db $10
L054EFE: db $06
L054EFF: db $28
L054F00: db $10
L054F01: db $08
L054F02: db $1E
L054F03: db $F8
L054F04: db $0A
L054F05: db $00
L054F06: db $01
L054F07: db $05
L054F08: db $60
L054F09: db $70
L054F0A: db $17
L054F0B: db $0F
L054F0C: db $4F
L054F0D: db $04
L054F0E: db $08
L054F0F: db $04
L054F10: db $20
L054F11: db $F4
L054F12: db $00
L054F13: db $20
L054F14: db $FC
L054F15: db $02
L054F16: db $20
L054F17: db $04
L054F18: db $04
L054F19: db $27
L054F1A: db $0C
L054F1B: db $06
L054F1C: db $00
L054F1D: db $01
L054F1E: db $00
L054F1F: db $80
L054F20: db $72
L054F21: db $17
L054F22: db $26
L054F23: db $4F
L054F24: db $F8
L054F25: db $00
L054F26: db $07
L054F27: db $29
L054F28: db $FC
L054F29: db $00
L054F2A: db $20
L054F2B: db $04
L054F2C: db $02
L054F2D: db $20
L054F2E: db $0C
L054F2F: db $04
L054F30: db $15
L054F31: db $14
L054F32: db $06
L054F33: db $39
L054F34: db $FC
L054F35: db $08
L054F36: db $30
L054F37: db $04
L054F38: db $0A
L054F39: db $30
L054F3A: db $0C
L054F3B: db $0C
L054F3C: db $00
L054F3D: db $01
L054F3E: db $00
L054F3F: db $60
L054F40: db $73
L054F41: db $17
L054F42: db $46
L054F43: db $4F
L054F44: db $F8
L054F45: db $00
L054F46: db $06
L054F47: db $18
L054F48: db $03
L054F49: db $00
L054F4A: db $18
L054F4B: db $0B
L054F4C: db $02
L054F4D: db $20
L054F4E: db $14
L054F4F: db $04
L054F50: db $28
L054F51: db $FC
L054F52: db $06
L054F53: db $28
L054F54: db $04
L054F55: db $08
L054F56: db $28
L054F57: db $0C
L054F58: db $0A
L054F59: db $00
L054F5A: db $01
L054F5B: db $02
L054F5C: db $60
L054F5D: db $73
L054F5E: db $17
L054F5F: db $46
L054F60: db $4F
L054F61: db $F8
L054F62: db $00
L054F63: db $00
L054F64: db $20
L054F65: db $74
L054F66: db $17
L054F67: db $6B
L054F68: db $4F
L054F69: db $F8
L054F6A: db $00
L054F6B: db $03
L054F6C: db $38
L054F6D: db $FC
L054F6E: db $00
L054F6F: db $38
L054F70: db $04
L054F71: db $02
L054F72: db $38
L054F73: db $0C
L054F74: db $04
L054F75: db $00
L054F76: db $01
L054F77: db $00
L054F78: db $80
L054F79: db $74
L054F7A: db $17
L054F7B: db $7F
L054F7C: db $4F
L054F7D: db $F8
L054F7E: db $00
L054F7F: db $06
L054F80: db $1C
L054F81: db $FB
L054F82: db $00
L054F83: db $18
L054F84: db $04
L054F85: db $02
L054F86: db $20
L054F87: db $0C
L054F88: db $04
L054F89: db $1E
L054F8A: db $14
L054F8B: db $06
L054F8C: db $28
L054F8D: db $FF
L054F8E: db $08
L054F8F: db $28
L054F90: db $07
L054F91: db $0A
L054F92: db $00
L054F93: db $01
L054F94: db $02
L054F95: db $80
L054F96: db $74
L054F97: db $17
L054F98: db $7F
L054F99: db $4F
L054F9A: db $F8
L054F9B: db $00
L054F9C: db $00
L054F9D: db $01
L054F9E: db $00
L054F9F: db $40
L054FA0: db $75
L054FA1: db $17
L054FA2: db $A6
L054FA3: db $4F
L054FA4: db $F8
L054FA5: db $00
L054FA6: db $03
L054FA7: db $20
L054FA8: db $00
L054FA9: db $00
L054FAA: db $20
L054FAB: db $08
L054FAC: db $02
L054FAD: db $28
L054FAE: db $FC
L054FAF: db $04
L054FB0: db $20
L054FB1: db $01
L054FB2: db $00
L054FB3: db $40
L054FB4: db $75
L054FB5: db $17
L054FB6: db $A6
L054FB7: db $4F
L054FB8: db $08
L054FB9: db $00
L054FBA: db $00
L054FBB: db $01
L054FBC: db $02
L054FBD: db $A0
L054FBE: db $75
L054FBF: db $17
L054FC0: db $C4
L054FC1: db $4F
L054FC2: db $FD
L054FC3: db $00
L054FC4: db $04
L054FC5: db $28
L054FC6: db $F4
L054FC7: db $00
L054FC8: db $28
L054FC9: db $FC
L054FCA: db $02
L054FCB: db $28
L054FCC: db $04
L054FCD: db $04
L054FCE: db $28
L054FCF: db $0C
L054FD0: db $06
L054FD1: db $00
L054FD2: db $01
L054FD3: db $15
L054FD4: db $20
L054FD5: db $76
L054FD6: db $17
L054FD7: db $DB
L054FD8: db $4F
L054FD9: db $F8
L054FDA: db $00
L054FDB: db $06
L054FDC: db $20
L054FDD: db $F4
L054FDE: db $00
L054FDF: db $18
L054FE0: db $FC
L054FE1: db $02
L054FE2: db $18
L054FE3: db $04
L054FE4: db $04
L054FE5: db $30
L054FE6: db $F4
L054FE7: db $06
L054FE8: db $28
L054FE9: db $FC
L054FEA: db $08
L054FEB: db $28
L054FEC: db $04
L054FED: db $0A
L054FEE: db $00
L054FEF: db $01
L054FF0: db $02
L054FF1: db $E0
L054FF2: db $76
L054FF3: db $17
L054FF4: db $F8
L054FF5: db $4F
L054FF6: db $00
L054FF7: db $00
L054FF8: db $05
L054FF9: db $20
L054FFA: db $EC
L054FFB: db $00
L054FFC: db $18
L054FFD: db $F4
L054FFE: db $02
L054FFF: db $28
L055000: db $F4
L055001: db $04
L055002: db $20
L055003: db $FC
L055004: db $06
L055005: db $20
L055006: db $04
L055007: db $08
L055008: db $00
L055009: db $01
L05500A: db $02
L05500B: db $80
L05500C: db $77
L05500D: db $17
L05500E: db $12
L05500F: db $50
L055010: db $04
L055011: db $00
L055012: db $08
L055013: db $18
L055014: db $E4
L055015: db $00
L055016: db $1D
L055017: db $EC
L055018: db $02
L055019: db $1F
L05501A: db $F4
L05501B: db $04
L05501C: db $22
L05501D: db $FC
L05501E: db $06
L05501F: db $2D
L055020: db $EC
L055021: db $08
L055022: db $2F
L055023: db $F4
L055024: db $0A
L055025: db $32
L055026: db $FC
L055027: db $0C
L055028: db $3E
L055029: db $F3
L05502A: db $0E
L05502B: db $00
L05502C: db $01
L05502D: db $02
L05502E: db $80
L05502F: db $78
L055030: db $17
L055031: db $35
L055032: db $50
L055033: db $04
L055034: db $0A
L055035: db $06
L055036: db $15
L055037: db $EB
L055038: db $00
L055039: db $14
L05503A: db $F3
L05503B: db $02
L05503C: db $14
L05503D: db $FB
L05503E: db $04
L05503F: db $26
L055040: db $ED
L055041: db $06
L055042: db $24
L055043: db $F5
L055044: db $08
L055045: db $22
L055046: db $FD
L055047: db $0A
L055048: db $00
L055049: db $01
L05504A: db $02
L05504B: db $40
L05504C: db $79
L05504D: db $17
L05504E: db $52
L05504F: db $50
L055050: db $F5
L055051: db $00
L055052: db $08
L055053: db $28
L055054: db $FC
L055055: db $00
L055056: db $28
L055057: db $04
L055058: db $02
L055059: db $2B
L05505A: db $0C
L05505B: db $04
L05505C: db $20
L05505D: db $14
L05505E: db $06
L05505F: db $38
L055060: db $FC
L055061: db $08
L055062: db $38
L055063: db $04
L055064: db $0A
L055065: db $3B
L055066: db $0C
L055067: db $0C
L055068: db $39
L055069: db $14
L05506A: db $0E
L05506B: db $00
L05506C: db $01
L05506D: db $15
L05506E: db $40
L05506F: db $7A
L055070: db $17
L055071: db $75
L055072: db $50
L055073: db $F4
L055074: db $04
L055075: db $08
L055076: db $08
L055077: db $F7
L055078: db $00
L055079: db $10
L05507A: db $FF
L05507B: db $02
L05507C: db $10
L05507D: db $07
L05507E: db $04
L05507F: db $1D
L055080: db $0C
L055081: db $06
L055082: db $20
L055083: db $04
L055084: db $08
L055085: db $2D
L055086: db $0C
L055087: db $0A
L055088: db $20
L055089: db $14
L05508A: db $0C
L05508B: db $38
L05508C: db $04
L05508D: db $0E
L05508E: db $00
L05508F: db $40
L055090: db $7B
L055091: db $17
L055092: db $96
L055093: db $50
L055094: db $F4
L055095: db $04
L055096: db $05
L055097: db $18
L055098: db $F4
L055099: db $00
L05509A: db $18
L05509B: db $FC
L05509C: db $02
L05509D: db $28
L05509E: db $F4
L05509F: db $04
L0550A0: db $28
L0550A1: db $FC
L0550A2: db $06
L0550A3: db $30
L0550A4: db $04
L0550A5: db $08
L0550A6: db $00
L0550A7: db $E0
L0550A8: db $7B
L0550A9: db $17
L0550AA: db $AE
L0550AB: db $50
L0550AC: db $F4
L0550AD: db $0C
L0550AE: db $05
L0550AF: db $10
L0550B0: db $F4
L0550B1: db $00
L0550B2: db $10
L0550B3: db $FC
L0550B4: db $02
L0550B5: db $20
L0550B6: db $F4
L0550B7: db $04
L0550B8: db $20
L0550B9: db $FC
L0550BA: db $06
L0550BB: db $28
L0550BC: db $04
L0550BD: db $08
L0550BE: db $00
L0550BF: db $01
L0550C0: db $00
L0550C1: db $80
L0550C2: db $7C
L0550C3: db $17
L0550C4: db $C8
L0550C5: db $50
L0550C6: db $F4
L0550C7: db $10
L0550C8: db $09
L0550C9: db $0D
L0550CA: db $F0
L0550CB: db $00
L0550CC: db $0A
L0550CD: db $F8
L0550CE: db $02
L0550CF: db $0A
L0550D0: db $00
L0550D1: db $04
L0550D2: db $0A
L0550D3: db $08
L0550D4: db $06
L0550D5: db $08
L0550D6: db $10
L0550D7: db $08
L0550D8: db $1A
L0550D9: db $F8
L0550DA: db $0A
L0550DB: db $1A
L0550DC: db $06
L0550DD: db $0C
L0550DE: db $1E
L0550DF: db $FE
L0550E0: db $0E
L0550E1: db $2A
L0550E2: db $06
L0550E3: db $10
L0550E4: db $00
L0550E5: db $C0
L0550E6: db $67
L0550E7: db $1B
L0550E8: db $EC
L0550E9: db $50
L0550EA: db $00
L0550EB: db $00
L0550EC: db $03
L0550ED: db $0C
L0550EE: db $EC
L0550EF: db $00
L0550F0: db $1C
L0550F1: db $EC
L0550F2: db $02
L0550F3: db $12
L0550F4: db $F4
L0550F5: db $04
L0550F6: db $00
L0550F7: db $01
L0550F8: db $15
L0550F9: db $20
L0550FA: db $68
L0550FB: db $1B
L0550FC: db $00
L0550FD: db $51
L0550FE: db $00
L0550FF: db $12
L055100: db $04
L055101: db $10
L055102: db $FC
L055103: db $00
L055104: db $10
L055105: db $04
L055106: db $02
L055107: db $20
L055108: db $FC
L055109: db $04
L05510A: db $20
L05510B: db $04
L05510C: db $06
L05510D: db $00
L05510E: db $A0
L05510F: db $68
L055110: db $1B
L055111: db $15
L055112: db $51
L055113: db $00
L055114: db $12
L055115: db $05
L055116: db $06
L055117: db $EC
L055118: db $00
L055119: db $16
L05511A: db $EC
L05511B: db $02
L05511C: db $07
L05511D: db $F4
L05511E: db $04
L05511F: db $17
L055120: db $F4
L055121: db $06
L055122: db $FF
L055123: db $FC
L055124: db $08
L055125: db $00
L055126: db $40
L055127: db $69
L055128: db $1B
L055129: db $2D
L05512A: db $51
L05512B: db $00
L05512C: db $0A
L05512D: db $04
L05512E: db $0E
L05512F: db $EC
L055130: db $00
L055131: db $1E
L055132: db $EC
L055133: db $02
L055134: db $0F
L055135: db $F4
L055136: db $04
L055137: db $1F
L055138: db $F4
L055139: db $06
L05513A: db $00
L05513B: db $01
L05513C: db $05
L05513D: db $A0
L05513E: db $7D
L05513F: db $17
L055140: db $44
L055141: db $51
L055142: db $00
L055143: db $00
L055144: db $04
L055145: db $18
L055146: db $FC
L055147: db $00
L055148: db $20
L055149: db $04
L05514A: db $02
L05514B: db $27
L05514C: db $F4
L05514D: db $04
L05514E: db $28
L05514F: db $FC
L055150: db $06
L055151: db $00;X
L055152: db $20;X
L055153: db $7E;X
L055154: db $17;X
L055155: db $59;X
L055156: db $51;X
L055157: db $00;X
L055158: db $00;X
L055159: db $04;X
L05515A: db $38;X
L05515B: db $F4;X
L05515C: db $00;X
L05515D: db $38;X
L05515E: db $FC;X
L05515F: db $02;X
L055160: db $30;X
L055161: db $04;X
L055162: db $04;X
L055163: db $30;X
L055164: db $0C;X
L055165: db $06;X
L055166: db $00
L055167: db $01
L055168: db $00
L055169: db $00
L05516A: db $76
L05516B: db $19
L05516C: db $70
L05516D: db $51
L05516E: db $F4
L05516F: db $00
L055170: db $07
L055171: db $10
L055172: db $07
L055173: db $00
L055174: db $20
L055175: db $0D
L055176: db $02
L055177: db $20
L055178: db $05
L055179: db $04
L05517A: db $30
L05517B: db $0D
L05517C: db $06
L05517D: db $38
L05517E: db $FD
L05517F: db $08
L055180: db $38
L055181: db $15
L055182: db $0A
L055183: db $30
L055184: db $05
L055185: db $0C
L055186: db $00
L055187: db $01
L055188: db $02
L055189: db $E0
L05518A: db $76
L05518B: db $19
L05518C: db $90
L05518D: db $51
L05518E: db $F8
L05518F: db $00
L055190: db $08
L055191: db $1F
L055192: db $04
L055193: db $00
L055194: db $1E
L055195: db $0C
L055196: db $02
L055197: db $20
L055198: db $FC
L055199: db $04
L05519A: db $2F
L05519B: db $04
L05519C: db $06
L05519D: db $2E
L05519E: db $0C
L05519F: db $08
L0551A0: db $2D
L0551A1: db $14
L0551A2: db $0A
L0551A3: db $32
L0551A4: db $FC
L0551A5: db $0C
L0551A6: db $3D
L0551A7: db $11
L0551A8: db $0E
L0551A9: db $00
L0551AA: db $01
L0551AB: db $02
L0551AC: db $E0
L0551AD: db $77
L0551AE: db $19
L0551AF: db $B3
L0551B0: db $51
L0551B1: db $FC
L0551B2: db $00
L0551B3: db $02
L0551B4: db $18
L0551B5: db $FD
L0551B6: db $00
L0551B7: db $18
L0551B8: db $05
L0551B9: db $02
L0551BA: db $00
L0551BB: db $20
L0551BC: db $78
L0551BD: db $19
L0551BE: db $C2
L0551BF: db $51
L0551C0: db $FC
L0551C1: db $00
L0551C2: db $06
L0551C3: db $28
L0551C4: db $F5
L0551C5: db $00
L0551C6: db $28
L0551C7: db $FD
L0551C8: db $02
L0551C9: db $28
L0551CA: db $05
L0551CB: db $04
L0551CC: db $38
L0551CD: db $FC
L0551CE: db $06
L0551CF: db $38
L0551D0: db $04
L0551D1: db $08
L0551D2: db $38
L0551D3: db $0C
L0551D4: db $0A
L0551D5: db $00
L0551D6: db $01
L0551D7: db $00
L0551D8: db $E0
L0551D9: db $78
L0551DA: db $19
L0551DB: db $DF
L0551DC: db $51
L0551DD: db $FC
L0551DE: db $00
L0551DF: db $02
L0551E0: db $18
L0551E1: db $FD
L0551E2: db $00
L0551E3: db $18
L0551E4: db $05
L0551E5: db $02
L0551E6: db $00
L0551E7: db $01
L0551E8: db $00
L0551E9: db $20
L0551EA: db $79
L0551EB: db $19
L0551EC: db $F0
L0551ED: db $51
L0551EE: db $00
L0551EF: db $00
L0551F0: db $07
L0551F1: db $2C
L0551F2: db $F4
L0551F3: db $00
L0551F4: db $2A
L0551F5: db $FC
L0551F6: db $02
L0551F7: db $2C
L0551F8: db $04
L0551F9: db $04
L0551FA: db $28
L0551FB: db $0C
L0551FC: db $06
L0551FD: db $3C
L0551FE: db $F4
L0551FF: db $08
L055200: db $3A
L055201: db $FC
L055202: db $0A
L055203: db $3C
L055204: db $04
L055205: db $0C
L055206: db $00
L055207: db $01
L055208: db $02
L055209: db $00
L05520A: db $7A
L05520B: db $19
L05520C: db $10
L05520D: db $52
L05520E: db $00
L05520F: db $00
L055210: db $04
L055211: db $22
L055212: db $EE
L055213: db $00
L055214: db $28
L055215: db $F6
L055216: db $02
L055217: db $28
L055218: db $FE
L055219: db $04
L05521A: db $28
L05521B: db $06
L05521C: db $06
L05521D: db $00
L05521E: db $A0
L05521F: db $7E
L055220: db $17
L055221: db $25
L055222: db $52
L055223: db $00
L055224: db $00
L055225: db $03
L055226: db $39
L055227: db $F4
L055228: db $00
L055229: db $38
L05522A: db $FC
L05522B: db $02
L05522C: db $38
L05522D: db $04
L05522E: db $04
L05522F: db $00
L055230: db $01
L055231: db $02
L055232: db $00
L055233: db $7F
L055234: db $17
L055235: db $39
L055236: db $52
L055237: db $00
L055238: db $00
L055239: db $03
L05523A: db $28
L05523B: db $F8
L05523C: db $00
L05523D: db $28
L05523E: db $00
L05523F: db $02
L055240: db $28
L055241: db $08
L055242: db $04
L055243: db $00
L055244: db $60
L055245: db $7F
L055246: db $17
L055247: db $4B
L055248: db $52
L055249: db $00
L05524A: db $00
L05524B: db $03
L05524C: db $38
L05524D: db $F4
L05524E: db $00
L05524F: db $38
L055250: db $FC
L055251: db $02
L055252: db $38
L055253: db $04
L055254: db $04
L055255: db $00
L055256: db $01
L055257: db $02
L055258: db $80
L055259: db $7A
L05525A: db $19
L05525B: db $5F
L05525C: db $52
L05525D: db $00
L05525E: db $00
L05525F: db $04
L055260: db $22
L055261: db $F1
L055262: db $00
L055263: db $28
L055264: db $F9
L055265: db $02
L055266: db $28
L055267: db $01
L055268: db $04
L055269: db $28
L05526A: db $09
L05526B: db $06
L05526C: db $00
L05526D: db $01
L05526E: db $00
L05526F: db $00
L055270: db $7B
L055271: db $19
L055272: db $76
L055273: db $52
L055274: db $00
L055275: db $00
L055276: db $06
L055277: db $28
L055278: db $F7
L055279: db $00
L05527A: db $28
L05527B: db $FF
L05527C: db $02
L05527D: db $28
L05527E: db $07
L05527F: db $04
L055280: db $30
L055281: db $F4
L055282: db $06
L055283: db $38
L055284: db $FC
L055285: db $08
L055286: db $38
L055287: db $04
L055288: db $0A
L055289: db $00
L05528A: db $A0
L05528B: db $7C
L05528C: db $19
L05528D: db $A9
L05528E: db $52
L05528F: db $00
L055290: db $FE
L055291: db $00
L055292: db $A0
L055293: db $7C
L055294: db $19
L055295: db $A9
L055296: db $52
L055297: db $04
L055298: db $FE
L055299: db $00
L05529A: db $A0
L05529B: db $7C
L05529C: db $19
L05529D: db $A9
L05529E: db $52
L05529F: db $06
L0552A0: db $FF
L0552A1: db $00
L0552A2: db $A0
L0552A3: db $7C
L0552A4: db $19
L0552A5: db $A9
L0552A6: db $52
L0552A7: db $07
L0552A8: db $00
L0552A9: db $02
L0552AA: db $16
L0552AB: db $FC
L0552AC: db $00
L0552AD: db $16
L0552AE: db $04
L0552AF: db $02
L0552B0: db $00
L0552B1: db $01
L0552B2: db $02
L0552B3: db $C0
L0552B4: db $7B
L0552B5: db $19
L0552B6: db $BA
L0552B7: db $52
L0552B8: db $00
L0552B9: db $00
L0552BA: db $03
L0552BB: db $28
L0552BC: db $F6
L0552BD: db $00
L0552BE: db $28
L0552BF: db $FE
L0552C0: db $02
L0552C1: db $28
L0552C2: db $06
L0552C3: db $04
L0552C4: db $00
L0552C5: db $01
L0552C6: db $00
L0552C7: db $20
L0552C8: db $7C
L0552C9: db $19
L0552CA: db $CE
L0552CB: db $52
L0552CC: db $00
L0552CD: db $00
L0552CE: db $04
L0552CF: db $27
L0552D0: db $EE
L0552D1: db $00
L0552D2: db $28
L0552D3: db $F6
L0552D4: db $02
L0552D5: db $28
L0552D6: db $FE
L0552D7: db $04
L0552D8: db $28
L0552D9: db $06
L0552DA: db $06
L0552DB: db $87
L0552DC: db $56
L0552DD: db $9E
L0552DE: db $56
L0552DF: db $AD
L0552E0: db $56
L0552E1: db $9E
L0552E2: db $56
L0552E3: db $C4
L0552E4: db $56
L0552E5: db $9E
L0552E6: db $56
L0552E7: db $AD
L0552E8: db $56
L0552E9: db $9E
L0552EA: db $56
L0552EB: db $FF;X
L0552EC: db $FF
L0552ED: db $DB
L0552EE: db $56
L0552EF: db $F5
L0552F0: db $56
L0552F1: db $04
L0552F2: db $57
L0552F3: db $FF
L0552F4: db $FF
L0552F5: db $21
L0552F6: db $57
L0552F7: db $FF
L0552F8: db $FF
L0552F9: db $FF;X
L0552FA: db $FF
L0552FB: db $21
L0552FC: db $57
L0552FD: db $FF
L0552FE: db $FF
L0552FF: db $04
L055300: db $57
L055301: db $FF
L055302: db $FF
L055303: db $DB
L055304: db $56
L055305: db $F5
L055306: db $56
L055307: db $FF;X
L055308: db $FF
L055309: db $3E
L05530A: db $57
L05530B: db $FF
L05530C: db $FF
L05530D: db $FF;X
L05530E: db $FF;X
L05530F: db $3E
L055310: db $57
L055311: db $FF
L055312: db $FF
L055313: db $65
L055314: db $57
L055315: db $7C
L055316: db $57
L055317: db $65
L055318: db $57
L055319: db $91
L05531A: db $57
L05531B: db $65
L05531C: db $57
L05531D: db $91
L05531E: db $57
L05531F: db $65
L055320: db $57
L055321: db $91
L055322: db $57
L055323: db $65
L055324: db $57
L055325: db $91
L055326: db $57
L055327: db $65
L055328: db $57
L055329: db $7C
L05532A: db $57
L05532B: db $3E
L05532C: db $57
L05532D: db $FF
L05532E: db $FF
L05532F: db $FF;X
L055330: db $FF;X
L055331: db $3E;X
L055332: db $57;X
L055333: db $FF;X
L055334: db $FF;X
L055335: db $65
L055336: db $57
L055337: db $7C
L055338: db $57
L055339: db $E1
L05533A: db $57
L05533B: db $FF
L05533C: db $FF
L05533D: db $A6
L05533E: db $57
L05533F: db $FF
L055340: db $FF
L055341: db $D7
L055342: db $57
L055343: db $FF
L055344: db $FF
L055345: db $B0
L055346: db $57
L055347: db $FF
L055348: db $FF
L055349: db $65
L05534A: db $57
L05534B: db $7C
L05534C: db $57
L05534D: db $3E
L05534E: db $57
L05534F: db $FF
L055350: db $FF
L055351: db $FF;X
L055352: db $FF;X
L055353: db $3E;X
L055354: db $57;X
L055355: db $FF;X
L055356: db $FF;X
L055357: db $65
L055358: db $57
L055359: db $7C
L05535A: db $57
L05535B: db $B0
L05535C: db $57
L05535D: db $FF
L05535E: db $FF
L05535F: db $D7
L055360: db $57
L055361: db $FF
L055362: db $FF
L055363: db $A6
L055364: db $57
L055365: db $FF
L055366: db $FF
L055367: db $E1
L055368: db $57
L055369: db $FF
L05536A: db $FF
L05536B: db $65
L05536C: db $57
L05536D: db $7C
L05536E: db $57
L05536F: db $3E
L055370: db $57
L055371: db $FF
L055372: db $FF
L055373: db $FF;X
L055374: db $FF;X
L055375: db $0B
L055376: db $58
L055377: db $FF
L055378: db $FF
L055379: db $FF;X
L05537A: db $FF;X
L05537B: db $25
L05537C: db $58
L05537D: db $43
L05537E: db $58
L05537F: db $FF;X
L055380: db $FF;X
L055381: db $2F;X
L055382: db $58;X
L055383: db $4B;X
L055384: db $58;X
L055385: db $3E;X
L055386: db $57;X
L055387: db $FF;X
L055388: db $FF;X
L055389: db $FF;X
L05538A: db $FF;X
L05538B: db $5D
L05538C: db $58
L05538D: db $74
L05538E: db $58
L05538F: db $FF;X
L055390: db $FF;X
L055391: db $87
L055392: db $56
L055393: db $9E
L055394: db $56
L055395: db $5D
L055396: db $58
L055397: db $74
L055398: db $58
L055399: db $9E
L05539A: db $58
L05539B: db $74
L05539C: db $58
L05539D: db $FF;X
L05539E: db $FF;X
L05539F: db $D3;X
L0553A0: db $58;X
L0553A1: db $FF;X
L0553A2: db $FF;X
L0553A3: db $FF;X
L0553A4: db $FF;X
L0553A5: db $5D;X
L0553A6: db $58;X
L0553A7: db $74;X
L0553A8: db $58;X
L0553A9: db $3E;X
L0553AA: db $57;X
L0553AB: db $FF;X
L0553AC: db $FF;X
L0553AD: db $FF;X
L0553AE: db $FF;X
L0553AF: db $5D
L0553B0: db $58
L0553B1: db $74
L0553B2: db $58
L0553B3: db $B0
L0553B4: db $57
L0553B5: db $FF
L0553B6: db $FF
L0553B7: db $D7
L0553B8: db $57
L0553B9: db $FF
L0553BA: db $FF
L0553BB: db $A6
L0553BC: db $57
L0553BD: db $FF
L0553BE: db $FF
L0553BF: db $E1
L0553C0: db $57
L0553C1: db $FF
L0553C2: db $FF
L0553C3: db $65
L0553C4: db $57
L0553C5: db $7C
L0553C6: db $57
L0553C7: db $3E
L0553C8: db $57
L0553C9: db $FF
L0553CA: db $FF
L0553CB: db $FF;X
L0553CC: db $FF;X
L0553CD: db $5D
L0553CE: db $58
L0553CF: db $74
L0553D0: db $58
L0553D1: db $ED
L0553D2: db $58
L0553D3: db $FF
L0553D4: db $FF
L0553D5: db $07
L0553D6: db $59
L0553D7: db $FF
L0553D8: db $FF
L0553D9: db $ED
L0553DA: db $58
L0553DB: db $FF
L0553DC: db $FF
L0553DD: db $07
L0553DE: db $59
L0553DF: db $FF
L0553E0: db $FF
L0553E1: db $FF;X
L0553E2: db $FF;X
L0553E3: db $9E
L0553E4: db $58
L0553E5: db $74
L0553E6: db $58
L0553E7: db $C9
L0553E8: db $58
L0553E9: db $96
L0553EA: db $58
L0553EB: db $BF
L0553EC: db $58
L0553ED: db $8E
L0553EE: db $58
L0553EF: db $B5
L0553F0: db $58
L0553F1: db $86
L0553F2: db $58
L0553F3: db $B5
L0553F4: db $58
L0553F5: db $86
L0553F6: db $58
L0553F7: db $ED
L0553F8: db $58
L0553F9: db $FF
L0553FA: db $FF
L0553FB: db $07
L0553FC: db $59
L0553FD: db $FF
L0553FE: db $FF
L0553FF: db $FF;X
L055400: db $FF
L055401: db $9E
L055402: db $58
L055403: db $74
L055404: db $58
L055405: db $ED
L055406: db $58
L055407: db $FF
L055408: db $FF
L055409: db $07
L05540A: db $59
L05540B: db $FF
L05540C: db $FF
L05540D: db $FF;X
L05540E: db $FF;X
L05540F: db $1E
L055410: db $59
L055411: db $FF
L055412: db $FF
L055413: db $FF;X
L055414: db $FF;X
L055415: db $3E
L055416: db $57
L055417: db $FF
L055418: db $FF
L055419: db $3E
L05541A: db $57
L05541B: db $FF
L05541C: db $FF
L05541D: db $FF;X
L05541E: db $FF;X
L05541F: db $3E
L055420: db $57
L055421: db $FF
L055422: db $FF
L055423: db $28
L055424: db $59
L055425: db $FF
L055426: db $FF
L055427: db $4F
L055428: db $59
L055429: db $70
L05542A: db $59
L05542B: db $FF;X
L05542C: db $FF;X
L05542D: db $82
L05542E: db $59
L05542F: db $9F
L055430: db $59
L055431: db $AE
L055432: db $59
L055433: db $9F
L055434: db $59
L055435: db $AE
L055436: db $59
L055437: db $9F
L055438: db $59
L055439: db $FF;X
L05543A: db $FF;X
L05543B: db $3E
L05543C: db $57
L05543D: db $FF
L05543E: db $FF
L05543F: db $CB
L055440: db $59
L055441: db $FF
L055442: db $FF
L055443: db $3E
L055444: db $57
L055445: db $FF
L055446: db $FF
L055447: db $FF;X
L055448: db $FF;X
L055449: db $3E
L05544A: db $57
L05544B: db $FF
L05544C: db $FF
L05544D: db $BA
L05544E: db $57
L05544F: db $FF
L055450: db $FF
L055451: db $3E
L055452: db $57
L055453: db $FF
L055454: db $FF
L055455: db $FF;X
L055456: db $FF;X
L055457: db $3E
L055458: db $57
L055459: db $FF
L05545A: db $FF
L05545B: db $EB
L05545C: db $57
L05545D: db $FF
L05545E: db $FF
L05545F: db $3E
L055460: db $57
L055461: db $FF
L055462: db $FF
L055463: db $FF;X
L055464: db $FF;X
L055465: db $EE
L055466: db $59
L055467: db $02
L055468: db $5A
L055469: db $17
L05546A: db $5A
L05546B: db $02
L05546C: db $5A
L05546D: db $EE
L05546E: db $59
L05546F: db $02
L055470: db $5A
L055471: db $FF;X
L055472: db $FF;X
L055473: db $28
L055474: db $59
L055475: db $FF
L055476: db $FF
L055477: db $4F
L055478: db $59
L055479: db $70
L05547A: db $59
L05547B: db $28
L05547C: db $59
L05547D: db $FF
L05547E: db $FF
L05547F: db $FF;X
L055480: db $FF;X
L055481: db $2B
L055482: db $5A
L055483: db $FF
L055484: db $FF
L055485: db $48
L055486: db $5A
L055487: db $FF
L055488: db $FF
L055489: db $2B
L05548A: db $5A
L05548B: db $FF
L05548C: db $FF
L05548D: db $FF;X
L05548E: db $FF;X
L05548F: db $2B
L055490: db $5A
L055491: db $FF
L055492: db $FF
L055493: db $48
L055494: db $5A
L055495: db $FF
L055496: db $FF
L055497: db $68
L055498: db $5A
L055499: db $8C
L05549A: db $5A
L05549B: db $48
L05549C: db $5A
L05549D: db $FF
L05549E: db $FF
L05549F: db $2B
L0554A0: db $5A
L0554A1: db $FF
L0554A2: db $FF
L0554A3: db $FF;X
L0554A4: db $FF;X
L0554A5: db $9B
L0554A6: db $5A
L0554A7: db $FF
L0554A8: db $FF
L0554A9: db $9B
L0554AA: db $5A
L0554AB: db $FF
L0554AC: db $FF
L0554AD: db $65
L0554AE: db $57
L0554AF: db $91
L0554B0: db $57
L0554B1: db $65;X
L0554B2: db $57;X
L0554B3: db $7C;X
L0554B4: db $57;X
L0554B5: db $3E
L0554B6: db $57
L0554B7: db $FF
L0554B8: db $FF
L0554B9: db $FF;X
L0554BA: db $FF;X
L0554BB: db $72
L0554BC: db $5A
L0554BD: db $BE
L0554BE: db $5A
L0554BF: db $72
L0554C0: db $5A
L0554C1: db $BE
L0554C2: db $5A
L0554C3: db $65
L0554C4: db $57
L0554C5: db $91
L0554C6: db $57
L0554C7: db $65;X
L0554C8: db $57;X
L0554C9: db $7C;X
L0554CA: db $57;X
L0554CB: db $3E
L0554CC: db $57
L0554CD: db $FF
L0554CE: db $FF
L0554CF: db $FF;X
L0554D0: db $FF;X
L0554D1: db $3E
L0554D2: db $57
L0554D3: db $FF
L0554D4: db $FF
L0554D5: db $CD
L0554D6: db $5A
L0554D7: db $FF
L0554D8: db $FF
L0554D9: db $F0
L0554DA: db $5A
L0554DB: db $FF
L0554DC: db $FF
L0554DD: db $3E;X
L0554DE: db $57;X
L0554DF: db $FF;X
L0554E0: db $FF;X
L0554E1: db $FF;X
L0554E2: db $FF;X
L0554E3: db $13
L0554E4: db $5B
L0554E5: db $FF
L0554E6: db $FF
L0554E7: db $13
L0554E8: db $5B
L0554E9: db $FF
L0554EA: db $FF
L0554EB: db $65
L0554EC: db $57
L0554ED: db $91
L0554EE: db $57
L0554EF: db $65;X
L0554F0: db $57;X
L0554F1: db $7C;X
L0554F2: db $57;X
L0554F3: db $3E
L0554F4: db $57
L0554F5: db $FF
L0554F6: db $FF
L0554F7: db $FF;X
L0554F8: db $FF;X
L0554F9: db $3E
L0554FA: db $57
L0554FB: db $FF
L0554FC: db $FF
L0554FD: db $E1
L0554FE: db $57
L0554FF: db $FF
L055500: db $FF
L055501: db $A6
L055502: db $57
L055503: db $FF
L055504: db $FF
L055505: db $D7
L055506: db $57
L055507: db $FF
L055508: db $FF
L055509: db $3E
L05550A: db $57
L05550B: db $FF
L05550C: db $FF
L05550D: db $FF;X
L05550E: db $FF;X
L05550F: db $3E
L055510: db $57
L055511: db $FF
L055512: db $FF
L055513: db $D7
L055514: db $57
L055515: db $FF
L055516: db $FF
L055517: db $A6
L055518: db $57
L055519: db $FF
L05551A: db $FF
L05551B: db $E1
L05551C: db $57
L05551D: db $FF
L05551E: db $FF
L05551F: db $3E
L055520: db $57
L055521: db $FF
L055522: db $FF
L055523: db $FF;X
L055524: db $FF;X
L055525: db $36
L055526: db $5B
L055527: db $50
L055528: db $5B
L055529: db $5F
L05552A: db $5B
L05552B: db $50
L05552C: db $5B
L05552D: db $FF;X
L05552E: db $FF
L05552F: db $79
L055530: db $5B
L055531: db $FF
L055532: db $FF
L055533: db $9C
L055534: db $5B
L055535: db $FF
L055536: db $FF
L055537: db $B6
L055538: db $5B
L055539: db $FF
L05553A: db $FF
L05553B: db $FF;X
L05553C: db $FF
L05553D: db $9E
L05553E: db $58
L05553F: db $74
L055540: db $58
L055541: db $65
L055542: db $57
L055543: db $7C
L055544: db $57
L055545: db $3E
L055546: db $57
L055547: db $FF
L055548: db $FF
L055549: db $FF;X
L05554A: db $FF;X
L05554B: db $D3
L05554C: db $5B
L05554D: db $EA
L05554E: db $5B
L05554F: db $FC
L055550: db $5B
L055551: db $EA
L055552: db $5B
L055553: db $10
L055554: db $5C
L055555: db $EA
L055556: db $5B
L055557: db $FC
L055558: db $5B
L055559: db $EA
L05555A: db $5B
L05555B: db $10
L05555C: db $5C
L05555D: db $EA
L05555E: db $5B
L05555F: db $FC
L055560: db $5B
L055561: db $EA
L055562: db $5B
L055563: db $10
L055564: db $5C
L055565: db $EA
L055566: db $5B
L055567: db $FC
L055568: db $5B
L055569: db $EA
L05556A: db $5B
L05556B: db $24
L05556C: db $5C
L05556D: db $3B
L05556E: db $5C
L05556F: db $4A
L055570: db $5C
L055571: db $3B
L055572: db $5C
L055573: db $61
L055574: db $5C
L055575: db $3B
L055576: db $5C
L055577: db $24
L055578: db $5C
L055579: db $3B
L05557A: db $5C
L05557B: db $FF;X
L05557C: db $FF;X
L05557D: db $78
L05557E: db $5C
L05557F: db $8C
L055580: db $5C
L055581: db $9B
L055582: db $5C
L055583: db $8C
L055584: db $5C
L055585: db $AF
L055586: db $5C
L055587: db $8C
L055588: db $5C
L055589: db $C6
L05558A: db $5C
L05558B: db $8C
L05558C: db $5C
L05558D: db $DA
L05558E: db $5C
L05558F: db $FF
L055590: db $FF
L055591: db $FF;X
L055592: db $FF;X
L055593: db $F7
L055594: db $5C
L055595: db $FF
L055596: db $FF
L055597: db $11
L055598: db $5D
L055599: db $FF
L05559A: db $FF
L05559B: db $FF;X
L05559C: db $FF
L05559D: db $28
L05559E: db $5D
L05559F: db $3F
L0555A0: db $5D
L0555A1: db $57
L0555A2: db $5D
L0555A3: db $3F
L0555A4: db $5D
L0555A5: db $6E
L0555A6: db $5D
L0555A7: db $3F
L0555A8: db $5D
L0555A9: db $85
L0555AA: db $5D
L0555AB: db $FF
L0555AC: db $FF
L0555AD: db $A5
L0555AE: db $5D
L0555AF: db $FF
L0555B0: db $FF
L0555B1: db $BF
L0555B2: db $5D
L0555B3: db $FF
L0555B4: db $FF
L0555B5: db $FF;X
L0555B6: db $FF
L0555B7: db $9E
L0555B8: db $58
L0555B9: db $74
L0555BA: db $58
L0555BB: db $FF;X
L0555BC: db $FF;X
L0555BD: db $D9
L0555BE: db $5D
L0555BF: db $FF
L0555C0: db $FF
L0555C1: db $F9
L0555C2: db $5D
L0555C3: db $FF
L0555C4: db $FF
L0555C5: db $F9
L0555C6: db $5D
L0555C7: db $FF
L0555C8: db $FF
L0555C9: db $F9
L0555CA: db $5D
L0555CB: db $FF
L0555CC: db $FF
L0555CD: db $F9
L0555CE: db $5D
L0555CF: db $FF
L0555D0: db $FF
L0555D1: db $1C
L0555D2: db $5E
L0555D3: db $FF
L0555D4: db $FF
L0555D5: db $65
L0555D6: db $57
L0555D7: db $7C
L0555D8: db $57
L0555D9: db $3E
L0555DA: db $57
L0555DB: db $FF
L0555DC: db $FF
L0555DD: db $FF;X
L0555DE: db $FF;X
L0555DF: db $79
L0555E0: db $5B
L0555E1: db $FF
L0555E2: db $FF
L0555E3: db $9C
L0555E4: db $5B
L0555E5: db $FF
L0555E6: db $FF
L0555E7: db $B6
L0555E8: db $5B
L0555E9: db $FF
L0555EA: db $FF
L0555EB: db $28
L0555EC: db $59
L0555ED: db $FF
L0555EE: db $FF
L0555EF: db $4F
L0555F0: db $59
L0555F1: db $70
L0555F2: db $59
L0555F3: db $3C
L0555F4: db $5E
L0555F5: db $70
L0555F6: db $59
L0555F7: db $FF;X
L0555F8: db $FF;X
L0555F9: db $79
L0555FA: db $5B
L0555FB: db $FF
L0555FC: db $FF
L0555FD: db $9C
L0555FE: db $5B
L0555FF: db $FF
L055600: db $FF
L055601: db $B6
L055602: db $5B
L055603: db $FF
L055604: db $FF
L055605: db $53
L055606: db $5E
L055607: db $70
L055608: db $5E
L055609: db $85
L05560A: db $5E
L05560B: db $70
L05560C: db $5E
L05560D: db $85
L05560E: db $5E
L05560F: db $70
L055610: db $5E
L055611: db $FF;X
L055612: db $FF;X
L055613: db $9F
L055614: db $5E
L055615: db $FF
L055616: db $FF
L055617: db $BF
L055618: db $5E
L055619: db $FF
L05561A: db $FF
L05561B: db $3E
L05561C: db $57
L05561D: db $FF
L05561E: db $FF
L05561F: db $FF;X
L055620: db $FF;X
L055621: db $DC
L055622: db $5E
L055623: db $70
L055624: db $5E
L055625: db $F6
L055626: db $5E
L055627: db $0A
L055628: db $5F
L055629: db $3E
L05562A: db $57
L05562B: db $FF
L05562C: db $FF
L05562D: db $FF;X
L05562E: db $FF;X
L05562F: db $42
L055630: db $5F
L055631: db $F5
L055632: db $56
L055633: db $62
L055634: db $5F
L055635: db $FF
L055636: db $FF
L055637: db $6C
L055638: db $5F
L055639: db $FF
L05563A: db $FF
L05563B: db $42
L05563C: db $5F
L05563D: db $F5
L05563E: db $56
L05563F: db $3C
L055640: db $5E
L055641: db $70
L055642: db $59
L055643: db $DC
L055644: db $5E
L055645: db $70
L055646: db $5E
L055647: db $25
L055648: db $5F
L055649: db $0A
L05564A: db $5F
L05564B: db $F6
L05564C: db $5E
L05564D: db $0A
L05564E: db $5F
L05564F: db $3E
L055650: db $57
L055651: db $FF
L055652: db $FF
L055653: db $FF;X
L055654: db $FF;X
L055655: db $6C
L055656: db $5F
L055657: db $FF
L055658: db $FF
L055659: db $89
L05565A: db $5F
L05565B: db $FF
L05565C: db $FF
L05565D: db $AF
L05565E: db $5F
L05565F: db $FF
L055660: db $FF
L055661: db $89
L055662: db $5F
L055663: db $FF
L055664: db $FF
L055665: db $D2
L055666: db $5F
L055667: db $FF
L055668: db $FF
L055669: db $3E
L05566A: db $57
L05566B: db $FF
L05566C: db $FF
L05566D: db $FF;X
L05566E: db $FF;X
L05566F: db $87
L055670: db $56
L055671: db $9E
L055672: db $56
L055673: db $FF;X
L055674: db $FF;X
L055675: db $59
L055676: db $59
L055677: db $70
L055678: db $59
L055679: db $32
L05567A: db $59
L05567B: db $FF
L05567C: db $FF
L05567D: db $48
L05567E: db $57
L05567F: db $FF
L055680: db $FF
L055681: db $59
L055682: db $59
L055683: db $70
L055684: db $59
L055685: db $FF;X
L055686: db $FF;X
L055687: db $00
L055688: db $01
L055689: db $00
L05568A: db $00
L05568B: db $40
L05568C: db $19
L05568D: db $91
L05568E: db $56
L05568F: db $00
L055690: db $00
L055691: db $04
L055692: db $20
L055693: db $FB
L055694: db $00
L055695: db $30
L055696: db $FB
L055697: db $02
L055698: db $21
L055699: db $F3
L05569A: db $04
L05569B: db $3E
L05569C: db $F3
L05569D: db $06
L05569E: db $00
L05569F: db $80
L0556A0: db $40
L0556A1: db $19
L0556A2: db $A6
L0556A3: db $56
L0556A4: db $00
L0556A5: db $00
L0556A6: db $02
L0556A7: db $20
L0556A8: db $03
L0556A9: db $00
L0556AA: db $30
L0556AB: db $03
L0556AC: db $02
L0556AD: db $00
L0556AE: db $01
L0556AF: db $00
L0556B0: db $C0
L0556B1: db $40
L0556B2: db $19
L0556B3: db $B7
L0556B4: db $56
L0556B5: db $00
L0556B6: db $00
L0556B7: db $04
L0556B8: db $20
L0556B9: db $FB
L0556BA: db $00
L0556BB: db $30
L0556BC: db $FB
L0556BD: db $02
L0556BE: db $22
L0556BF: db $F3
L0556C0: db $04
L0556C1: db $3E
L0556C2: db $F3
L0556C3: db $06
L0556C4: db $00
L0556C5: db $01
L0556C6: db $00
L0556C7: db $40
L0556C8: db $41
L0556C9: db $19
L0556CA: db $CE
L0556CB: db $56
L0556CC: db $00
L0556CD: db $00
L0556CE: db $04
L0556CF: db $20
L0556D0: db $FB
L0556D1: db $00
L0556D2: db $30
L0556D3: db $FB
L0556D4: db $02
L0556D5: db $23
L0556D6: db $F3
L0556D7: db $04
L0556D8: db $3E
L0556D9: db $F3
L0556DA: db $06
L0556DB: db $00
L0556DC: db $01
L0556DD: db $00
L0556DE: db $C0
L0556DF: db $41
L0556E0: db $19
L0556E1: db $E5
L0556E2: db $56
L0556E3: db $00
L0556E4: db $00
L0556E5: db $05
L0556E6: db $21
L0556E7: db $F0
L0556E8: db $00
L0556E9: db $1F
L0556EA: db $F8
L0556EB: db $02
L0556EC: db $18
L0556ED: db $00
L0556EE: db $04
L0556EF: db $28
L0556F0: db $FC
L0556F1: db $06
L0556F2: db $28
L0556F3: db $04
L0556F4: db $08
L0556F5: db $00
L0556F6: db $60
L0556F7: db $42
L0556F8: db $19
L0556F9: db $FD
L0556FA: db $56
L0556FB: db $00
L0556FC: db $00
L0556FD: db $02
L0556FE: db $38
L0556FF: db $F7
L055700: db $00
L055701: db $38
L055702: db $FF
L055703: db $02
L055704: db $00
L055705: db $01
L055706: db $00
L055707: db $A0
L055708: db $42
L055709: db $19
L05570A: db $0E
L05570B: db $57
L05570C: db $00
L05570D: db $00
L05570E: db $06
L05570F: db $23
L055710: db $F0
L055711: db $00
L055712: db $20
L055713: db $F8
L055714: db $02
L055715: db $20
L055716: db $00
L055717: db $04
L055718: db $30
L055719: db $FB
L05571A: db $06
L05571B: db $2F
L05571C: db $03
L05571D: db $08
L05571E: db $10
L05571F: db $FB
L055720: db $0A
L055721: db $00
L055722: db $01
L055723: db $00
L055724: db $60
L055725: db $43
L055726: db $19
L055727: db $2B
L055728: db $57
L055729: db $01
L05572A: db $00
L05572B: db $06
L05572C: db $20
L05572D: db $EF
L05572E: db $00
L05572F: db $1F
L055730: db $F7
L055731: db $02
L055732: db $1F
L055733: db $FF
L055734: db $04
L055735: db $2F
L055736: db $FB
L055737: db $06
L055738: db $2F
L055739: db $03
L05573A: db $08
L05573B: db $3F
L05573C: db $FB
L05573D: db $0A
L05573E: db $00
L05573F: db $01
L055740: db $00
L055741: db $20
L055742: db $44
L055743: db $19
L055744: db $52
L055745: db $57
L055746: db $00
L055747: db $00
L055748: db $00
L055749: db $01
L05574A: db $05
L05574B: db $20
L05574C: db $44
L05574D: db $19
L05574E: db $52
L05574F: db $57
L055750: db $00
L055751: db $00
L055752: db $06
L055753: db $27
L055754: db $FA
L055755: db $00
L055756: db $27
L055757: db $02
L055758: db $02
L055759: db $37
L05575A: db $FA
L05575B: db $04
L05575C: db $37
L05575D: db $02
L05575E: db $06
L05575F: db $28
L055760: db $F2
L055761: db $08
L055762: db $3E
L055763: db $F2
L055764: db $0A
L055765: db $00
L055766: db $01
L055767: db $00
L055768: db $E0
L055769: db $44
L05576A: db $19
L05576B: db $6F
L05576C: db $57
L05576D: db $FE
L05576E: db $00
L05576F: db $04
L055770: db $18
L055771: db $F3
L055772: db $00
L055773: db $18
L055774: db $FB
L055775: db $02
L055776: db $18
L055777: db $03
L055778: db $04
L055779: db $18
L05577A: db $0B
L05577B: db $06
L05577C: db $00
L05577D: db $60
L05577E: db $45
L05577F: db $19
L055780: db $84
L055781: db $57
L055782: db $FE
L055783: db $00
L055784: db $04
L055785: db $28
L055786: db $F6
L055787: db $00
L055788: db $28
L055789: db $FE
L05578A: db $02
L05578B: db $28
L05578C: db $06
L05578D: db $04
L05578E: db $38
L05578F: db $FE
L055790: db $06
L055791: db $00
L055792: db $E0
L055793: db $45
L055794: db $19
L055795: db $99
L055796: db $57
L055797: db $FE
L055798: db $00
L055799: db $04
L05579A: db $28
L05579B: db $F8
L05579C: db $00
L05579D: db $28
L05579E: db $00
L05579F: db $02
L0557A0: db $28
L0557A1: db $08
L0557A2: db $04
L0557A3: db $38
L0557A4: db $00
L0557A5: db $06
L0557A6: db $00
L0557A7: db $01
L0557A8: db $00
L0557A9: db $60
L0557AA: db $46
L0557AB: db $19
L0557AC: db $C4
L0557AD: db $57
L0557AE: db $08
L0557AF: db $04
L0557B0: db $60
L0557B1: db $01
L0557B2: db $00
L0557B3: db $60
L0557B4: db $46
L0557B5: db $19
L0557B6: db $C4
L0557B7: db $57
L0557B8: db $F8
L0557B9: db $F6
L0557BA: db $60
L0557BB: db $01
L0557BC: db $02
L0557BD: db $60
L0557BE: db $46
L0557BF: db $19
L0557C0: db $C4
L0557C1: db $57
L0557C2: db $F9
L0557C3: db $F6
L0557C4: db $06
L0557C5: db $10
L0557C6: db $F0
L0557C7: db $00
L0557C8: db $20
L0557C9: db $F3
L0557CA: db $02
L0557CB: db $20
L0557CC: db $FB
L0557CD: db $04
L0557CE: db $28
L0557CF: db $03
L0557D0: db $06
L0557D1: db $30
L0557D2: db $F3
L0557D3: db $08
L0557D4: db $30
L0557D5: db $FB
L0557D6: db $0A
L0557D7: db $00
L0557D8: db $01
L0557D9: db $00
L0557DA: db $20
L0557DB: db $47
L0557DC: db $19
L0557DD: db $F5
L0557DE: db $57
L0557DF: db $06
L0557E0: db $04
L0557E1: db $60
L0557E2: db $01
L0557E3: db $00
L0557E4: db $20
L0557E5: db $47
L0557E6: db $19
L0557E7: db $F5
L0557E8: db $57
L0557E9: db $FC
L0557EA: db $F8
L0557EB: db $40
L0557EC: db $01
L0557ED: db $14
L0557EE: db $20
L0557EF: db $47
L0557F0: db $19
L0557F1: db $F5
L0557F2: db $57
L0557F3: db $F8
L0557F4: db $F8
L0557F5: db $07
L0557F6: db $28
L0557F7: db $E8
L0557F8: db $00
L0557F9: db $28
L0557FA: db $F0
L0557FB: db $02
L0557FC: db $20
L0557FD: db $F8
L0557FE: db $04
L0557FF: db $28
L055800: db $00
L055801: db $06
L055802: db $10
L055803: db $F8
L055804: db $08
L055805: db $18
L055806: db $00
L055807: db $0A
L055808: db $20
L055809: db $08
L05580A: db $0C
L05580B: db $00
L05580C: db $01
L05580D: db $00
L05580E: db $00
L05580F: db $48
L055810: db $19
L055811: db $15
L055812: db $58
L055813: db $00
L055814: db $00
L055815: db $05
L055816: db $20
L055817: db $FC
L055818: db $00
L055819: db $20
L05581A: db $04
L05581B: db $02
L05581C: db $30
L05581D: db $FC
L05581E: db $04
L05581F: db $30
L055820: db $04
L055821: db $06
L055822: db $3D
L055823: db $F4
L055824: db $08
L055825: db $00
L055826: db $01
L055827: db $00
L055828: db $A0
L055829: db $48
L05582A: db $19
L05582B: db $39
L05582C: db $58
L05582D: db $00
L05582E: db $00
L05582F: db $00;X
L055830: db $01;X
L055831: db $00;X
L055832: db $A0;X
L055833: db $48;X
L055834: db $19;X
L055835: db $39;X
L055836: db $58;X
L055837: db $00;X
L055838: db $F6;X
L055839: db $03
L05583A: db $28
L05583B: db $FB
L05583C: db $00
L05583D: db $28
L05583E: db $03
L05583F: db $02
L055840: db $18
L055841: db $FE
L055842: db $04
L055843: db $00
L055844: db $00
L055845: db $49
L055846: db $19
L055847: db $53
L055848: db $58
L055849: db $00
L05584A: db $00
L05584B: db $00;X
L05584C: db $00;X
L05584D: db $49;X
L05584E: db $19;X
L05584F: db $53;X
L055850: db $58;X
L055851: db $00;X
L055852: db $F6;X
L055853: db $03
L055854: db $38
L055855: db $FA
L055856: db $00
L055857: db $38
L055858: db $02
L055859: db $02
L05585A: db $3E
L05585B: db $F2
L05585C: db $04
L05585D: db $00
L05585E: db $01
L05585F: db $00
L055860: db $60
L055861: db $49
L055862: db $19
L055863: db $67
L055864: db $58
L055865: db $FF
L055866: db $00
L055867: db $04
L055868: db $20
L055869: db $FA
L05586A: db $00
L05586B: db $20
L05586C: db $02
L05586D: db $02
L05586E: db $20
L05586F: db $0A
L055870: db $04
L055871: db $19
L055872: db $F2
L055873: db $06
L055874: db $00
L055875: db $E0
L055876: db $49
L055877: db $19
L055878: db $7C
L055879: db $58
L05587A: db $FF
L05587B: db $00
L05587C: db $03
L05587D: db $32
L05587E: db $F9
L05587F: db $00
L055880: db $30
L055881: db $01
L055882: db $02
L055883: db $30
L055884: db $09
L055885: db $04
L055886: db $60
L055887: db $E0
L055888: db $49
L055889: db $19
L05588A: db $7C
L05588B: db $58
L05588C: db $00
L05588D: db $04
L05588E: db $40
L05588F: db $E0
L055890: db $49
L055891: db $19
L055892: db $7C
L055893: db $58
L055894: db $00
L055895: db $04
L055896: db $20
L055897: db $E0
L055898: db $49
L055899: db $19
L05589A: db $7C
L05589B: db $58
L05589C: db $00
L05589D: db $00
L05589E: db $00
L05589F: db $01
L0558A0: db $00
L0558A1: db $40
L0558A2: db $4A
L0558A3: db $19
L0558A4: db $A8
L0558A5: db $58
L0558A6: db $FF
L0558A7: db $00
L0558A8: db $04
L0558A9: db $20
L0558AA: db $FB
L0558AB: db $00
L0558AC: db $20
L0558AD: db $03
L0558AE: db $02
L0558AF: db $20
L0558B0: db $0B
L0558B1: db $04
L0558B2: db $20
L0558B3: db $F3
L0558B4: db $06
L0558B5: db $60
L0558B6: db $01
L0558B7: db $00
L0558B8: db $40
L0558B9: db $4A
L0558BA: db $19
L0558BB: db $A8
L0558BC: db $58
L0558BD: db $00
L0558BE: db $04
L0558BF: db $40
L0558C0: db $01
L0558C1: db $00
L0558C2: db $40
L0558C3: db $4A
L0558C4: db $19
L0558C5: db $A8
L0558C6: db $58
L0558C7: db $00
L0558C8: db $04
L0558C9: db $20
L0558CA: db $01
L0558CB: db $00
L0558CC: db $40
L0558CD: db $4A
L0558CE: db $19
L0558CF: db $A8
L0558D0: db $58
L0558D1: db $00
L0558D2: db $00
L0558D3: db $00;X
L0558D4: db $01;X
L0558D5: db $00;X
L0558D6: db $C0;X
L0558D7: db $4A;X
L0558D8: db $19;X
L0558D9: db $DD;X
L0558DA: db $58;X
L0558DB: db $01;X
L0558DC: db $00;X
L0558DD: db $05;X
L0558DE: db $28;X
L0558DF: db $FB;X
L0558E0: db $00;X
L0558E1: db $28;X
L0558E2: db $03;X
L0558E3: db $02;X
L0558E4: db $38;X
L0558E5: db $FB;X
L0558E6: db $04;X
L0558E7: db $38;X
L0558E8: db $03;X
L0558E9: db $06;X
L0558EA: db $30;X
L0558EB: db $F3;X
L0558EC: db $08;X
L0558ED: db $00
L0558EE: db $01
L0558EF: db $00
L0558F0: db $60
L0558F1: db $4B
L0558F2: db $19
L0558F3: db $F7
L0558F4: db $58
L0558F5: db $FE
L0558F6: db $09
L0558F7: db $05
L0558F8: db $28
L0558F9: db $F2
L0558FA: db $00
L0558FB: db $28
L0558FC: db $FA
L0558FD: db $02
L0558FE: db $28
L0558FF: db $02
L055900: db $04
L055901: db $30
L055902: db $0A
L055903: db $06
L055904: db $38
L055905: db $02
L055906: db $08
L055907: db $00
L055908: db $01
L055909: db $00
L05590A: db $00
L05590B: db $4C
L05590C: db $19
L05590D: db $11
L05590E: db $59
L05590F: db $FD
L055910: db $03
L055911: db $04
L055912: db $32
L055913: db $F3
L055914: db $00
L055915: db $32
L055916: db $FB
L055917: db $02
L055918: db $32
L055919: db $03
L05591A: db $04
L05591B: db $32
L05591C: db $0B
L05591D: db $06
L05591E: db $60
L05591F: db $01
L055920: db $00
L055921: db $00
L055922: db $4C
L055923: db $19
L055924: db $11
L055925: db $59
L055926: db $05
L055927: db $12
L055928: db $00
L055929: db $01
L05592A: db $02
L05592B: db $80
L05592C: db $4C
L05592D: db $19
L05592E: db $3C
L05592F: db $59
L055930: db $F9
L055931: db $00
L055932: db $00
L055933: db $01
L055934: db $05
L055935: db $80
L055936: db $4C
L055937: db $19
L055938: db $3C
L055939: db $59
L05593A: db $F9
L05593B: db $00
L05593C: db $06
L05593D: db $23
L05593E: db $F3
L05593F: db $00
L055940: db $20
L055941: db $FB
L055942: db $02
L055943: db $1B
L055944: db $03
L055945: db $04
L055946: db $30
L055947: db $FB
L055948: db $06
L055949: db $2B
L05594A: db $03
L05594B: db $08
L05594C: db $37
L05594D: db $0B
L05594E: db $0A
L05594F: db $00
L055950: db $01
L055951: db $00
L055952: db $40
L055953: db $4D
L055954: db $19
L055955: db $63
L055956: db $59
L055957: db $F9
L055958: db $00
L055959: db $00
L05595A: db $01
L05595B: db $05
L05595C: db $40
L05595D: db $4D
L05595E: db $19
L05595F: db $63
L055960: db $59
L055961: db $F9
L055962: db $00
L055963: db $04
L055964: db $17
L055965: db $F8
L055966: db $00
L055967: db $20
L055968: db $04
L055969: db $02
L05596A: db $1B
L05596B: db $00
L05596C: db $04
L05596D: db $19
L05596E: db $08
L05596F: db $06
L055970: db $00
L055971: db $C0
L055972: db $4D
L055973: db $19
L055974: db $78
L055975: db $59
L055976: db $F9
L055977: db $00
L055978: db $03
L055979: db $30
L05597A: db $01
L05597B: db $00
L05597C: db $30
L05597D: db $09
L05597E: db $02
L05597F: db $3B
L055980: db $F9
L055981: db $04
L055982: db $00
L055983: db $01
L055984: db $02
L055985: db $20
L055986: db $4E
L055987: db $19
L055988: db $8C
L055989: db $59
L05598A: db $F8
L05598B: db $00
L05598C: db $06
L05598D: db $20
L05598E: db $F3
L05598F: db $00
L055990: db $20
L055991: db $FB
L055992: db $02
L055993: db $20
L055994: db $03
L055995: db $04
L055996: db $20
L055997: db $0B
L055998: db $06
L055999: db $30
L05599A: db $0B
L05599B: db $08
L05599C: db $10
L05599D: db $03
L05599E: db $0A
L05599F: db $00
L0559A0: db $E0
L0559A1: db $4E
L0559A2: db $19
L0559A3: db $A7
L0559A4: db $59
L0559A5: db $F8
L0559A6: db $00
L0559A7: db $02
L0559A8: db $30
L0559A9: db $03
L0559AA: db $00
L0559AB: db $3D
L0559AC: db $FB
L0559AD: db $02
L0559AE: db $00
L0559AF: db $01
L0559B0: db $00
L0559B1: db $20
L0559B2: db $4F
L0559B3: db $19
L0559B4: db $B8
L0559B5: db $59
L0559B6: db $F8
L0559B7: db $00
L0559B8: db $06
L0559B9: db $18
L0559BA: db $F3
L0559BB: db $00
L0559BC: db $1A
L0559BD: db $FB
L0559BE: db $02
L0559BF: db $20
L0559C0: db $03
L0559C1: db $04
L0559C2: db $20
L0559C3: db $0B
L0559C4: db $06
L0559C5: db $30
L0559C6: db $0B
L0559C7: db $08
L0559C8: db $10
L0559C9: db $03
L0559CA: db $0A
L0559CB: db $00
L0559CC: db $01
L0559CD: db $02
L0559CE: db $E0
L0559CF: db $4F
L0559D0: db $19
L0559D1: db $D5
L0559D2: db $59
L0559D3: db $F8
L0559D4: db $00
L0559D5: db $08
L0559D6: db $18
L0559D7: db $F9
L0559D8: db $00
L0559D9: db $18
L0559DA: db $01
L0559DB: db $02
L0559DC: db $20
L0559DD: db $09
L0559DE: db $04
L0559DF: db $20
L0559E0: db $11
L0559E1: db $06
L0559E2: db $30
L0559E3: db $F1
L0559E4: db $08
L0559E5: db $28
L0559E6: db $F9
L0559E7: db $0A
L0559E8: db $28
L0559E9: db $01
L0559EA: db $0C
L0559EB: db $30
L0559EC: db $09
L0559ED: db $0E
L0559EE: db $00
L0559EF: db $01
L0559F0: db $00
L0559F1: db $E0
L0559F2: db $50
L0559F3: db $19
L0559F4: db $F8
L0559F5: db $59
L0559F6: db $F8
L0559F7: db $00
L0559F8: db $03
L0559F9: db $22
L0559FA: db $F3
L0559FB: db $00
L0559FC: db $2A
L0559FD: db $FB
L0559FE: db $02
L0559FF: db $3A
L055A00: db $FB
L055A01: db $04
L055A02: db $00
L055A03: db $40
L055A04: db $51
L055A05: db $19
L055A06: db $0A
L055A07: db $5A
L055A08: db $F8
L055A09: db $00
L055A0A: db $04
L055A0B: db $27
L055A0C: db $03
L055A0D: db $00
L055A0E: db $2B
L055A0F: db $0B
L055A10: db $02
L055A11: db $37
L055A12: db $03
L055A13: db $04
L055A14: db $3B
L055A15: db $0B
L055A16: db $06
L055A17: db $00
L055A18: db $01
L055A19: db $02
L055A1A: db $C0
L055A1B: db $51
L055A1C: db $19
L055A1D: db $21
L055A1E: db $5A
L055A1F: db $F8
L055A20: db $00
L055A21: db $03
L055A22: db $29
L055A23: db $FB
L055A24: db $00
L055A25: db $39
L055A26: db $FB
L055A27: db $02
L055A28: db $25
L055A29: db $F3
L055A2A: db $04
L055A2B: db $00
L055A2C: db $01
L055A2D: db $00
L055A2E: db $20
L055A2F: db $52
L055A30: db $19
L055A31: db $35
L055A32: db $5A
L055A33: db $F8
L055A34: db $00
L055A35: db $06
L055A36: db $27
L055A37: db $01
L055A38: db $00
L055A39: db $27
L055A3A: db $09
L055A3B: db $02
L055A3C: db $37
L055A3D: db $01
L055A3E: db $04
L055A3F: db $37
L055A40: db $09
L055A41: db $06
L055A42: db $2E
L055A43: db $F9
L055A44: db $08
L055A45: db $3E
L055A46: db $F9
L055A47: db $0A
L055A48: db $00
L055A49: db $01
L055A4A: db $4C
L055A4B: db $E0
L055A4C: db $52
L055A4D: db $19
L055A4E: db $52
L055A4F: db $5A
L055A50: db $F8
L055A51: db $00
L055A52: db $07
L055A53: db $2B
L055A54: db $FB
L055A55: db $00
L055A56: db $2A
L055A57: db $03
L055A58: db $02
L055A59: db $2E
L055A5A: db $0B
L055A5B: db $04
L055A5C: db $3B
L055A5D: db $FB
L055A5E: db $06
L055A5F: db $3A
L055A60: db $03
L055A61: db $08
L055A62: db $3E
L055A63: db $0B
L055A64: db $0A
L055A65: db $30
L055A66: db $F3
L055A67: db $0C
L055A68: db $00
L055A69: db $01
L055A6A: db $5E
L055A6B: db $C0
L055A6C: db $53
L055A6D: db $19
L055A6E: db $7C
L055A6F: db $5A
L055A70: db $F8
L055A71: db $00
L055A72: db $00
L055A73: db $01
L055A74: db $02
L055A75: db $C0
L055A76: db $53
L055A77: db $19
L055A78: db $7C
L055A79: db $5A
L055A7A: db $FA
L055A7B: db $F5
L055A7C: db $05
L055A7D: db $20
L055A7E: db $FE
L055A7F: db $00
L055A80: db $20
L055A81: db $06
L055A82: db $02
L055A83: db $30
L055A84: db $FB
L055A85: db $04
L055A86: db $3A
L055A87: db $F3
L055A88: db $06
L055A89: db $3E
L055A8A: db $EB
L055A8B: db $08
L055A8C: db $00
L055A8D: db $60
L055A8E: db $54
L055A8F: db $19
L055A90: db $94
L055A91: db $5A
L055A92: db $F8
L055A93: db $00
L055A94: db $02
L055A95: db $30
L055A96: db $03
L055A97: db $00
L055A98: db $35
L055A99: db $0B
L055A9A: db $02
L055A9B: db $00
L055A9C: db $01
L055A9D: db $02
L055A9E: db $A0
L055A9F: db $54
L055AA0: db $19
L055AA1: db $A5
L055AA2: db $5A
L055AA3: db $00
L055AA4: db $05
L055AA5: db $08
L055AA6: db $28
L055AA7: db $E7
L055AA8: db $00
L055AA9: db $20
L055AAA: db $EF
L055AAB: db $02
L055AAC: db $18
L055AAD: db $F7
L055AAE: db $04
L055AAF: db $16
L055AB0: db $FF
L055AB1: db $06
L055AB2: db $10
L055AB3: db $07
L055AB4: db $08
L055AB5: db $28
L055AB6: db $F7
L055AB7: db $0A
L055AB8: db $26
L055AB9: db $FF
L055ABA: db $0C
L055ABB: db $10
L055ABC: db $EF
L055ABD: db $0E
L055ABE: db $00
L055ABF: db $A0
L055AC0: db $55
L055AC1: db $19
L055AC2: db $C6
L055AC3: db $5A
L055AC4: db $FA
L055AC5: db $05
L055AC6: db $02
L055AC7: db $20
L055AC8: db $03
L055AC9: db $00
L055ACA: db $26
L055ACB: db $0B
L055ACC: db $02
L055ACD: db $00
L055ACE: db $01
L055ACF: db $51
L055AD0: db $60
L055AD1: db $57
L055AD2: db $19
L055AD3: db $D7
L055AD4: db $5A
L055AD5: db $01
L055AD6: db $00
L055AD7: db $08
L055AD8: db $18
L055AD9: db $F4
L055ADA: db $00
L055ADB: db $18
L055ADC: db $FC
L055ADD: db $02
L055ADE: db $2A
L055ADF: db $E6
L055AE0: db $04
L055AE1: db $2A
L055AE2: db $EE
L055AE3: db $06
L055AE4: db $28
L055AE5: db $F6
L055AE6: db $08
L055AE7: db $28
L055AE8: db $FE
L055AE9: db $0A
L055AEA: db $18
L055AEB: db $04
L055AEC: db $0C
L055AED: db $38
L055AEE: db $F6
L055AEF: db $0E
L055AF0: db $00
L055AF1: db $01
L055AF2: db $02
L055AF3: db $60
L055AF4: db $58
L055AF5: db $19
L055AF6: db $FA
L055AF7: db $5A
L055AF8: db $00
L055AF9: db $00
L055AFA: db $08
L055AFB: db $1B
L055AFC: db $EF
L055AFD: db $00
L055AFE: db $22
L055AFF: db $F7
L055B00: db $02
L055B01: db $23
L055B02: db $FF
L055B03: db $04
L055B04: db $20
L055B05: db $07
L055B06: db $06
L055B07: db $19
L055B08: db $E7
L055B09: db $08
L055B0A: db $32
L055B0B: db $F7
L055B0C: db $0A
L055B0D: db $2F
L055B0E: db $EF
L055B0F: db $0C
L055B10: db $30
L055B11: db $E7
L055B12: db $0E
L055B13: db $00
L055B14: db $01
L055B15: db $02
L055B16: db $60
L055B17: db $59
L055B18: db $19
L055B19: db $1D
L055B1A: db $5B
L055B1B: db $FE
L055B1C: db $04
L055B1D: db $08
L055B1E: db $2C
L055B1F: db $EB
L055B20: db $00
L055B21: db $28
L055B22: db $F3
L055B23: db $02
L055B24: db $18
L055B25: db $FB
L055B26: db $04
L055B27: db $28
L055B28: db $FB
L055B29: db $06
L055B2A: db $09
L055B2B: db $03
L055B2C: db $08
L055B2D: db $19
L055B2E: db $03
L055B2F: db $0A
L055B30: db $09
L055B31: db $0B
L055B32: db $0C
L055B33: db $19
L055B34: db $0B
L055B35: db $0E
L055B36: db $00
L055B37: db $01
L055B38: db $00
L055B39: db $E0
L055B3A: db $55
L055B3B: db $19
L055B3C: db $40
L055B3D: db $5B
L055B3E: db $00
L055B3F: db $00
L055B40: db $05
L055B41: db $28
L055B42: db $F3
L055B43: db $00
L055B44: db $28
L055B45: db $FB
L055B46: db $02
L055B47: db $28
L055B48: db $03
L055B49: db $04
L055B4A: db $18
L055B4B: db $FE
L055B4C: db $06
L055B4D: db $18
L055B4E: db $F6
L055B4F: db $08
L055B50: db $00
L055B51: db $20
L055B52: db $57
L055B53: db $19
L055B54: db $58
L055B55: db $5B
L055B56: db $00
L055B57: db $00
L055B58: db $02
L055B59: db $38
L055B5A: db $F8
L055B5B: db $00
L055B5C: db $38
L055B5D: db $00
L055B5E: db $02
L055B5F: db $00
L055B60: db $01
L055B61: db $00
L055B62: db $80
L055B63: db $56
L055B64: db $19
L055B65: db $69
L055B66: db $5B
L055B67: db $00
L055B68: db $00
L055B69: db $05
L055B6A: db $28
L055B6B: db $F5
L055B6C: db $00
L055B6D: db $28
L055B6E: db $FD
L055B6F: db $02
L055B70: db $28
L055B71: db $05
L055B72: db $04
L055B73: db $18
L055B74: db $F5
L055B75: db $06
L055B76: db $18
L055B77: db $FD
L055B78: db $08
L055B79: db $00
L055B7A: db $01
L055B7B: db $00
L055B7C: db $C0
L055B7D: db $65
L055B7E: db $19
L055B7F: db $83
L055B80: db $5B
L055B81: db $FE
L055B82: db $08
L055B83: db $08
L055B84: db $1C
L055B85: db $F3
L055B86: db $00
L055B87: db $1C
L055B88: db $FB
L055B89: db $02
L055B8A: db $14
L055B8B: db $03
L055B8C: db $04
L055B8D: db $14
L055B8E: db $0B
L055B8F: db $06
L055B90: db $2C
L055B91: db $F3
L055B92: db $08
L055B93: db $2C
L055B94: db $FB
L055B95: db $0A
L055B96: db $24
L055B97: db $03
L055B98: db $0C
L055B99: db $2C
L055B9A: db $0B
L055B9B: db $0E
L055B9C: db $00
L055B9D: db $01
L055B9E: db $00
L055B9F: db $C0
L055BA0: db $66
L055BA1: db $19
L055BA2: db $A6
L055BA3: db $5B
L055BA4: db $FE
L055BA5: db $08
L055BA6: db $05
L055BA7: db $1C
L055BA8: db $F3
L055BA9: db $00
L055BAA: db $1C
L055BAB: db $FB
L055BAC: db $02
L055BAD: db $1C
L055BAE: db $03
L055BAF: db $04
L055BB0: db $2C
L055BB1: db $FB
L055BB2: db $06
L055BB3: db $2C
L055BB4: db $03
L055BB5: db $08
L055BB6: db $00
L055BB7: db $01
L055BB8: db $00
L055BB9: db $60
L055BBA: db $67
L055BBB: db $19
L055BBC: db $C0
L055BBD: db $5B
L055BBE: db $FA
L055BBF: db $08
L055BC0: db $06
L055BC1: db $1B
L055BC2: db $F7
L055BC3: db $00
L055BC4: db $1B
L055BC5: db $FF
L055BC6: db $02
L055BC7: db $1B
L055BC8: db $07
L055BC9: db $04
L055BCA: db $2B
L055BCB: db $FC
L055BCC: db $06
L055BCD: db $2B
L055BCE: db $04
L055BCF: db $08
L055BD0: db $2D
L055BD1: db $0C
L055BD2: db $0A
L055BD3: db $00
L055BD4: db $01
L055BD5: db $00
L055BD6: db $60
L055BD7: db $5A
L055BD8: db $19
L055BD9: db $DD
L055BDA: db $5B
L055BDB: db $00
L055BDC: db $00
L055BDD: db $04
L055BDE: db $28
L055BDF: db $FB
L055BE0: db $00
L055BE1: db $18
L055BE2: db $FB
L055BE3: db $02
L055BE4: db $15
L055BE5: db $F3
L055BE6: db $04
L055BE7: db $25
L055BE8: db $F3
L055BE9: db $06
L055BEA: db $00
L055BEB: db $E0
L055BEC: db $5A
L055BED: db $19
L055BEE: db $F2
L055BEF: db $5B
L055BF0: db $00
L055BF1: db $00
L055BF2: db $03
L055BF3: db $20
L055BF4: db $03
L055BF5: db $00
L055BF6: db $30
L055BF7: db $02
L055BF8: db $02
L055BF9: db $38
L055BFA: db $F7
L055BFB: db $04
L055BFC: db $00
L055BFD: db $01
L055BFE: db $00
L055BFF: db $40
L055C00: db $5B
L055C01: db $19
L055C02: db $06
L055C03: db $5C
L055C04: db $00
L055C05: db $00
L055C06: db $03
L055C07: db $28
L055C08: db $FB
L055C09: db $00
L055C0A: db $18
L055C0B: db $FB
L055C0C: db $02
L055C0D: db $22
L055C0E: db $F3
L055C0F: db $04
L055C10: db $00
L055C11: db $01
L055C12: db $00
L055C13: db $A0
L055C14: db $5B
L055C15: db $19
L055C16: db $1A
L055C17: db $5C
L055C18: db $00
L055C19: db $00
L055C1A: db $03
L055C1B: db $18
L055C1C: db $FB
L055C1D: db $00
L055C1E: db $28
L055C1F: db $FB
L055C20: db $02
L055C21: db $22
L055C22: db $F3
L055C23: db $04
L055C24: db $00
L055C25: db $01
L055C26: db $00
L055C27: db $00
L055C28: db $5C
L055C29: db $19
L055C2A: db $2E
L055C2B: db $5C
L055C2C: db $00
L055C2D: db $00
L055C2E: db $04
L055C2F: db $20
L055C30: db $F3
L055C31: db $00
L055C32: db $20
L055C33: db $FB
L055C34: db $02
L055C35: db $20
L055C36: db $03
L055C37: db $04
L055C38: db $10
L055C39: db $FB
L055C3A: db $06
L055C3B: db $00
L055C3C: db $80
L055C3D: db $5C
L055C3E: db $19
L055C3F: db $43
L055C40: db $5C
L055C41: db $00
L055C42: db $00
L055C43: db $02
L055C44: db $30
L055C45: db $F8
L055C46: db $00
L055C47: db $30
L055C48: db $00
L055C49: db $02
L055C4A: db $00
L055C4B: db $01
L055C4C: db $00
L055C4D: db $C0
L055C4E: db $5C
L055C4F: db $19
L055C50: db $54
L055C51: db $5C
L055C52: db $00
L055C53: db $00
L055C54: db $04
L055C55: db $20
L055C56: db $F3
L055C57: db $00
L055C58: db $20
L055C59: db $FB
L055C5A: db $02
L055C5B: db $20
L055C5C: db $03
L055C5D: db $04
L055C5E: db $10
L055C5F: db $FB
L055C60: db $06
L055C61: db $00
L055C62: db $01
L055C63: db $00
L055C64: db $40
L055C65: db $5D
L055C66: db $19
L055C67: db $6B
L055C68: db $5C
L055C69: db $00
L055C6A: db $00
L055C6B: db $04
L055C6C: db $20
L055C6D: db $F3
L055C6E: db $00
L055C6F: db $20
L055C70: db $FB
L055C71: db $02
L055C72: db $20
L055C73: db $03
L055C74: db $04
L055C75: db $10
L055C76: db $FB
L055C77: db $06
L055C78: db $00
L055C79: db $01
L055C7A: db $00
L055C7B: db $C0
L055C7C: db $5D
L055C7D: db $19
L055C7E: db $82
L055C7F: db $5C
L055C80: db $00
L055C81: db $00
L055C82: db $03
L055C83: db $20
L055C84: db $FC
L055C85: db $00
L055C86: db $19
L055C87: db $F7
L055C88: db $02
L055C89: db $1D
L055C8A: db $FF
L055C8B: db $04
L055C8C: db $00
L055C8D: db $20
L055C8E: db $5E
L055C8F: db $19
L055C90: db $94
L055C91: db $5C
L055C92: db $00
L055C93: db $00
L055C94: db $02
L055C95: db $30
L055C96: db $FE
L055C97: db $00
L055C98: db $30
L055C99: db $F6
L055C9A: db $02
L055C9B: db $00
L055C9C: db $01
L055C9D: db $00
L055C9E: db $60
L055C9F: db $5E
L055CA0: db $19
L055CA1: db $A5
L055CA2: db $5C
L055CA3: db $00
L055CA4: db $00
L055CA5: db $03
L055CA6: db $20
L055CA7: db $FC
L055CA8: db $00
L055CA9: db $1F
L055CAA: db $04
L055CAB: db $02
L055CAC: db $12
L055CAD: db $FA
L055CAE: db $04
L055CAF: db $00
L055CB0: db $01
L055CB1: db $00
L055CB2: db $C0
L055CB3: db $5E
L055CB4: db $19
L055CB5: db $B9
L055CB6: db $5C
L055CB7: db $00
L055CB8: db $00
L055CB9: db $04
L055CBA: db $20
L055CBB: db $FC
L055CBC: db $00
L055CBD: db $1F
L055CBE: db $04
L055CBF: db $02
L055CC0: db $10
L055CC1: db $FD
L055CC2: db $04
L055CC3: db $09
L055CC4: db $05
L055CC5: db $06
L055CC6: db $00
L055CC7: db $01
L055CC8: db $00
L055CC9: db $40
L055CCA: db $5F
L055CCB: db $19
L055CCC: db $D0
L055CCD: db $5C
L055CCE: db $00
L055CCF: db $00
L055CD0: db $03
L055CD1: db $20
L055CD2: db $F9
L055CD3: db $00
L055CD4: db $20
L055CD5: db $01
L055CD6: db $02
L055CD7: db $10
L055CD8: db $FE
L055CD9: db $04
L055CDA: db $00
L055CDB: db $01
L055CDC: db $00
L055CDD: db $A0
L055CDE: db $5F
L055CDF: db $19
L055CE0: db $E4
L055CE1: db $5C
L055CE2: db $00
L055CE3: db $00
L055CE4: db $06
L055CE5: db $22
L055CE6: db $02
L055CE7: db $00
L055CE8: db $22
L055CE9: db $FA
L055CEA: db $02
L055CEB: db $32
L055CEC: db $F6
L055CED: db $04
L055CEE: db $32
L055CEF: db $FE
L055CF0: db $06
L055CF1: db $12
L055CF2: db $02
L055CF3: db $08
L055CF4: db $1D
L055CF5: db $F2
L055CF6: db $0A
L055CF7: db $00
L055CF8: db $01
L055CF9: db $00
L055CFA: db $60
L055CFB: db $60
L055CFC: db $19
L055CFD: db $01
L055CFE: db $5D
L055CFF: db $F2
L055D00: db $00
L055D01: db $05
L055D02: db $20
L055D03: db $06
L055D04: db $00
L055D05: db $20
L055D06: db $0E
L055D07: db $02
L055D08: db $30
L055D09: db $06
L055D0A: db $04
L055D0B: db $30
L055D0C: db $0E
L055D0D: db $06
L055D0E: db $10
L055D0F: db $0A
L055D10: db $08
L055D11: db $00
L055D12: db $01
L055D13: db $00
L055D14: db $00
L055D15: db $61
L055D16: db $19
L055D17: db $1B
L055D18: db $5D
L055D19: db $F2
L055D1A: db $00
L055D1B: db $04
L055D1C: db $20
L055D1D: db $03
L055D1E: db $00
L055D1F: db $25
L055D20: db $0B
L055D21: db $02
L055D22: db $30
L055D23: db $07
L055D24: db $04
L055D25: db $15
L055D26: db $0A
L055D27: db $06
L055D28: db $00
L055D29: db $01
L055D2A: db $00
L055D2B: db $80
L055D2C: db $61
L055D2D: db $19
L055D2E: db $32
L055D2F: db $5D
L055D30: db $F9
L055D31: db $00
L055D32: db $04
L055D33: db $20
L055D34: db $03
L055D35: db $00
L055D36: db $20
L055D37: db $0B
L055D38: db $02
L055D39: db $20
L055D3A: db $13
L055D3B: db $04
L055D3C: db $10
L055D3D: db $03
L055D3E: db $06
L055D3F: db $00
L055D40: db $00
L055D41: db $62
L055D42: db $19
L055D43: db $47
L055D44: db $5D
L055D45: db $F9
L055D46: db $00
L055D47: db $05
L055D48: db $22
L055D49: db $FB
L055D4A: db $00
L055D4B: db $30
L055D4C: db $03
L055D4D: db $02
L055D4E: db $30
L055D4F: db $0B
L055D50: db $04
L055D51: db $1F
L055D52: db $F3
L055D53: db $06
L055D54: db $3D
L055D55: db $FB
L055D56: db $08
L055D57: db $00
L055D58: db $01
L055D59: db $00
L055D5A: db $A0
L055D5B: db $62
L055D5C: db $19
L055D5D: db $61
L055D5E: db $5D
L055D5F: db $F9
L055D60: db $00
L055D61: db $04
L055D62: db $20
L055D63: db $03
L055D64: db $00
L055D65: db $20
L055D66: db $0B
L055D67: db $02
L055D68: db $20
L055D69: db $13
L055D6A: db $04
L055D6B: db $10
L055D6C: db $03
L055D6D: db $06
L055D6E: db $00
L055D6F: db $01
L055D70: db $00
L055D71: db $20
L055D72: db $63
L055D73: db $19
L055D74: db $78
L055D75: db $5D
L055D76: db $F9
L055D77: db $00
L055D78: db $04
L055D79: db $20
L055D7A: db $03
L055D7B: db $00
L055D7C: db $20
L055D7D: db $0B
L055D7E: db $02
L055D7F: db $20
L055D80: db $13
L055D81: db $04
L055D82: db $10
L055D83: db $03
L055D84: db $06
L055D85: db $00
L055D86: db $01
L055D87: db $00
L055D88: db $A0
L055D89: db $63
L055D8A: db $19
L055D8B: db $8F
L055D8C: db $5D
L055D8D: db $F9
L055D8E: db $00
L055D8F: db $07
L055D90: db $22
L055D91: db $FA
L055D92: db $00
L055D93: db $1F
L055D94: db $02
L055D95: db $02
L055D96: db $21
L055D97: db $0A
L055D98: db $04
L055D99: db $24
L055D9A: db $12
L055D9B: db $06
L055D9C: db $2F
L055D9D: db $02
L055D9E: db $08
L055D9F: db $31
L055DA0: db $0A
L055DA1: db $0A
L055DA2: db $3E
L055DA3: db $FD
L055DA4: db $0C
L055DA5: db $00
L055DA6: db $01
L055DA7: db $00
L055DA8: db $80
L055DA9: db $64
L055DAA: db $19
L055DAB: db $AF
L055DAC: db $5D
L055DAD: db $00
L055DAE: db $00
L055DAF: db $05
L055DB0: db $1F
L055DB1: db $FE
L055DB2: db $00
L055DB3: db $1F
L055DB4: db $06
L055DB5: db $02
L055DB6: db $2F
L055DB7: db $00
L055DB8: db $04
L055DB9: db $2F
L055DBA: db $08
L055DBB: db $06
L055DBC: db $3F
L055DBD: db $00
L055DBE: db $08
L055DBF: db $00
L055DC0: db $01
L055DC1: db $00
L055DC2: db $20
L055DC3: db $65
L055DC4: db $19
L055DC5: db $C9
L055DC6: db $5D
L055DC7: db $00
L055DC8: db $00
L055DC9: db $05
L055DCA: db $14
L055DCB: db $FE
L055DCC: db $00
L055DCD: db $20
L055DCE: db $04
L055DCF: db $02
L055DD0: db $24
L055DD1: db $FC
L055DD2: db $04
L055DD3: db $30
L055DD4: db $FF
L055DD5: db $06
L055DD6: db $30
L055DD7: db $07
L055DD8: db $08
L055DD9: db $00
L055DDA: db $01
L055DDB: db $02
L055DDC: db $20
L055DDD: db $68
L055DDE: db $19
L055DDF: db $E3
L055DE0: db $5D
L055DE1: db $FE
L055DE2: db $00
L055DE3: db $07
L055DE4: db $23
L055DE5: db $F5
L055DE6: db $00
L055DE7: db $20
L055DE8: db $FD
L055DE9: db $02
L055DEA: db $1E
L055DEB: db $00
L055DEC: db $04
L055DED: db $33
L055DEE: db $F5
L055DEF: db $06
L055DF0: db $30
L055DF1: db $FD
L055DF2: db $08
L055DF3: db $3A
L055DF4: db $05
L055DF5: db $0A
L055DF6: db $2E
L055DF7: db $ED
L055DF8: db $0C
L055DF9: db $00
L055DFA: db $01
L055DFB: db $49
L055DFC: db $00
L055DFD: db $69
L055DFE: db $19
L055DFF: db $03
L055E00: db $5E
L055E01: db $06
L055E02: db $00
L055E03: db $08
L055E04: db $19
L055E05: db $E9
L055E06: db $00
L055E07: db $1B
L055E08: db $F1
L055E09: db $02
L055E0A: db $1C
L055E0B: db $F9
L055E0C: db $04
L055E0D: db $1E
L055E0E: db $01
L055E0F: db $06
L055E10: db $2B
L055E11: db $F1
L055E12: db $08
L055E13: db $2C
L055E14: db $F9
L055E15: db $0A
L055E16: db $3B
L055E17: db $F8
L055E18: db $0C
L055E19: db $10
L055E1A: db $E1
L055E1B: db $0E
L055E1C: db $00
L055E1D: db $01
L055E1E: db $00
L055E1F: db $00
L055E20: db $6A
L055E21: db $19
L055E22: db $26
L055E23: db $5E
L055E24: db $08
L055E25: db $00
L055E26: db $07
L055E27: db $13
L055E28: db $F1
L055E29: db $00
L055E2A: db $13
L055E2B: db $F9
L055E2C: db $02
L055E2D: db $0E
L055E2E: db $01
L055E2F: db $04
L055E30: db $21
L055E31: db $E9
L055E32: db $06
L055E33: db $23
L055E34: db $F1
L055E35: db $08
L055E36: db $23
L055E37: db $F9
L055E38: db $0A
L055E39: db $33
L055E3A: db $F3
L055E3B: db $0C
L055E3C: db $00
L055E3D: db $01
L055E3E: db $00
L055E3F: db $E0
L055E40: db $6A
L055E41: db $19
L055E42: db $46
L055E43: db $5E
L055E44: db $F9
L055E45: db $00
L055E46: db $04
L055E47: db $20
L055E48: db $03
L055E49: db $00
L055E4A: db $20
L055E4B: db $0B
L055E4C: db $02
L055E4D: db $18
L055E4E: db $FB
L055E4F: db $04
L055E50: db $10
L055E51: db $02
L055E52: db $06
L055E53: db $00
L055E54: db $01
L055E55: db $02
L055E56: db $60
L055E57: db $6B
L055E58: db $19
L055E59: db $5D
L055E5A: db $5E
L055E5B: db $FD
L055E5C: db $00
L055E5D: db $06
L055E5E: db $28
L055E5F: db $F0
L055E60: db $00
L055E61: db $28
L055E62: db $F8
L055E63: db $02
L055E64: db $28
L055E65: db $00
L055E66: db $04
L055E67: db $23
L055E68: db $08
L055E69: db $06
L055E6A: db $24
L055E6B: db $E8
L055E6C: db $08
L055E6D: db $18
L055E6E: db $F8
L055E6F: db $0A
L055E70: db $00
L055E71: db $20
L055E72: db $6C
L055E73: db $19
L055E74: db $78
L055E75: db $5E
L055E76: db $FD
L055E77: db $00
L055E78: db $04
L055E79: db $3D
L055E7A: db $F1
L055E7B: db $00
L055E7C: db $38
L055E7D: db $F9
L055E7E: db $02
L055E7F: db $38
L055E80: db $01
L055E81: db $04
L055E82: db $3A
L055E83: db $09
L055E84: db $06
L055E85: db $00
L055E86: db $01
L055E87: db $00
L055E88: db $A0
L055E89: db $6C
L055E8A: db $19
L055E8B: db $8F
L055E8C: db $5E
L055E8D: db $FD
L055E8E: db $00
L055E8F: db $05
L055E90: db $1F
L055E91: db $F5
L055E92: db $00
L055E93: db $28
L055E94: db $F9
L055E95: db $02
L055E96: db $28
L055E97: db $01
L055E98: db $04
L055E99: db $22
L055E9A: db $09
L055E9B: db $06
L055E9C: db $18
L055E9D: db $FF
L055E9E: db $08
L055E9F: db $00
L055EA0: db $01
L055EA1: db $02
L055EA2: db $40
L055EA3: db $6D
L055EA4: db $19
L055EA5: db $A9
L055EA6: db $5E
L055EA7: db $FE
L055EA8: db $05
L055EA9: db $07
L055EAA: db $17
L055EAB: db $EB
L055EAC: db $00
L055EAD: db $18
L055EAE: db $F3
L055EAF: db $02
L055EB0: db $18
L055EB1: db $FB
L055EB2: db $04
L055EB3: db $18
L055EB4: db $03
L055EB5: db $06
L055EB6: db $15
L055EB7: db $0B
L055EB8: db $08
L055EB9: db $28
L055EBA: db $FB
L055EBB: db $0A
L055EBC: db $28
L055EBD: db $03
L055EBE: db $0C
L055EBF: db $00
L055EC0: db $01
L055EC1: db $00
L055EC2: db $20
L055EC3: db $6E
L055EC4: db $19
L055EC5: db $C9
L055EC6: db $5E
L055EC7: db $FE
L055EC8: db $05
L055EC9: db $06
L055ECA: db $17
L055ECB: db $FB
L055ECC: db $00
L055ECD: db $14
L055ECE: db $03
L055ECF: db $02
L055ED0: db $18
L055ED1: db $0B
L055ED2: db $04
L055ED3: db $27
L055ED4: db $FB
L055ED5: db $06
L055ED6: db $24
L055ED7: db $03
L055ED8: db $08
L055ED9: db $34
L055EDA: db $FE
L055EDB: db $0A
L055EDC: db $00
L055EDD: db $01
L055EDE: db $00
L055EDF: db $E0
L055EE0: db $6E
L055EE1: db $19
L055EE2: db $E6
L055EE3: db $5E
L055EE4: db $F5
L055EE5: db $00
L055EE6: db $05
L055EE7: db $28
L055EE8: db $01
L055EE9: db $00
L055EEA: db $28
L055EEB: db $09
L055EEC: db $02
L055EED: db $23
L055EEE: db $0E
L055EEF: db $04
L055EF0: db $1E
L055EF1: db $FF
L055EF2: db $06
L055EF3: db $1C
L055EF4: db $F7
L055EF5: db $08
L055EF6: db $00
L055EF7: db $01
L055EF8: db $02
L055EF9: db $80
L055EFA: db $6F
L055EFB: db $19
L055EFC: db $00
L055EFD: db $5F
L055EFE: db $F5
L055EFF: db $00
L055F00: db $03
L055F01: db $28
L055F02: db $FB
L055F03: db $00
L055F04: db $38
L055F05: db $FB
L055F06: db $02
L055F07: db $30
L055F08: db $F3
L055F09: db $04
L055F0A: db $00
L055F0B: db $E0
L055F0C: db $6F
L055F0D: db $19
L055F0E: db $12
L055F0F: db $5F
L055F10: db $F5
L055F11: db $00
L055F12: db $06
L055F13: db $27
L055F14: db $03
L055F15: db $00
L055F16: db $37
L055F17: db $03
L055F18: db $02
L055F19: db $20
L055F1A: db $0B
L055F1B: db $04
L055F1C: db $30
L055F1D: db $0B
L055F1E: db $06
L055F1F: db $3C
L055F20: db $13
L055F21: db $08
L055F22: db $1A
L055F23: db $13
L055F24: db $0A
L055F25: db $00
L055F26: db $01
L055F27: db $14
L055F28: db $A0
L055F29: db $70
L055F2A: db $19
L055F2B: db $2F
L055F2C: db $5F
L055F2D: db $FD
L055F2E: db $00
L055F2F: db $06
L055F30: db $2C
L055F31: db $EB
L055F32: db $00
L055F33: db $1C
L055F34: db $EB
L055F35: db $02
L055F36: db $14
L055F37: db $F3
L055F38: db $04
L055F39: db $29
L055F3A: db $F3
L055F3B: db $06
L055F3C: db $26
L055F3D: db $E3
L055F3E: db $08
L055F3F: db $39
L055F40: db $F3
L055F41: db $0A
L055F42: db $00
L055F43: db $01
L055F44: db $00
L055F45: db $60
L055F46: db $71
L055F47: db $19
L055F48: db $4C
L055F49: db $5F
L055F4A: db $00
L055F4B: db $00
L055F4C: db $07
L055F4D: db $28
L055F4E: db $F8
L055F4F: db $00
L055F50: db $28
L055F51: db $00
L055F52: db $02
L055F53: db $25
L055F54: db $F0
L055F55: db $04
L055F56: db $18
L055F57: db $F8
L055F58: db $06
L055F59: db $18
L055F5A: db $00
L055F5B: db $08
L055F5C: db $18
L055F5D: db $E8
L055F5E: db $0A
L055F5F: db $22
L055F60: db $08
L055F61: db $0C
L055F62: db $00
L055F63: db $01
L055F64: db $00
L055F65: db $40
L055F66: db $72
L055F67: db $19
L055F68: db $76
L055F69: db $5F
L055F6A: db $00
L055F6B: db $00
L055F6C: db $20
L055F6D: db $01
L055F6E: db $00
L055F6F: db $40
L055F70: db $72
L055F71: db $19
L055F72: db $76
L055F73: db $5F
L055F74: db $00
L055F75: db $00
L055F76: db $06
L055F77: db $18
L055F78: db $F3
L055F79: db $00
L055F7A: db $19
L055F7B: db $FB
L055F7C: db $02
L055F7D: db $21
L055F7E: db $03
L055F7F: db $04
L055F80: db $29
L055F81: db $FB
L055F82: db $06
L055F83: db $31
L055F84: db $03
L055F85: db $08
L055F86: db $39
L055F87: db $FB
L055F88: db $0A
L055F89: db $00
L055F8A: db $01
L055F8B: db $00
L055F8C: db $00
L055F8D: db $73
L055F8E: db $19
L055F8F: db $93
L055F90: db $5F
L055F91: db $FB
L055F92: db $00
L055F93: db $09
L055F94: db $29
L055F95: db $F8
L055F96: db $00
L055F97: db $27
L055F98: db $00
L055F99: db $02
L055F9A: db $29
L055F9B: db $08
L055F9C: db $04
L055F9D: db $20
L055F9E: db $10
L055F9F: db $06
L055FA0: db $3D
L055FA1: db $F8
L055FA2: db $08
L055FA3: db $37
L055FA4: db $00
L055FA5: db $0A
L055FA6: db $39
L055FA7: db $08
L055FA8: db $0C
L055FA9: db $3A
L055FAA: db $10
L055FAB: db $0E
L055FAC: db $22
L055FAD: db $F0
L055FAE: db $10
L055FAF: db $00
L055FB0: db $01
L055FB1: db $00
L055FB2: db $20
L055FB3: db $74
L055FB4: db $19
L055FB5: db $B9
L055FB6: db $5F
L055FB7: db $FB
L055FB8: db $00
L055FB9: db $08
L055FBA: db $27
L055FBB: db $04
L055FBC: db $00
L055FBD: db $27
L055FBE: db $0C
L055FBF: db $02
L055FC0: db $2B
L055FC1: db $14
L055FC2: db $04
L055FC3: db $24
L055FC4: db $1C
L055FC5: db $06
L055FC6: db $37
L055FC7: db $04
L055FC8: db $08
L055FC9: db $37
L055FCA: db $0C
L055FCB: db $0A
L055FCC: db $3B
L055FCD: db $14
L055FCE: db $0C
L055FCF: db $31
L055FD0: db $FC
L055FD1: db $0E
L055FD2: db $00
L055FD3: db $01
L055FD4: db $02
L055FD5: db $20
L055FD6: db $75
L055FD7: db $19
L055FD8: db $DC
L055FD9: db $5F
L055FDA: db $03
L055FDB: db $00
L055FDC: db $07
L055FDD: db $27
L055FDE: db $E6
L055FDF: db $00
L055FE0: db $26
L055FE1: db $EE
L055FE2: db $02
L055FE3: db $25
L055FE4: db $F6
L055FE5: db $04
L055FE6: db $2C
L055FE7: db $FD
L055FE8: db $06
L055FE9: db $2D
L055FEA: db $05
L055FEB: db $08
L055FEC: db $35
L055FED: db $F5
L055FEE: db $0A
L055FEF: db $3B
L055FF0: db $0B
L055FF1: db $0C
; =============== MoveInputReader_Iori ===============
; Special move input checker for IORI and OIORI.
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
; OUT
; - C flag: If set, a move was started
MoveInputReader_Iori:
	mMvIn_Validate Iori
	
.chkAir:
	jp   MoveInputReader_Iori_NoMove
	
.chkGround:
	;             SELECT + B                SELECT + A
	mMvIn_ChkEasy MoveInit_Iori_KinYaOtome, MoveInit_Iori_KinYaOtomeEscapeD
	mMvIn_ChkGA Iori, .chkPunch, .chkKick
.chkPunch:
	; DBDF+P -> Kin 1201 Shiki Ya Otome
	mMvIn_ValidateSuper .chkPunchNoSuper
	mMvIn_ChkDir MoveInput_DBDF, MoveInit_Iori_KinYaOtome
.chkPunchNoSuper:
	; FDF+P -> 100 Shiki Oni Yaki
	mMvIn_ChkDir MoveInput_FDF, MoveInit_Iori_OniYaki
	; BDF+P -> Scum Gale
	mMvIn_ChkDir MoveInput_BDF, MoveInit_Iori_ScumGale
	; DF+P -> 108 Shiki Yami-barai
	mMvIn_ChkDir MoveInput_DF, MoveInit_Iori_YamiBarai
	; DB+P -> 127 Aoi Hana
	mMvIn_ChkDir MoveInput_DB, MoveInit_Iori_AoiHana
	jp   MoveInputReader_Iori_NoMove
.chkKick:
	mMvIn_ValSkipWithChar CHAR_ID_IORI, .chkKickNoSuper
	; O.Iori only!
	;##
	; DBDF+K -> Kin 1201 Shiki Ya Otome (Alt)
	mMvIn_ValidateSuper .chkKickNoSuper
	mMvIn_ChkDir MoveInput_DBDF, MoveInit_OIori_KinYaOtome
	;##
.chkKickNoSuper:
	; FDB+K -> Shiki Koto Tsuki In
	mMvIn_ChkDir MoveInput_FDB, MoveInit_Iori_KotoTsukiIni
	jp   MoveInputReader_Iori_NoMove
; =============== MoveInit_Iori_YamiBarai ===============
MoveInit_Iori_YamiBarai:
	mMvIn_ValidateProjActive Iori
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_IORI_YAMI_BARAI_L, MOVE_IORI_YAMI_BARAI_H
	call MoveInputS_SetSpecMove_StopSpeed
	call Play_Proj_CopyMoveDamageFromPl
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_Iori_OniYaki ===============
MoveInit_Iori_OniYaki:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_IORI_ONI_YAKI_L, MOVE_IORI_ONI_YAKI_H
	call MoveInputS_SetSpecMove_StopSpeed
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	set  PF1B_INVULN, [hl]
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_Iori_AoiHana ===============
MoveInit_Iori_AoiHana:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_IORI_AOI_HANA_L, MOVE_IORI_AOI_HANA_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_Iori_KotoTsukiIni ===============
MoveInit_Iori_KotoTsukiIni:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_IORI_KOTO_TSUKI_IN_L, MOVE_IORI_KOTO_TSUKI_IN_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_Iori_ScumGale ===============
MoveInit_Iori_ScumGale:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_ValStartCmdThrow_StdColi Iori
	mMvIn_GetLH MOVE_IORI_SCUM_GALE_L, MOVE_IORI_SCUM_GALE_H
	call MoveInputS_SetSpecMove_StopSpeed
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	set  PF1B_INVULN, [hl]
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_Iori_KinYaOtomeEscapeD ===============
; [POI] Part of MoveInit_Iori_KinYaOtomeD used as failsafe, that may be inaccessible by normal means.
;       No move also ever transitions to MOVE_IORI_KIN_YA_OTOME_ESCAPE_H.
MoveInit_Iori_KinYaOtomeEscapeD:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_IORI_KIN_YA_OTOME_ESCAPE_L, MOVE_IORI_KIN_YA_OTOME_ESCAPE_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_Iori_KinYaOtome ===============
MoveInit_Iori_KinYaOtome:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetSD MOVE_IORI_KIN_YA_OTOME_S, MOVE_IORI_KIN_YA_OTOME_D
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInit_OIori_KinYaOtome ===============
MoveInit_OIori_KinYaOtome:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetSD MOVE_OIORI_KIN_YA_OTOME_S, MOVE_OIORI_KIN_YA_OTOME_D
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Iori_SetMove
; =============== MoveInputReader_Iori_SetMove ===============
MoveInputReader_Iori_SetMove:
	scf
	ret
; =============== MoveInputReader_Iori_NoMove ===============
MoveInputReader_Iori_NoMove:
	or   a
	ret
	
; =============== MoveC_Iori_YamiBarai ===============
; Move code for Iori's 108 Shiki Yami Barai (MOVE_IORI_YAMI_BARAI_L, MOVE_IORI_YAMI_BARAI_H).
MoveC_Iori_YamiBarai:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	mMvC_ValFrameEnd .anim
		; Depending on the visible frame...
		ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
		add  hl, de
		ld   a, [hl]
		mMvC_ChkTarget .end
		cp   $02*OBJLSTPTR_ENTRYSIZE
		jp   z, .spawnProj
		jp   .anim
; --------------- frame #2 ---------------
.spawnProj:
	call ProjInit_Iori_YamiBarai
	jp   .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jr   .ret
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_OniYaki ===============
; Move code for Iori's 100 Shiki Oni Yaki (MOVE_IORI_ONI_YAKI_L, MOVE_IORI_ONI_YAKI_H).
MoveC_Iori_OniYaki:

	; Orochi Iori has its own version with the opponent getting thrown directly on the ground.
	ld   hl, iPlInfo_CharId
	add  hl, bc
	ld   a, [hl]
	cp   CHAR_ID_OIORI				; Playing as Orochi Iori?
	jp   z, MoveC_OIori_OniYaki		; If so, jump
	
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .doGravity
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
; --------------- frame #0 ---------------
.obj0:
	; Move 4px forward
	mMvC_ValFrameStart .obj0_cont
		mMvC_SetMoveH +$0400
.obj0_cont:
	; 4 lines of damage at the end
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $04, HITTYPE_HIT_MID0, PF3_FLASH_B_SLOW
		jp   .anim
; --------------- frame #1 ---------------
.obj1:
	; Move 8px forward
	mMvC_ValFrameStart .obj1_cont
		mMvC_SetMoveH +$0800
.obj1_cont:
	; 4 lines of damage at the end
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		mMvC_SetDamageNext $04, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW
		jp   .anim
; --------------- frame #2 ---------------
; Jump setup.
.obj2:
	mMvC_ValFrameStart .obj2_cont
		mMvC_PlaySound SND_ID_28
		ld   hl, iPlInfo_Flags0
		add  hl, bc
		inc  hl	; Seek to iPlInfo_Flags1
		res  PF1B_INVULN, [hl]
		; Set jump settings depending on the move strength
		mMvIn_ChkLHE .obj2_setJumpH, .obj2_setJumpE
	.obj2_setJumpL: ; Light
		mMvC_SetSpeedH +$0080
		mMvC_SetSpeedV -$0600
		jp   .obj2_doGravity
	.obj2_setJumpH: ; Heavy
		mMvC_SetSpeedH +$0100
		mMvC_SetSpeedV -$0700
		jp   .obj2_doGravity
	.obj2_setJumpE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0200
		mMvC_SetSpeedV -$0800
	.obj2_doGravity:
		jp   .doGravity
.obj2_cont:
	; Immediately switch to the next frame (YSpeed always > -$09)
	mMvC_NextFrameOnGtYSpeed -$09, ANIMSPEED_NONE
	jp   nc, .doGravity
		mMvC_SetDamageNext $04, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW
		jp   .doGravity
; --------------- frame #3 ---------------
.obj3:
	; Switch to #4 when YSpeed > -$02
	mMvC_NextFrameOnGtYSpeed -$02, ANIMSPEED_NONE
		mMvC_SetSpeedH +$0040
		jp   .doGravity
; --------------- frames #2-4 / common gravity check ---------------
.doGravity:
	; Switch to #5 when we touch the ground
	mMvC_ChkGravityHV $0060, .anim
		mMvC_SetLandFrame $05*OBJLSTPTR_ENTRYSIZE, $06
		jp   .ret
; --------------- frame #5 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_OniYaki ===============
; Move code for Orochi Iori's 100 Shiki Oni Yaki (MOVE_IORI_ONI_YAKI_L, MOVE_IORI_ONI_YAKI_H).
MoveC_OIori_OniYaki:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .doGravity
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
; --------------- frame #0 ---------------
.obj0:
	; Move 4px forward
	mMvC_ValFrameStart .obj0_cont
		mMvC_SetMoveH +$0400
.obj0_cont:
	; 4 lines of damage at the end
	mMvC_ValFrameEnd .anim
		; Different hit flags compared to normal version
		mMvC_SetDamageNext $04, HITTYPE_HIT_MID0, PF3_FLASH_B_SLOW|PF3_LASTHIT
		jp   .anim
; --------------- frame #1 ---------------
.obj1:
	; Move 8px forward
	mMvC_ValFrameStart .obj1_cont
		mMvC_SetMoveH +$0800
.obj1_cont:
	; 4 lines of damage at the end
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $01 ; No manual control, unlike normal version
		mMvC_SetDamageNext $04, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW|PF3_LASTHIT
		jp   .anim
; --------------- frame #2 ---------------
; Jump setup.
.obj2:
	mMvC_ValFrameStart .obj2_cont
		mMvC_PlaySound SND_ID_28
		ld   hl, iPlInfo_Flags0
		add  hl, bc
		inc  hl	; Seek to iPlInfo_Flags1
		res  PF1B_INVULN, [hl]
		; Set jump settings depending on the move strength.
		; These are move fowards further than the normal version.
		mMvIn_ChkLHE .obj2_setJumpH, .obj2_setJumpE
	.obj2_setJumpL: ; Light
		mMvC_SetSpeedH +$0100
		mMvC_SetSpeedV -$0600
		jp   .obj2_doGravity
	.obj2_setJumpH: ; Heavy
		mMvC_SetSpeedH +$0200
		mMvC_SetSpeedV -$0700
		jp   .obj2_doGravity
	.obj2_setJumpE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0300
		mMvC_SetSpeedV -$0800
	.obj2_doGravity:
		jp   .doGravity
.obj2_cont:
	; Immediately switch to the next frame (YSpeed always > -$09)
	mMvC_NextFrameOnGtYSpeed -$09, ANIMSPEED_INSTANT
	; No damage dealt here, unlike the normal version.
	jp   nc, .doGravity
	jp   .doGravity
; --------------- frame #3 ---------------
; Launches the opponent on the ground, unique to this version.
.obj3:
	mMvC_ValFrameEnd .doGravity
		mMvC_SetDamageNext $04, HITTYPE_DROP_DB_A, PF3_SHAKELONG|PF3_FLASH_B_SLOW|PF3_LASTHIT
		jp   .doGravity
; --------------- frame #4 ---------------
.obj4:
	mMvC_ValFrameEnd .doGravity
		; Fall down very slightly forwards while landing from the jump here.
		; Also enable manual control to stay on #5 until touching the ground.
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		mMvC_SetSpeedH $0040
		jp   .doGravity
; --------------- frames #2-5 / common gravity check ---------------
.doGravity:
	; Switch to #6 when we touch the ground
	mMvC_ChkGravityHV $0060, .anim
		mMvC_SetLandFrame $06*OBJLSTPTR_ENTRYSIZE, $06
		jp   .ret
; --------------- frame #6 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_AoiHana ===============
; Move code for Iori's 127 Aoi Hana (MOVE_IORI_AOI_HANA_L, MOVE_IORI_AOI_HANA_H).
; Three-part dash that ends early in the second for the light version. 
MoveC_Iori_AoiHana:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
; --------------- frame #0 ---------------
; Forward dash #1.
.obj0:
	mMvC_ValFrameStart .obj0_cont
		mMvC_SetSpeedH +$0400
		mMvC_PlaySound SCT_LIGHT
.obj0_cont:
	jp   .moveH
; --------------- frame #1 ---------------
; Set damage for dash #2.
.obj1:
	mMvC_ValFrameEnd .moveH
	
		;
		; Set the damage for the next frame.
		;
		; The light version of the move enables manual control, preventing it from advancing from #2 to #3.
		; This means only the heavy version does the third part of the move (the small jump).
		;
		
		; Set damage for heavy version initially
		mMvC_SetDamageNext $08, HITTYPE_DROP_MAIN, PF3_LASTHIT
		
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]				
		cp   MOVE_IORI_AOI_HANA_H	; Using the heavy version?
		jp   z, .moveH				; If so, skip
	.obj1_setDamageL:
		; Otherwise, enable manual control
		ld   hl, iOBJInfo_FrameTotal
		add  hl, de
		ld   [hl], ANIMSPEED_NONE
		; And shake the opponent for longer
		mMvC_SetDamageNext $08, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_LASTHIT
		jp   .moveH
; --------------- frame #2 ---------------
; Forward dash #2.
.obj2:
	; Move 4px/frame forward
	mMvC_ValFrameStart .obj2_cont
		mMvC_SetSpeedH +$0400
		mMvC_PlaySound SCT_LIGHT
.obj2_cont:

	; If we aren't doing the heavy version, slow down at $00.50px/frame.
	; The move ends if when we stop moving.
	ld   hl, iPlInfo_MoveId
	add  hl, bc
	ld   a, [hl]
	cp   MOVE_IORI_AOI_HANA_H	; Using the heavy version?
	jp   z, .moveH				; If so, jump
	
	; This counts as our recovery for the light version, since it takes a bit to stop.
	mMvC_DoFrictionH +$0050
	jp   nc, .anim
		jp   .end
; --------------- frames #0-2 / common horizontal movement ---------------
.moveH:
	mMvC_DoFrictionH +$0050
	jp   .anim
; --------------- frame #3 ---------------
; Small jump start. Heavy version only.
.obj3:
	
	mMvC_ValFrameStart .obj3_cont
		; Set forward jump speed
		mMvC_SetSpeedH +$0200
		mMvC_SetSpeedV -$0200
		jp   .doGravity
.unused_obj3_playJumpSFX:
	; [TCRF] Unreferenced sound playback command.
	;        Likely used to be above the .doGravity call, since we're starting a jump after all.
	mMvC_PlaySound SFX_SUPERJUMP
.obj3_cont:
	; Deal 8 lines of damage and drop the opponent on the ground when switchcing to #4.
	; This pretty much ends the combo string, so it's better to perform the light version instead.
	mMvC_ValFrameEnd .doGravity
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		mMvC_SetDamageNext $08, HITTYPE_DROP_DB_A, PF3_SHAKELONG
		jp   .doGravity
; --------------- frame #4 ---------------
; Small jump, mid-jump. Heavy version only.
.obj4:
	mMvC_ValFrameStart .doGravity
		mMvC_PlaySound SCT_LIGHT
		jp   .doGravity
; --------------- frames #3-4 / common gravity check ---------------
; Switch to #5 when touching the ground.
.doGravity:
	mMvC_ChkGravityHV $0030, .anim
		mMvC_SetLandFrame $05*OBJLSTPTR_ENTRYSIZE, $03
		jp   .ret
; --------------- frame #5 ---------------
; Recovery after the jump.
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jr   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_KotoTsukiIn ===============
; Move code for Iori's 212 Shiki Koto Tsuki In (MOVE_IORI_KOTO_TSUKI_IN_L, MOVE_IORI_KOTO_TSUKI_IN_H).
MoveC_Iori_KotoTsukiIn:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj5
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj6
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------
; Startup.
.obj0:
	mMvC_ValFrameEnd .chkNear
		mMvC_SetAnimSpeed $01
		jp   .chkNear
; --------------- frame #1 ---------------
; Run towards the opponent.
.obj1:
	mMvC_ValFrameStart .obj1_cont
		; Play step SFX at the start of this, as well as the other frames
		; for the run sequence.
		mMvC_PlaySound SFX_STEP
		; Set run speed
		mMvIn_ChkLHE .obj1_setDashH, .obj1_setDashE
	.obj1_setDashL: ; Light
		mMvC_SetSpeedH +$0400
		jp   .moveH
	.obj1_setDashH: ; Heavy
		mMvC_SetSpeedH +$0580
		jp   .moveH
	.obj1_setDashE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0700
		jp   .moveH
.obj1_cont:
	jp   .chkNear
; --------------- frame #2 ---------------
; Run towards the opponent.
.obj2:
	mMvC_ValFrameStart .chkNear
		mMvC_PlaySound SFX_STEP
		jp   .chkNear
; --------------- frame #3 ---------------
; Run towards the opponent.
.obj3:
	mMvC_ValFrameStart .obj3_cont
		mMvC_PlaySound SFX_STEP
.obj3_cont:
	mMvC_ValFrameEnd .chkNear
		; Disable timing for #4
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		jp   .moveH
; --------------- frame #4 ---------------
; If we got here, we didn't get close enough to the opponent.
; Slow down at 1px/frame, and end the move when we stop moving.
.obj4:
	mMvC_DoFrictionH $0100
		jp   nc, .ret
		jp   .end
; --------------- frames #0-3 / player distance check ---------------
.chkNear:
	; Advances to #5 if we get near
	mMvIn_ValidateClose .moveH
		mMvC_SetFrame $05*OBJLSTPTR_ENTRYSIZE, $01
		call OBJLstS_ApplyXSpeed
		jp   .ret
; --------------- frames #0-4 / common run movement ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
	
; --------------- frame #5 ---------------	
;
.obj5:
	; Slow down at 0.5px/frame while doing this
	mMvC_DoFrictionH $0080
	
	
	;
	; Don't continue to #6 until we collided with the opponent.
	;
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]				; Did we reach?
	jp   z, .obj5_chkEnd				; If not, jump
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]				; Is the opponent invulnerable?
	jp   z, .obj5_setDamage				; If not, jump
.obj5_chkEnd:
	mMvC_ValFrameEnd .anim
		jp   .end
.obj5_setDamage:
	; Switch to #6
	mMvC_SetFrame $06*OBJLSTPTR_ENTRYSIZE, $02
	; Deal more damage the next frame.
	; The drop type and PF3_LASTHIT differ between Iori and O.Iori, but damage is the same.
	ld   hl, iPlInfo_CharId
	add  hl, bc
	ld   a, [hl]
	cp   CHAR_ID_OIORI				; Playing as IORI'?
	jp   z, .obj5_setDamageOIori	; If so, jump
.obj5_setDamageIori:
	mMvC_SetDamageNext $08, HITTYPE_DROP_DB_A, PF3_SHAKELONG|PF3_FLASH_B_SLOW
	jp   .ret
.obj5_setDamageOIori:
	mMvC_SetDamageNext $08, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW|PF3_LASTHIT
	jp   .ret
; --------------- frame #6 ---------------
; Delay after the hit.
.obj6:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $0A
		jp   .anim
; --------------- frame #7 ---------------
; Recovery.
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_ScumGale ===============
; Move code for Iori's Scum Gale (MOVE_IORI_SCUM_GALE_L, MOVE_IORI_SCUM_GALE_H).
; Command throw.
MoveC_Iori_ScumGale:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #0 ---------------
.obj0:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTU, PF3_SHAKELONG
		mMvC_MoveThrowOp -$08, +$00 ; Move back 8px
		jp   .anim
; --------------- frame #1 ---------------
.obj1:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTU, PF3_SHAKELONG|PF3_LASTHIT
		mMvC_MoveThrowOp +$04, +$00 ; Move fwd 4px
		jp   .anim
; --------------- frame #2 ---------------
.obj2:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI0, PF3_SHAKELONG|PF3_LASTHIT
		jp   .anim
; --------------- frame #3 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		mMvC_EndThrow_Slow
		jp   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_KinYaOtomeEscapeD ===============
; [POI] Move code for an alternate continuation of the desperation version of Iori's Kin 1201 Shiki Ya Otome (MOVE_IORI_KIN_YA_OTOME_ESCAPE_L, MOVE_IORI_KIN_YA_OTOME_ESCAPE_H).
;       This is only triggered if the opponent somehow escapes during the move (though it's also included in the move shortcuts)
MoveC_Iori_KinYaOtomeEscapeD:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed1E
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed28
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .flipX
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed08
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed10
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed32
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed24
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .resetFlipX
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $0A*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $0C*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $0E*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $10*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $12*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $14*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $16*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $18*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageLine
	cp   $1A*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageDrop
	cp   $1B*OBJLSTPTR_ENTRYSIZE
	jp   z, .setAnimSpeed28_2
	cp   $1C*OBJLSTPTR_ENTRYSIZE
	jp   z, .setAnimSpeed06
	cp   $1D*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #0 ---------------
.setSpeed1E:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $1E
		jp   .anim
; --------------- frame #1 ---------------
.setSpeed28:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $28
		jp   .anim
; --------------- frame #2 ---------------
.flipX:
	mMvC_ValFrameStart .setSpeed04
		; Horiziontally flip Iori, and save the original flags elsewhere
		ld   hl, iOBJInfo_OBJLstFlags
		add  hl, de
		ld   a, [hl]
		res  SPRB_XFLIP, [hl]
		inc  hl			; Seek to iOBJInfo_OBJLstFlagsView
		res  SPRB_XFLIP, [hl]
		ld   hl, iPlInfo_Iori_Mystery_OBJLstFlagsOrig
		add  hl, bc
		ld   [hl], a
.setSpeed04:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $04
		mMvC_PlaySound SCT_DIZZY
		jp   .anim
; --------------- frame #3 ---------------
.setSpeed08:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $08
		jp   .anim
; --------------- frame #4 ---------------
.setSpeed10:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $10
		jp   .anim
; --------------- frame #5 ---------------
.setSpeed32:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $32
		jp   .anim
; --------------- frame #6 ---------------
.setSpeed24:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $24
		jp   .anim
; --------------- frame #7 ---------------
.resetFlipX:
	mMvC_ValFrameStart .setSpeed00
		; Flip Iori back by restoring the original flags
		ld   hl, iPlInfo_Iori_Mystery_OBJLstFlagsOrig
		add  hl, bc
		ld   a, [hl]
		ld   hl, iOBJInfo_OBJLstFlags
		add  hl, de
		ldi  [hl], a	; Restore iOBJInfo_OBJLstFlags
		ld   [hl], a	; Restore iOBJInfo_OBJLstFlagsView
.setSpeed00:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed ANIMSPEED_INSTANT
		jp   .anim
; --------------- even frames #8,A,C,E,10,12,14,16,18 ---------------
; Single punches that deal a single line of damage each.
.setDamageLine:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTIGS, $00
		jp   .anim
; --------------- frame #1A ---------------
; Finisher, opponent launched with a backwards jump.
.setDamageDrop:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $01, HITTYPE_DROP_MAIN, $00
		jp   .anim
; --------------- frame #1B ---------------
.setAnimSpeed28_2:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $28
		jp   .anim
; --------------- frame #1C ---------------
.setAnimSpeed06:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $06
		jp   .anim
; --------------- frame #1D ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jp   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Iori_KinYaOtomeS ===============
; Move code for the super version of Iori's Kin 1201 Shiki Ya Otome (MOVE_IORI_KIN_YA_OTOME_S).
MoveC_Iori_KinYaOtomeS:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage0
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $09*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $0B*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $0D*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $0F*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $10*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1_chkOtherBlock
	cp   $11*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1_chkOtherBlock
	cp   $12*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamageFinisher
	cp   $13*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	cp   $14*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .setDamage0_chkOtherBlock
; --------------- frame #0 ---------------
; Startup.
.obj0:
	mMvC_ValFrameStart .obj0_cont
		mMvC_PlaySound SCT_HEAVY
.obj0_cont:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $12
		jp   .anim
; --------------- frame #1 ---------------
; Run towards the opponent.
; We have $12 frames to hit the opponent, otherwise the move ends.
.obj1:
	mMvC_ValFrameStart .obj1_cont
		; Move forward 7px/frame at the start
		mMvC_SetSpeedH +$0700
		jp   .moveH
.obj1_cont:
	mMvC_ValFrameEnd .obj1_chkGuard
		jp   .end
.obj1_chkGuard:
	;
	; Continue moving forwards until we collided (last frame) with the opponent.
	; If the opponent blocked the hit, switch to #14. Otherwise, continue to #2.
	;
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]			; Did we reach?
	jp   z, .obj1_chkGuard_noHit	; If not, skip
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]			; Is the opponent invulnerable?
	jp   nz, .obj1_chkGuard_noHit	; If so, skip
	bit  PF1B_HITRECV, [hl]			; Did the opponent get hit?
	jp   z, .obj1_chkGuard_noHit	; If not, skip
	bit  PF1B_GUARD, [hl]			; Is the opponent blocking?
	jp   nz, .obj1_chkGuard_guard	; If so, jump
.obj1_chkGuard_noGuard:
	mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, PF3_FLASH_B_SLOW
	mMvC_SetFrame $02*OBJLSTPTR_ENTRYSIZE, $01
	jp   .ret
.obj1_chkGuard_noHit:
	jp   .moveH
.obj1_chkGuard_guard:
	mMvC_SetFrame $14*OBJLSTPTR_ENTRYSIZE, $0A
	jp   .ret
	
; --------------- odd frames #3,5,7,9,B,D,F - line damage + block check ---------------
.setDamage1:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #2 ---------------
.setDamage0:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI0, PF3_FLASH_B_SLOW
		jp   .anim
; --------------- even frames - line damage ---------------
.setDamage0_chkOtherBlock:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI0, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frames #10,11 - line damage + block check ---------------		
.setDamage1_chkOtherBlock:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, $00
; --------------- common escape check ---------------
; Done at the start of about half of the frames.
	.chkOtherEscape:
		;
		; [POI] If the opponent somehow isn't in one of the hit effects 
		;       this move sets, hop back instead of continuing.
		;       This can happen if the opponent gets hit by a previously thrown
		;       fireball in the middle of the move.
		;
		ld   hl, iPlInfo_HitTypeIdOther
		add  hl, bc
		ld   a, [hl]
		cp   HITTYPE_HIT_MULTI0	; A == HITTYPE_HIT_MULTI0?
		jp   z, .anim				; If so, skip
		cp   HITTYPE_HIT_MULTI1	; A == HITTYPE_HIT_MULTI1?
		jp   z, .anim				; If so, skip
		ld   a, MOVE_SHARED_HOP_B
		call Pl_SetMove_StopSpeed
		jp   .ret
; --------------- frame #12 ---------------
; Deals the big boy damage.
.setDamageFinisher:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $10, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW
		jp   .anim
; --------------- common horizontal movement ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frame #13,#14 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret

; =============== MoveC_Iori_KinYaOtomeD ===============
; Move code for the desperation version of Iori's Kin 1201 Shiki Ya Otome (MOVE_IORI_KIN_YA_OTOME_D).
MoveC_Iori_KinYaOtomeD:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed0A
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $0A*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $0C*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $0E*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $10*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed0E
	cp   $11*OBJLSTPTR_ENTRYSIZE
	jp   z, .playDizzySFX
	cp   $12*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed0A
	cp   $14*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $16*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage05
	cp   $19*OBJLSTPTR_ENTRYSIZE
	jp   z, .setLongDelay
	cp   $1A*OBJLSTPTR_ENTRYSIZE
	jp   z, .setSpeed02
	cp   $1B*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #0 ---------------
.obj0:
	mMvC_ValFrameStart .obj0_cont
		mMvC_PlaySound SCT_HEAVY
.obj0_cont:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $12
		jp   .anim
; --------------- frame #1 ---------------
.obj1:
	mMvC_ValFrameStart .obj1_cont
		mMvC_SetSpeedH $0700
		jp   .moveH
.obj1_cont:
	mMvC_ValFrameEnd .obj1_chkGuard
		jp   .end
.obj1_chkGuard:
	;
	; Continue moving forwards until we collided (last frame) with the opponent.
	; If the opponent blocked the hit, switch to #1B. Otherwise, continue to #2.
	;
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]			; Did we reach?
	jp   z, .obj1_chkGuard_noHit	; If not, skip
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]			; Is the opponent invulnerable?
	jp   nz, .obj1_chkGuard_noHit	; If so, skip
	bit  PF1B_HITRECV, [hl]			; Did the opponent get hit?
	jp   z, .obj1_chkGuard_noHit	; If not, skip
	bit  PF1B_GUARD, [hl]			; Is the opponent blocking?
	jp   nz, .obj1_chkGuard_guard	; If so, jump
.obj1_chkGuard_noGuard:
	; Damage confirmed, switch to #2
	mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, PF3_FLASH_B_SLOW
	mMvC_SetFrame $02*OBJLSTPTR_ENTRYSIZE, $01
	jp   .ret
.obj1_chkGuard_noHit:
	; Not hit yet, continue moving
	jp   .moveH
.obj1_chkGuard_guard:
	; Blocked, jump to #1B
	mMvC_SetFrame $1B*OBJLSTPTR_ENTRYSIZE, $0A
	jp   .ret
; --------------- frame #2 ---------------
.obj2:
	;
	; Force the opponent to face the same direction outsid of the first frame.
	;
	mMvC_ValFrameNotStart .obj2_setDamage
		jp   .anim
.obj2_setDamage:
	mMvC_SetDamageNext $01, HITTYPE_HIT_MULTIGS, $00
	;--
	; This is exactly the same as the code in Pl_CopyXFlipToOther.
	push de
		; D = SPR_XFLIP flag for current player
		ld   hl, iOBJInfo_OBJLstFlags
		add  hl, de
		ld   a, [hl]
		and  a, SPR_XFLIP
		ld   d, a
		
		; HL = Ptr to opponent's OBJLst flags
		ld   hl, iPlInfo_PlId
		add  hl, bc
		ld   a, [hl]		; A = iPlInfo_PlId
		or   a				; A != PL1?
		jp   nz, .pl2		; If so, jump
	.pl1:
		; 1P gets 2P's flags
		ld   hl, wOBJInfo_Pl2+iOBJInfo_OBJLstFlags
		jp   .sync
	.pl2:
		; 2P gets 1P's flags
		ld   hl, wOBJInfo_Pl1+iOBJInfo_OBJLstFlags
	.sync:
	
		; Replace the opponent's SPR_XFLIP flag with ours
		ld   a, [hl]			; A = Opponent's OBJLst flags
		and  a, $FF^SPR_XFLIP	; Remove SPR_XFLIP flag
		or   a, d				; Copy over ours
		ld   [hl], a			; Save back updated value
	pop  de
	;--
	jp   .anim
; --------------- frames #3,#12 ---------------
.setSpeed0A:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $0A
		jp   .anim
; --------------- frame #10 ---------------
.setSpeed0E:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $1E
		jp   .anim
; --------------- frame #11 ---------------
.playDizzySFX:
	mMvC_ValFrameEnd .anim
		mMvC_PlaySound SCT_DIZZY
		jp   .anim
; --------------- frames #4,6,8,A,C,E,14,16 ---------------
.setDamage05:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $05, HITTYPE_HIT_MULTIGS, $00
		jp   .chkOtherEscape
	.chkOtherEscape:
		;
		; [POI] If the opponent somehow isn't in one of the hit effects 
		;       this move sets, switch to an alternate version of the move.
		;       This can happen if the opponent gets hit by a previously thrown
		;       fireball in the middle of the move.
		;
		ld   hl, iPlInfo_HitTypeIdOther
		add  hl, bc
		ld   a, [hl]
		cp   HITTYPE_HIT_MULTI0	; A == HITTYPE_HIT_MULTI0?
		jp   z, .anim				; If so, skip
		cp   HITTYPE_HIT_MULTI1	; A == HITTYPE_HIT_MULTI1?
		jp   z, .anim				; If so, skip
		cp   HITTYPE_HIT_MULTIGS	; A == HITTYPE_HIT_MULTIGS?
		jp   z, .anim				; If so, skip
		call Play_Pl_EmptyPowOnSuperEnd
		ld   hl, iPlInfo_Flags0
		add  hl, bc
		res  PF0B_SPECMOVE, [hl]
		res  PF0B_SUPERMOVE, [hl]
		ld   a, MOVE_IORI_KIN_YA_OTOME_ESCAPE_L
		call Pl_SetMove_StopSpeed
		jp   .ret
; --------------- frame #19 ---------------
.setLongDelay:
	; The first time get here, set big boy damage
	mMvC_ValFrameNotStart .setDamageFinish
		; Set a long delay for the next frame (recovery)
		mMvC_ValFrameEnd .anim
			mMvC_SetAnimSpeed $3C
			jp   .anim
.setDamageFinish:
	mMvC_SetDamageNext $10, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW
	jp   .anim
; --------------- common horizontal movement ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frame #1A ---------------
.setSpeed02:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $02
		jp   .anim
; --------------- frame #1B ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_OIori_KinYaOtome ===============
; Move code for Orochi Iori's version of Kin 1201 Shiki Ya Otome (MOVE_OIORI_KIN_YA_OTOME_S, MOVE_OIORI_KIN_YA_OTOME_D).
MoveC_OIori_KinYaOtome:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage0
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkLoop0
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .startLoop1
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage2
	cp   $09*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkLoop1
	cp   $0A*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage0_seq2
	cp   $0B*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage1_seq2
	cp   $0C*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage2_seq2
	cp   $0D*OBJLSTPTR_ENTRYSIZE
	jp   z, .setDamage2_seq2
	cp   $0E*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	cp   $0F*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------
; Startup.
.obj0:
	mMvC_ValFrameStart .obj0_cont
		mMvC_PlaySound SCT_HEAVY
.obj0_cont:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $14
		jp   .anim
; --------------- frame #1 ---------------
; Very fast forward dash.
.obj1:
	mMvC_ValFrameStart .obj1_cont
		mMvC_SetSpeedH +$0780
		jp   .moveH
.obj1_cont:
	; End the move if we didn't collide with the opponent by the end of the frame
	mMvC_ValFrameEnd .obj1_chkGuard
		jp   .end
.obj1_chkGuard:

	;
	; Continue moving forwards until we collided (last frame) with the opponent.
	; If the opponent blocked the hit, switch to #F. Otherwise, continue to #2.
	;
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]			; Did we reach?
	jp   z, .obj1_chkGuard_noHit	; If not, skip
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]			; Is the opponent invulnerable?
	jp   nz, .obj1_chkGuard_noHit	; If so, skip
	bit  PF1B_HITRECV, [hl]			; Did the opponent get hit?
	jp   z, .obj1_chkGuard_noHit	; If not, skip
	bit  PF1B_GUARD, [hl]			; Is the opponent blocking?
	jp   nz, .obj1_chkGuard_guard	; If so, jump
.obj1_chkGuard_noGuard:
	; Damage confirmed, switch to #2
	mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, PF3_FLASH_B_SLOW|PF3_SHAKEONCE
	mMvC_SetFrame $02*OBJLSTPTR_ENTRYSIZE, $00
	
	; Loop the damage frames (#2-#5) 4 times
	ld   hl, iPlInfo_OIori_KinYaOtome_LoopCount
	add  hl, bc
	ld   [hl], $04
	jp   .ret
.obj1_chkGuard_noHit:
	; Nothing hit yet, continue moving
	jp   .moveH
.obj1_chkGuard_guard:
	; Blocked, switch to #F, the recovery frame when the opponent blocked it
	mMvC_SetFrame $0F*OBJLSTPTR_ENTRYSIZE, $0A
	jp   .ret
	
; --------------- frames #2,#4,#6 ---------------
; Frame used during multiple damage loops/sequences.
.setDamage1:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #3 ---------------
; For damage loop 0.
.setDamage0:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI0, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #5 ---------------
; Loop back to #2 until the counter elapses
.chkLoop0:
	mMvC_ValFrameStart .anim
		ld   hl, iPlInfo_OIori_KinYaOtome_LoopCount
		add  hl, bc
		dec  [hl]
		jp   z, .chkLoop0_noLoop
		ld   hl, iOBJInfo_OBJLstPtrTblOffset
		add  hl, de
		ld   [hl], $01*OBJLSTPTR_ENTRYSIZE ; offset by -1
	.chkLoop0_noLoop:
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI0, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #7 ---------------
.startLoop1:
	mMvC_ValFrameStart .anim
		; Loop the second set of damage frames (#8-9) 4 times
		ld   hl, iPlInfo_OIori_KinYaOtome_LoopCount
		add  hl, bc
		ld   [hl], $04
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTIGS, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #8 ---------------
; For damage loop 1.
.setDamage2:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTIGS, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #9 ---------------
; Loop back to #8 until the counter elapses
.chkLoop1:
	mMvC_ValFrameStart .anim
		ld   hl, iPlInfo_OIori_KinYaOtome_LoopCount
		add  hl, bc
		dec  [hl]
		jp   z, .chkLoop1_noLoop
		ld   hl, iOBJInfo_OBJLstPtrTblOffset
		add  hl, de
		ld   [hl], $07*OBJLSTPTR_ENTRYSIZE ; offset by -1
	.chkLoop1_noLoop:
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTIGS, PF3_FLASH_B_SLOW
		jp   .chkOtherEscape
; --------------- frame #A ---------------
; Damage sequence 2 (no loop). Hit 1.
.setDamage0_seq2:;J
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI0, PF3_SHAKEONCE
		jp   .chkOtherEscape
; --------------- frame #B ---------------
; Damage sequence 2 (no loop). Hit 2.
.setDamage1_seq2:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_HIT_MULTI1, PF3_SHAKEONCE
		jp   .chkOtherEscape
; --------------- frames #C,#D ---------------
; Damage sequence 2 (no loop). Hits 3,4.
.setDamage2_seq2:
	mMvC_ValFrameStart .anim
		mMvC_SetDamageNext $01, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW
		jp   .anim
	; --------------- common escape check ---------------
	.chkOtherEscape:
		;
		; [POI] If the opponent somehow isn't in one of the hit effects 
		;       this move sets, hop back instead of continuing.
		;       This can happen if the opponent gets hit by a previously thrown
		;       fireball in the middle of the move.
		;
		ld   hl, iPlInfo_HitTypeIdOther
		add  hl, bc
		ld   a, [hl]
		cp   HITTYPE_HIT_MULTI0	; A == HITTYPE_HIT_MULTI0?
		jp   z, .anim				; If so, skip
		cp   HITTYPE_HIT_MULTI1	; A == HITTYPE_HIT_MULTI1?
		jp   z, .anim				; If so, skip
		cp   HITTYPE_HIT_MULTIGS	; A == HITTYPE_HIT_MULTIGS?
		jp   z, .anim				; If so, skip
		ld   a, MOVE_SHARED_HOP_B
		call Pl_SetMove_StopSpeed
		jp   .ret
; --------------- common horizontal movement ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frames #E,#F ---------------
; Recovery.
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveInputReader_Mature ===============
; Special move input checker for MATURE.
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
; OUT
; - C flag: If set, a move was started
MoveInputReader_Mature:
	mMvIn_Validate Mature
	
.chkAir:
	jp   MoveInputReader_Mature_NoMove
.chkGround:
	;             SELECT + B                   SELECT + A
	mMvIn_ChkEasy MoveInit_Mature_HeavensGate, MoveInit_Mature_Decide
	mMvIn_ChkGA Mature, .chkPunch, .chkKick
.chkPunch:
	; BDF+P -> Decide
	mMvIn_ChkDir MoveInput_BDF, MoveInit_Mature_Decide
	; DB+P -> Death Row
	mMvIn_ChkDir MoveInput_DB, MoveInit_Mature_DeathRow
	; DF+P -> Despair
	mMvIn_ChkDir MoveInput_DF, MoveInit_Mature_Despair
	jp   MoveInputReader_Mature_NoMove
.chkKick:
	; DBDF+K -> Heaven's Gate
	mMvIn_ValidateSuper .chkKickNoSuper
	mMvIn_ChkDir MoveInput_DBDF, MoveInit_Mature_HeavensGate
.chkKickNoSuper:
	; DB+K -> Metal Massacre
	mMvIn_ChkDir MoveInput_DB, MoveInit_Mature_MetalMassacre
	jp   MoveInputReader_Mature_NoMove
; =============== MoveInit_Mature_Decide ===============
MoveInit_Mature_Decide:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_MATURE_DECIDE_L, MOVE_MATURE_DECIDE_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Mature_SetMove
; =============== MoveInit_Mature_MetalMassacre ===============
MoveInit_Mature_MetalMassacre:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_MATURE_METAL_MASSACRE_L, MOVE_MATURE_METAL_MASSACRE_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Mature_SetMove
; =============== MoveInit_Mature_DeathRow ===============
MoveInit_Mature_DeathRow:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_MATURE_DEATH_ROW_L, MOVE_MATURE_DEATH_ROW_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Mature_SetMove
; =============== MoveInit_Mature_Despair ===============
MoveInit_Mature_Despair:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_MATURE_DESPAIR_L, MOVE_MATURE_DESPAIR_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Mature_SetMove
; =============== MoveInit_Mature_HeavensGate ===============
MoveInit_Mature_HeavensGate:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetSD MOVE_MATURE_HEAVENS_GATE_S, MOVE_MATURE_HEAVENS_GATE_D
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Mature_SetMove
; =============== MoveInputReader_Mature_SetMove ===============
MoveInputReader_Mature_SetMove:
	scf
	ret
; =============== MoveInputReader_Mature_NoMove ===============
MoveInputReader_Mature_NoMove:
	or   a
	ret
	
; =============== MoveC_Mature_Decide ===============
; Move code for Mature's Decide (MOVE_MATURE_DECIDE_L, MOVE_MATURE_DECIDE_H).
MoveC_Mature_Decide:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #0 ---------------
.obj0:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $06
		mMvC_PlaySound SCT_HEAVY
		jp   .anim
; --------------- frame #1 ---------------
.obj1:
	mMvC_ValFrameStart .obj1_cont
		mMvIn_ChkLHE .obj1_setDashH, .obj1_setDashE
	.obj1_setDashL: ; Light
		mMvC_SetSpeedH $0100
		jp   .obj1_cont
	.obj1_setDashH: ; Heavy
		mMvC_SetSpeedH $0300
		jp   .obj1_cont
	.obj1_setDashE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH $0500
.obj1_cont:
	mMvC_DoFrictionH $0040
	; If we didn't start the throw by the end of the frame, continue to #2
	; where the move end early.
	call .canStartThrow		; Was the throw started?
	jp   c, .ret			; If so, wait without doing anything
		mMvC_ValFrameEnd .anim
			mMvC_SetAnimSpeed $14
			jp   .anim
; --------------- frame #2 ---------------
; Early abort.
.obj2:
	mMvC_DoFrictionH $0040
	mMvC_ValFrameEnd .anim
		jp   .end
		
; =============== .canStartThrow ===============
; Start the command throw only if the opponent didn't block the hit.
; This works because the move is set to deal damage on contact, so after the first hit PF1B_HITRECV will be set.
;
; See also: Play_Pl_IsMoveHit
; OUT
; - C flag: If set, the throw was started
.canStartThrow:
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]			; Did we reach?
	jp   z, .canStartThrow_no		; If not, skip (it whiffed)
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]			; Is the opponent invulnerable?
	jp   nz, .canStartThrow_no		; If so, skip
	bit  PF1B_HITRECV, [hl]			; Did the opponent get hit?
	jp   z, .canStartThrow_no		; If not, skip
	bit  PF1B_GUARD, [hl]			; Is the opponent blocking?
	jp   nz, .canStartThrow_no		; If so, skip
	
	; Otherwise, try to start the command throw.
	; Which should never fail if we got here.
.canStartThrow_yes:	
	mMvIn_ValStartCmdThrow_AllColi .canStartThrow_no
		; Switch to #3 once it's confirmed
		mMvC_SetFrame $03*OBJLSTPTR_ENTRYSIZE, $04
		scf		; C flag set
		ret
.canStartThrow_no:
	xor  a	; C flag clear
	ret
; =============== end of .canStartThrow ===============

; --------------- frame #3 ---------------
.obj3:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $04, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp -$08, -$18 ; Move opponent back 8px, up $18px
		jp   .anim
; --------------- frame #4 ---------------
.obj4:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $04, HITTYPE_THROW_END, PF3_SHAKELONG
		jp   .anim
; --------------- frame #7 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	ld   a, PLAY_THROWACT_NONE
	ld   [wPlayPlThrowActId], a
	call Play_Pl_EndMove
	jr   .ret
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Mature_MetalMassacre ===============
; Move code for Mature's Metal Massacre (MOVE_MATURE_METAL_MASSACRE_L, MOVE_MATURE_METAL_MASSACRE_H).
MoveC_Mature_MetalMassacre:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj7
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .damageH40
; --------------- frame #0 ---------------
; Initial dash forward.
.obj0:
	mMvC_ValFrameStart .obj0_chkPlNear
		mMvIn_ChkLHE .obj0_setDashH, .obj0_setDashE
	.obj0_setDashL: ; Light
		mMvC_SetSpeedH $0500
		jp   .obj0_chkPlNear
	.obj0_setDashH: ; Heavy
		mMvC_SetSpeedH $0600
		jp   .obj0_chkPlNear
	.obj0_setDashE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH $0700
	.obj0_chkPlNear:
		jp   .chkPlNear
; --------------- frame #1 ---------------
; Initial dash forward.	
.obj1:
	mMvC_ValFrameStart .chkPlNear
		mMvC_PlaySound SFX_STEP
		jp   .chkPlNear
; --------------- frame #2 ---------------
; Initial dash forward.
.obj2:
	mMvC_ValFrameStart .obj2_cont
		mMvC_PlaySound SFX_STEP	
.obj2_cont:
	mMvC_ValFrameEnd .chkPlNear
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		jp   .moveH
; --------------- frame #3 ---------------
; Early abort.
.obj3:
	mMvC_DoFrictionH $0100
	jp   nc, .ret
	jp   .end
; --------------- frames #0-2 / common near check ---------------	
; Switch to #4 as soon as we get near the opponent.
; If by the end of #2 we don't, the animation switches to #3 and the move ends there.
.chkPlNear:
	mMvIn_ValidateClose .moveH, $30
		mMvC_SetFrame $10, $00
		call OBJLstS_ApplyXSpeed
		IF FIX_BUGS == 1
			jp   .ret
		ELSE
			jp   MoveC_Mature_Despair.ret
		ENDC
; --------------- common horz. movement ---------------	
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frames #4-6 ---------------	
; We're close to the opponent now.
; Deal continuously 1 line of damage, slowing down in the process.
.damageH40:
	mMvC_SetDamage $01, HITTYPE_HIT_MID0, PF3_SHAKEONCE
	mMvC_DoFrictionH $0040
	jp   .anim
; --------------- frame #7 ---------------
; Like the previous one, but slowing down more.
.obj7:
	mMvC_SetDamage $01, HITTYPE_HIT_MID0, PF3_SHAKEONCE
	mMvC_DoFrictionH $0080
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $14
		jp   .anim
; --------------- frame #8 ---------------		
.chkEnd:
	mMvC_DoFrictionH $0080
	mMvC_ValFrameEnd .anim
; --------------- common ---------------	
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Mature_DeathRow ===============
; Move code for Mature's Death Row (MOVE_MATURE_DEATH_ROW_L, MOVE_MATURE_DEATH_ROW_H).
; This move can repeat up to three times by having repeated entries in the frame handler.
MoveC_Mature_DeathRow:
	call Play_Pl_CreateJoyMergedKeysLH
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .initDash
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .hitA0
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .hitA1
	
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .initDash
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .hitB0
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .hitB1
	
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .initDash
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .hitC0
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .hitC1
	
	cp   $09*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEndEarly
	cp   $0A*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------
.initDash:
	mMvC_ValFrameStart .initDash_cont
		mMvC_PlaySound SND_ID_28
		call Play_Pl_ClearJoyDirBuffer
		call Play_Pl_ClearJoyMergedKeysLH
		; Initialize this
		ld   hl, iPlInfo_Mature_DeathRow_Repeat
		add  hl, bc
		ld   [hl], $00
		; Set speed depending on move strength
		mMvIn_ChkLHE .initDash_setDashH, .initDash_setDashE
	.initDash_setDashL: ; Light
		mMvC_SetSpeedH $0300
		jp   .initDash_cont
	.initDash_setDashH: ; Heavy
		mMvC_SetSpeedH $0400
		jp   .initDash_cont
	.initDash_setDashE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH $0500
.initDash_cont:
	call .chkRepeatInput
	mMvC_DoFrictionH $0040
	jp   .anim
; --------------- frame #1 ---------------
.hitA0:
	mMvC_SetDamage $03, HITTYPE_HIT_MID0, PF3_LASTHIT|PF3_SHAKEONCE
	jp   .hit0_main
; --------------- frame #4 ---------------
.hitB0:
	mMvC_SetDamage $03, HITTYPE_HIT_MID1, PF3_LASTHIT|PF3_SHAKEONCE
	jp   .hit0_main
; --------------- frame #7 ---------------
.hitC0:
	mMvC_SetDamage $03, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_SHAKEONCE
	jp   .hit0_main
; --------------- frame #1,4,7 / input repeat check ---------------
.hit0_main:
	call .chkRepeatInput
	; Move forward as always, slowing down
	mMvC_DoFrictionH $0040
	jp   .anim
	
; --------------- frame #2 ---------------
.hitA1:
	mMvC_SetDamage $01, HITTYPE_HIT_MID0, PF3_SHAKEONCE
	jp   .hit1_main
; --------------- frame #5 ---------------
.hitB1:
	mMvC_SetDamage $01, HITTYPE_HIT_MID1, PF3_SHAKEONCE
	jp   .hit1_main
; --------------- frame #8 ---------------
.hitC1:
	mMvC_SetDamage $01, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_SHAKEONCE
	jp   .hit1_main
; --------------- frame #2,5,8 / repeat done check ---------------	
.hit1_main:
	mMvC_DoFrictionH $0040
	IF FIX_BUGS == 1
		mMvC_ValFrameEnd .anim
	ELSE
		mMvC_ValFrameEnd MoveC_Mature_MetalMassacre.anim
	ENDC
		; If the move is allowed to continue animating to the next frame, it will "repeat". 
		; To do so, we must have performed the same DB+P input before this point.
		call .canMoveRepeat
		jp   nz, .anim
		
		; Depending on the visible frame...
		ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
		add  hl, de
		ld   a, [hl]
		cp   $06*OBJLSTPTR_ENTRYSIZE	; FrameId < $06?
		jp   c, .hit1_earlyAbort		; If so, jump
	.hit1_fullDone:
		mMvC_SetFrame $09*OBJLSTPTR_ENTRYSIZE, $0A
		jp   .ret
	.hit1_earlyAbort:
		mMvC_SetFrame $0A*OBJLSTPTR_ENTRYSIZE, $0A
		jp   .ret
	
; =============== .chkRepeatInput ===============
; Perform the input check to repeat the move, same as the one to get into MoveInit_Mature_DeathRow.
; DB+P -> Despair
.chkRepeatInput:
	; Return if the motion was done already
	ld   hl, iPlInfo_Mature_DeathRow_Repeat
	add  hl, bc
	bit  0, [hl]	; iPlInfo_Mature_DeathRow_Repeat != 0?
	ret  nz			; If so, return
	
	; Must press the punch button
	call MoveInputS_CheckPKTypeWithMergedLH
	ret  nc	; Did we press a punch or kick btn? If not, return
	ret  nz	; Did we press a kick button? If so, return
	
	; Must perform DB motion
	ld   hl, MoveInput_DB
	call MoveInputS_ChkInputDir		; Did we do it?
	ret  nc							; If not, return
	
	; Otherwise, mark that the motion was done
	ld   hl, iPlInfo_Mature_DeathRow_Repeat
	add  hl, bc
	set  0, [hl]
	ret
	
; =============== .canMoveRepeat ===============
; Checks if the move can repeat.
; OUT
; - Z flag: If set, the move can't repeat
.canMoveRepeat:

	; The move doesn't repeat more than 3 times.
	; However, this could have just returned NZ since we do want to advance to #9 (see: .hit1_fullDone).
	; By returning Z instead, it needed special logic in .hit1_main to manually set the frame to #9
	; if we got here with the FrameId >= #6.
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $06*OBJLSTPTR_ENTRYSIZE		; FrameId < #6?	
	jp   c, .canMoveRepeat_chkPlType	; If so, jump
	xor  a								; Z flag set (no repeat)
	ret
.canMoveRepeat_chkPlType:
	ld   hl, iPlInfo_Flags0
	add  hl, bc
	bit  PF0B_CPU, [hl]
	jp   z, .canMoveRepeat_human
.canMoveRepeat_cpu:
	; The CPU randomly chooses if to repeat the move or not.
	ld   a, [wTimer]
	bit  4, a			; CanRepeat = (wTimer & $10) != 0
	ret
.canMoveRepeat_human:
	; iPlInfo_Mature_DeathRow_Repeat must be set for the move to repeat.
	; See .chkRepeatInput
	ld   hl, iPlInfo_Mature_DeathRow_Repeat
	add  hl, bc
	bit  0, [hl]
	ret
; =============== end of move repeat checks ===============	

; --------------- frame #9 ---------------
.chkEndEarly:
	mMvC_DoFrictionH $0040
	mMvC_ValFrameEnd .anim
		jp   .end
; --------------- frame #A ---------------
.chkEnd:
	mMvC_DoFrictionH $0040
	mMvC_ValFrameEnd .anim
; --------------- common ---------------
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Mature_Despair ===============
; Move code for Mature's Despair (MOVE_MATURE_DESPAIR_L, MOVE_MATURE_DESPAIR_H).
MoveC_Mature_Despair:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .doGravity
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #0 ---------------
; Startup.
.obj0:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		jp   .anim
; --------------- frame #1 ---------------	
; Jump setup.
.obj1:
	mMvC_ValFrameStart .obj1_cont
		mMvC_PlaySound SCT_11
		mMvIn_ChkLHE .obj1_setJumpH, .obj1_setJumpE
	.obj1_setJumpL: ; Light
		mMvC_SetSpeedH +$0300
		mMvC_SetSpeedV -$0400
		jp   .obj1_doGravity
	.obj1_setJumpH: ; Heavy
		mMvC_SetSpeedH +$0400
		mMvC_SetSpeedV -$0480
		jp   .obj1_doGravity
	.obj1_setJumpE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0580
		mMvC_SetSpeedV -$0400
	.obj1_doGravity:
		jp   .doGravity
.obj1_cont:
	; Immediate change, as the Y Speed will always be > -$06
	mMvC_NextFrameOnGtYSpeed -$06, ANIMSPEED_NONE
	jp   nc, .doGravity
	jp   .doGravity
; --------------- frame #2 ---------------	
; Jump, until the near peak of the jump.
.obj2:
	; [POI] The hidden heavy version deals multiple continuous hits.
	call MoveInputS_CheckMoveLHVer	; Is the the hidden heavy triggered?
	jp   nc, .obj2_waitNext			; If not, jump
.obj2_doDamageE:
	mMvC_SetDamage $02, HITTYPE_HIT_MID0, PF3_LASTHIT|PF3_SHAKEONCE
.obj2_waitNext:
	mMvC_NextFrameOnGtYSpeed -$01, ANIMSPEED_NONE
	jp   nc, .doGravity
	jp   .doGravity
; --------------- frame #1-3 / common gravity check ---------------
; Switches to #4 when touching the ground.
.doGravity:
	mMvC_ChkGravityHV $0060, .anim
		mMvC_SetLandFrame $04*OBJLSTPTR_ENTRYSIZE, $02
		jp   .ret
; --------------- frame #6 ---------------	
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------		
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Mature_HeavensGate ===============
; Move code for Mature's Heaven's Gate (MOVE_MATURE_HEAVENS_GATE_S, MOVE_MATURE_HEAVENS_GATE_D).
MoveC_Mature_HeavensGate:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj5
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------
; Startup.
.obj0:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $04
		jp   .anim
; --------------- frame #1 ---------------
; Initial run towards opponent.
.obj1:
	;--
	; Manual check for some reason instead of using mMvC_ValFrameStart
	ld   hl, iOBJInfo_Status
	add  hl, de
	bit  OSTB_GFXNEWLOAD, [hl]
	jp   z, .obj2
	;--
		mMvC_PlaySound SCT_ATTACKG
		; Set different movement speed depending on
		mMvIn_ChkLHE .obj1_setDashH, .obj1_setDashE
	.obj1_setDashL: ; Light
		mMvC_SetSpeedH $0500
		jp   .obj2
	.obj1_setDashH: ; Heavy
		mMvC_SetSpeedH $0600
		jp   .obj2
	.obj1_setDashE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH $0700
; --------------- frame #1-2 ---------------
; Initial run towards opponent.
.obj2:

	call .chkOtherHit
	jp   c, .ret				; Is the grab confirmed? If so, wait
	jp   z, .switchToBackHop	; Did the opponent block? If so, end it early and backhop away
	; Otherwise, continue moving
	jp   .moveH
; --------------- frame #3 ---------------
; Initial run towards opponent.
.obj3:
	call .chkOtherHit
	jp   c, .ret				; Is the grab confirmed? If so, wait
	jp   z, .switchToBackHop	; Did the opponent block? If so, end it early and backhop away
	
	; Otherwise, continue moving.
	; If by the end of the frame, we didn't confirm the grab (which switches to #4),
	; switch to #6 where the move will end.
	mMvC_ValFrameEnd .moveH
		mMvC_SetAnimSpeed ANIMSPEED_NONE
		; Switch to the last frame (#6) to end the move if the C flag didn't get set by the end
		ld   hl, iOBJInfo_OBJLstPtrTblOffset
		add  hl, de
		ld   [hl], $05*OBJLSTPTR_ENTRYSIZE	; offset by -1
		jp   .moveH
		
; =============== .chkOtherHit ===============
; Checks if the opponent was successfully hit.
; See also: Play_Pl_IsMoveHit
; OUT
; - C flag: If set, the move hit successfully
; - Z flag: If set, the move got blocked
.chkOtherHit:

	;
	; If we didn't hit the opponent twice yet, return without doing anything.
	; 
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]			; Did we reach yet?	
	jp   z, .chkOtherHit_wait		; If not, jump
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]			; Is the opponent invulnerable?
	jp   nz, .chkOtherHit_wait		; If so, jump
	bit  PF1B_HITRECV, [hl]			; Did the opponent get hit?
	jp   z, .chkOtherHit_wait		; If not, jump
	
	;
	; If the hit is blocked, skip directly to the end of the move,
	; where the player backhops away.
	;
	bit  PF1B_GUARD, [hl]			; Did the attack get blocked?
	jp   nz, .chkOtherHit_blocked	; If so, jump
	
.chkOtherHit_ok:
	;
	; The second hit wasn't blocked, so switch to #4 to continue the attack.
	;
	mMvC_SetFrame $04*OBJLSTPTR_ENTRYSIZE, ANIMSPEED_NONE
	ld   a, PLAY_THROWACT_NEXT03
	ld   [wPlayPlThrowActId], a
	mMvC_SetDamageNext $01, HITTYPE_THROW_ROTU, PF3_SHAKELONG
	mMvC_SetDamage $01, HITTYPE_THROW_ROTU, PF3_SHAKELONG
	mMvC_MoveThrowOp -$08, +$00 ; Move back 8px
	mMvC_MoveThrowOpSync
	call OBJLstS_ApplyXSpeed
	scf			; C flag set
	ret
.chkOtherHit_blocked:
	xor  a		; Z flag set
	ret
.chkOtherHit_wait:
	ld   a, $01
	or   a		; Z flag clear
	ret
; =============== end of .chkOtherHit ===============			
	
; --------------- frame #4 ---------------	
; Runs forward holding the opponent until reaching the edge of the stage.
.obj4:

	;
	; If the opponent isn't in the intended HITTYPE_THROW_ROTU after 8 frames,
	; assume that something went wrong and hop back, ending the move.
	;
	
	;--
	ld   hl, iOBJInfo_Status
	add  hl, de
	bit  OSTB_GFXNEWLOAD, [hl]	; First time we get here?
	jp   nz, .obj4_chkEdge		; If so, skip (not needed, see below)
	;--
	
		; Skip the HITTYPE check for the first 8 frames.
		; We can do it this way since we know the initial value iOBJInfo_FrameLeft is set to,
		; and that decrements every frame.
		ld   hl, iOBJInfo_FrameLeft
		add  hl, de
		ld   a, [hl]
		cp   ANIMSPEED_NONE-$07		; iOBJInfo_FrameLeft >= $F8?
		jp   nc, .obj4_chkEdge		; If so, skip
		
		ld   hl, iPlInfo_HitTypeIdOther
		add  hl, bc
		ld   a, [hl]
		cp   HITTYPE_THROW_ROTU		; Opponent's HitType != HITTYPE_THROW_ROTU?
		jp   nz, .switchToBackHop	; If so, jump
.obj4_chkEdge:
	; Continuously spawn visual effects for the desperation versions
	call ProjInit_Mature_HeavensGateD
	
	;
	; Continue moving until either we or the opponent get near the edge of the stage.
	; When that happens, switch to #5 and spawn the skull projectile.
	;
	ld   hl, iPlInfo_OBJInfoXOther
	add  hl, bc
	ld   a, [hl]
	cp   $00+PLAY_BORDER_X		; Opponent on the left edge?	
	jp   z, .obj4_setDamage		; If so, jump
	cp   $100-PLAY_BORDER_X		; Opponent on the right edge?	
	jp   z, .obj4_setDamage		; If so, jump
	ld   hl, iOBJInfo_X
	add  hl, de
	ld   a, [hl]
	cp   $00+PLAY_BORDER_X		; Are we on the left edge?	
	jp   z, .obj4_setDamage		; If so, jump
	cp   $100-PLAY_BORDER_X		; Are we on the right edge?
	jp   z, .obj4_setDamage		; If so, jump
	; Otherwise, continue moving
	jp   .moveH
.obj4_setDamage:
	;
	; Switch to #5 and setup the damage dealt by the move.
	;
	mMvC_SetFrame $05*OBJLSTPTR_ENTRYSIZE, $08
	ld   hl, iPlInfo_MoveId
	add  hl, bc
	ld   a, [hl]
	cp   MOVE_MATURE_HEAVENS_GATE_D		; Using the desperation version?
	jp   z, .obj4_setDamageD			; If so, jump
.obj4_setDamageS:
	; This deals more damage since the projectile itself *doesn't*
	mMvC_SetDamageNext $14, HITTYPE_DROP_MAIN, PF3_SHAKELONG
	jp   .ret
.obj4_setDamageD:
	; While the super desperation version does deal continuous damage, so the physical hit deals a bit less
	mMvC_SetDamageNext $0C, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_LASTHIT
	jp   .ret
	
; --------------- frame #5 ---------------
; Initial back movement and projectile setup.
; Last frame if everything went right.	
.obj5:
	; Set speed to dash backwards the first time we get here
	mMvC_ValFrameStart .obj5_cont
		mMvC_SetMoveH -$0700
.obj5_cont:
	mMvC_ValFrameEnd .anim
	
		; Initialize the projectile at the end of the frame.
		; They are essentially the same between super and desperation versions, other than the damage dealt.
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_MATURE_HEAVENS_GATE_D		; Using the desperation version?
		jp   z, .obj5_setProjDamageD		; If so, jump
	.obj5_setProjDamageS:
		; Super version deals no damage
		mkhl $00, HITTYPE_DROP_SWOOPUP
		ld   hl, CHL
		ld   a, PF3_SHAKELONG
		jp   .obj5_initProj
	.obj5_setProjDamageD:
		; Desperation version deals 1 line of continuous damage
		mkhl $01, HITTYPE_DROP_SWOOPUP
		ld   hl, CHL
		ld   a, PF3_SHAKELONG
	.obj5_initProj:
		; Set damage settings
		call Play_Pl_SetMoveDamageNext
		; Copy them over to the projectile
		call Play_Proj_CopyMoveDamageFromPl
		; And spawn said projectile
		call ProjInit_Mature_HeavensGateS
		; Finally, backhop and end the move.
		
; --------------- common backhop switch ---------------
; Switches to the backwards hop.
.switchToBackHop:
	ld   a, MOVE_SHARED_HOP_B
	call Pl_SetMove_StopSpeed
	ld   a, PLAY_THROWACT_NONE
	ld   [wPlayPlThrowActId], a
	jp   .ret
; --------------- common horizontal movement ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frame #6 ---------------
; Slow down, and when we stop moving end the move.
; We get here only if the opponent wasn't hit.
.chkEnd:
	;--
	; It's a bit pointless to check this here.
	call .chkOtherHit			; Check this again
	jp   c, .ret				; Is the grab confirmed? If so, wait
	jp   z, .switchToBackHop	; Did the opponent block? If so, backhop away
	;--
	mMvC_DoFrictionH $0080
	jp   nc, .anim
		mMvC_EndThrow_Slow
		jr   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== ProjInit_Mature_HeavensGateS ===============
; Initializes the projectile for Mature's Heaven's Gate (normal).
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
ProjInit_Mature_HeavensGateS:
	mMvC_PlaySound SCT_13
	
	push bc
		push de
			; A = MoveId (not needed)
			ld   hl, iPlInfo_MoveId
			add  hl, bc
			ld   a, [hl]
			push af
				call ProjInitS_InitAndGetOBJInfo
				
				; Set code pointer
				ld   hl, iOBJInfo_Play_CodeBank
				add  hl, de
				ld   [hl], BANK(ProjC_NoMove)	; BANK $05 ; iOBJInfo_Play_CodeBank
				inc  hl
				ld   [hl], LOW(ProjC_NoMove)	; iOBJInfo_Play_CodePtr_Low
				inc  hl
				ld   [hl], HIGH(ProjC_NoMove)	; iOBJInfo_Play_CodePtr_High
				
				; Write sprite mapping ptr for this projectile.
				ld   hl, iOBJInfo_BankNum
				add  hl, de
				ld   [hl], BANK(OBJLstPtrTable_Proj_Mature_HeavensGateS)	; BANK $01 ; iOBJInfo_BankNum
				inc  hl
				ld   [hl], LOW(OBJLstPtrTable_Proj_Mature_HeavensGateS)		; iOBJInfo_OBJLstPtrTbl_Low
				inc  hl
				ld   [hl], HIGH(OBJLstPtrTable_Proj_Mature_HeavensGateS)	; iOBJInfo_OBJLstPtrTbl_High
				inc  hl
				ld   [hl], $00	; iOBJInfo_OBJLstPtrTblOffset

				; Set animation speed.
				ld   hl, iOBJInfo_FrameLeft
				add  hl, de
				ld   [hl], $01	; iOBJInfo_FrameLeft
				inc  hl
				ld   [hl], $01	; iOBJInfo_FrameTotal
				
				; Set priority value
				ld   hl, iOBJInfo_Play_Priority
				add  hl, de
				ld   [hl], PROJ_PRIORITY_NODESPAWN
				inc  hl
			pop  af
			
			; Set despawn timer
			ld   [hl], $32 ; iOBJInfo_Play_EnaTimer
			
			; Set initial position relative to the player's origin
			call OBJLstS_Overlap
			mMvC_SetMoveH +$0000
			mMvC_SetMoveV +$0000
		pop  de
	pop  bc
	ret
	
; =============== ProjInit_Mature_HeavensGateD ===============
; Initializes the special effect for Mature's Heaven's Gate (desperation).
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
ProjInit_Mature_HeavensGateD:
	
	; Only for the desperation version.
	ld   hl, iPlInfo_MoveId
	add  hl, bc
	ld   a, [hl]
	cp   MOVE_MATURE_HEAVENS_GATE_D
	ret  nz
	
	; Only if another projectile isn't already visible
	ld   hl, (OBJINFO_SIZE*2)+iOBJInfo_Status
	add  hl, de
	bit  OSTB_VISIBLE, [hl]
	ret  nz
	
	mMvC_PlaySound SCT_13
	
	push bc
		push de
			; A = MoveId (not needed)
			ld   hl, iPlInfo_MoveId
			add  hl, bc
			ld   a, [hl]
			push af
				call ProjInitS_InitAndGetOBJInfo
				
				; Set code pointer
				ld   hl, iOBJInfo_Play_CodeBank
				add  hl, de
				ld   [hl], BANK(ProjC_NoMove)	; BANK $05 ; iOBJInfo_Play_CodeBank
				inc  hl
				ld   [hl], LOW(ProjC_NoMove)	; iOBJInfo_Play_CodePtr_Low
				inc  hl
				ld   [hl], HIGH(ProjC_NoMove)	; iOBJInfo_Play_CodePtr_High
				
				; Write sprite mapping ptr for this projectile.
				ld   hl, iOBJInfo_BankNum
				add  hl, de
				ld   [hl], BANK(OBJLstPtrTable_Proj_Mature_HeavensGateD)	; BANK $01 ; iOBJInfo_BankNum
				inc  hl
				ld   [hl], LOW(OBJLstPtrTable_Proj_Mature_HeavensGateD)		; iOBJInfo_OBJLstPtrTbl_Low
				inc  hl
				ld   [hl], HIGH(OBJLstPtrTable_Proj_Mature_HeavensGateD)	; iOBJInfo_OBJLstPtrTbl_High
				inc  hl
				ld   [hl], $00	; iOBJInfo_OBJLstPtrTblOffset

				; Set animation speed.
				ld   hl, iOBJInfo_FrameLeft
				add  hl, de
				ld   [hl], $00	; iOBJInfo_FrameLeft
				inc  hl
				ld   [hl], ANIMSPEED_INSTANT	; iOBJInfo_FrameTotal
				
				; Set priority value
				ld   hl, iOBJInfo_Play_Priority
				add  hl, de
				ld   [hl], PROJ_PRIORITY_NODESPAWN
				inc  hl
			pop  af
			
			; Set despawn timer
			ld   [hl], $05 ; iOBJInfo_Play_EnaTimer
			
			; Set initial position relative to the player's origin
			call OBJLstS_Overlap
			mMvC_SetMoveH +$0000
			mMvC_SetMoveV +$0000
		pop  de
	pop  bc
	ret
	
; =============== ProjC_NoMove ===============
; Generic projectile code for those that don't move and *only* despawn after a certain amount of time.
; Getting hit by this won't make it disappear, so if it's set to deal damage it will deal it continuously.
ProjC_NoMove:
	; Handle despawn timer.
	ld   hl, iOBJInfo_Play_EnaTimer
	add  hl, de
	dec  [hl]
	jp   z, .despawn
	; Ok, display
	call OBJLstS_DoAnimTiming_Loop_by_DE
	ret
.despawn:
	call OBJLstS_Hide
	ret
	
; =============== MoveInputReader_Chizuru ===============
; Special move input checker for CHIZURU.
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
; OUT
; - C flag: If set, a move was started
MoveInputReader_Chizuru:
	; Normal Chizuru can't use any specials if one of her projectiles is active on-screen.
	; This doesn't apply to the boss version "KAGURA".
	mMvIn_ValidateProjActive MoveInputReader_Chizuru_NoMove
; =============== MoveInputReader_Kagura ===============
MoveInputReader_Kagura:
	mMvIn_Validate Chizuru
	
.chkAir:
	jp   MoveInputReader_Chizuru_NoMove
	
.chkGround:
	;             SELECT + B                     SELECT + A
	mMvIn_ChkEasy MoveInit_Chizuru_ReigiIshizue, MoveInit_Chizuru_TenjinKotowari
	mMvIn_ChkGA Chizuru, .chkPunch, .chkKick
.chkPunch:
	; DBDF+P -> Ichimen Ikatsu San Rai no Fui Jin 
	mMvIn_ValidateSuper .chkPunchNoSuper
	mMvIn_ChkDir MoveInput_DBDF, MoveInit_Chizuru_SanRaiFuiJin
.chkPunchNoSuper:
	; FDF+P -> 100 Katso Tenjin no Kotowari 
	mMvIn_ChkDir MoveInput_FDF, MoveInit_Chizuru_TenjinKotowari
	; FDB+P -> 212 Katsu Shinsoku no Noroti (High)
	mMvIn_ChkDir MoveInput_FDB, MoveInit_Chizuru_ShinsokuNorotiHigh
	; BDF+P -> 108 Katsu Tamayura no Shitsune
	mMvIn_ChkDir MoveInput_BDF, MoveInit_Chizuru_TamayuraShitsune
	jp   MoveInputReader_Chizuru_NoMove
.chkKick:
	; DBDB+K -> Ichimen 85 Katsu Reigi no Ishizue 
	mMvIn_ValidateProjActive .chkKickNoSuper
	mMvIn_ValidateSuper .chkKickNoSuper
	mMvIn_ChkDir MoveInput_DBDB, MoveInit_Chizuru_ReigiIshizue 
.chkKickNoSuper:
	; FDB+K -> 212 Katsu Shinsoku no Noroti (Low)
	mMvIn_ChkDir MoveInput_FDB, MoveInit_Chizuru_ShinsokuNorotiLow
	jp   MoveInputReader_Chizuru_NoMove
	
; =============== MoveInit_Chizuru_TenjinKotowari ===============
MoveInit_Chizuru_TenjinKotowari:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_CHIZURU_TENJIN_KOTOWARI_L, MOVE_CHIZURU_TENJIN_KOTOWARI_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Chizuru_SetMove
; =============== MoveInit_Chizuru_ShinsokuNorotiHigh ===============
MoveInit_Chizuru_ShinsokuNorotiHigh:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_L, MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_H
	call MoveInputS_SetSpecMove_StopSpeed
	; When playing as the boss version, the move has no collision box (can be thrown but not hit)
	mMvIn_ValSkipWithChar CHAR_ID_CHIZURU, MoveInputReader_Chizuru_SetMove
	ld   hl, iPlInfo_Flags2
	add  hl, bc
	set  PF2B_NOCOLIBOX, [hl]
	jp   MoveInputReader_Chizuru_SetMove
; =============== MoveInit_Chizuru_ShinsokuNorotiLow ===============
MoveInit_Chizuru_ShinsokuNorotiLow:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_L, MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_H
	call MoveInputS_SetSpecMove_StopSpeed
	; When playing as the boss version, the move has no collision box (can be thrown but not hit)
	mMvIn_ValSkipWithChar CHAR_ID_CHIZURU, MoveInputReader_Chizuru_SetMove
	ld   hl, iPlInfo_Flags2
	add  hl, bc
	set  PF2B_NOCOLIBOX, [hl]
	jp   MoveInputReader_Chizuru_SetMove
; =============== MoveInit_Chizuru_TamayuraShitsune ===============
MoveInit_Chizuru_TamayuraShitsune:
	call Play_Pl_ClearJoyDirBuffer
	; The heavy version is also invulnerable
	call MoveInputS_CheckMoveLHVer
	jr   nz, .heavy
.light:
	ld   a, MOVE_CHIZURU_TAMAYURA_SHITSUNE_L
	call MoveInputS_SetSpecMove_StopSpeed
	ld   hl, iPlInfo_Flags0
	add  hl, bc
	set  PF0B_PROJREFLECT, [hl]
	jp   MoveInputReader_Chizuru_SetMove
.heavy:
	ld   a, MOVE_CHIZURU_TAMAYURA_SHITSUNE_H
	call MoveInputS_SetSpecMove_StopSpeed
	ld   hl, iPlInfo_Flags0
	add  hl, bc
	set  PF0B_PROJREFLECT, [hl]
	inc  hl
	set  PF1B_INVULN, [hl]
	jp   MoveInputReader_Chizuru_SetMove
	
; =============== MoveInit_Chizuru_SanRaiFuiJin ===============
; This is the super move that restricts use of specials for a short while.
MoveInit_Chizuru_SanRaiFuiJin:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetSD MOVE_CHIZURU_SAN_RAI_FUI_JIN_S, MOVE_CHIZURU_SAN_RAI_FUI_JIN_D
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Chizuru_SetMove
; =============== MoveInit_Chizuru_ReigiIshizue ===============
MoveInit_Chizuru_ReigiIshizue:
	mMvIn_ValidateProjActive Chizuru
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetSD MOVE_CHIZURU_REIGI_ISHIZUE_S, MOVE_CHIZURU_REIGI_ISHIZUE_D
	call MoveInputS_SetSpecMove_StopSpeed
	call Play_Proj_CopyMoveDamageFromPl
	jp   MoveInputReader_Chizuru_SetMove
; =============== MoveInputReader_Chizuru_SetMove ===============
MoveInputReader_Chizuru_SetMove:
	scf
	ret
; =============== MoveInputReader_Chizuru_NoMove ===============
MoveInputReader_Chizuru_NoMove:
	or   a
	ret
	
; =============== MoveC_Chizuru_ShinsokuNoroti ===============
; Move code for Chizuru's 212 Katsu Shinsoku no Noroti:
; - MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_L
; - MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_H
; - MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_L
; - MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_H
; This move can chain into 212 Katsu Shinsoku no Noroti Ten Zui (MOVE_CHIZURU_TEN_ZUI_L, MOVE_CHIZURU_TEN_ZUI_H)
MoveC_Chizuru_ShinsokuNoroti:
	call Play_Pl_CreateJoyMergedKeysLH
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
; --------------- frame #0 ---------------
; Forward run.
.obj0:
	mMvC_ValFrameStart .obj0_cont
		call Play_Pl_ClearJoyMergedKeysLH
		ld   hl, iPlInfo_Chizuru_ShinsokuNoroti_ChainedMove
		add  hl, bc
		ld   [hl], $00
		mMvIn_ChkLHE .obj0_setDashH, .obj0_setDashE
	.obj0_setDashL: ; Light
		mMvC_SetSpeedH +$0500
		jp   .obj0_cont
	.obj0_setDashH: ; Heavy
		mMvC_SetSpeedH +$0600
		jp   .obj0_cont
	.obj0_setDashE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0700
.obj0_cont:
	; Skip the first part and switch to #3 directly if starting a chained move
	call .chkCM
	jp   z, .moveH
		mMvC_SetFrame $03*OBJLSTPTR_ENTRYSIZE, ANIMSPEED_INSTANT
		call OBJLstS_ApplyXSpeed
		jp   .ret
; --------------- frame #1 ---------------
; Forward run.
.obj1:
	; Skip the first part and switch to #3 directly if starting a chained move
	call .chkCM
	jp   z, .obj1_main
		mMvC_SetFrame $03*OBJLSTPTR_ENTRYSIZE, ANIMSPEED_INSTANT
		call OBJLstS_ApplyXSpeed
		jp   .ret
.obj1_main:
	; Play step SFX at the start of the frame
	mMvC_ValFrameStart .moveH
		mMvC_PlaySound SFX_STEP
		jp   .moveH
; --------------- frame #2 ---------------
; Forward run.
.obj2:
	; Skip the first part and switch to #3 directly if starting a chained move
	call .chkCM
	jp   z, .obj2_main
		mMvC_SetFrame $03*OBJLSTPTR_ENTRYSIZE, ANIMSPEED_INSTANT
		call OBJLstS_ApplyXSpeed
		jp   .ret
.obj2_main:
	mMvC_ValFrameStart .obj2_cont
		mMvC_PlaySound SFX_STEP
.obj2_cont:
	mMvC_ValFrameEnd .moveH
		mMvC_SetAnimSpeed ANIMSPEED_INSTANT
		jp   .moveH
	
; =============== .chkCM ===============
; Checks the input for starting a chained move, and updates the bitmask
; marking which move to chain into.
; OUT
; - Z flag: If set, no move was started
.chkCM:
	; Don't check this again if we already started a move.
	; The return value of NZ works for us.
	call .isCMSet
	ret  nz
	
	ld   hl, iPlInfo_Flags0
	add  hl, bc
	bit  PF0B_CPU, [hl]				; Is this a CPU player?
	jp   z, .chkCm_chkInputHuman	; If not, jump
.chkCm_cpu:
	; The CPU randomly decides which move to chain into.
	
	; This uses the upper nybble of the timer, giving a $10 frame window where the
	; CPU may not chain into anything. It's much less likely than chaining though.
	; ChainedMove = (wTimer / $10) & $03
	ld   a, [wTimer]
	swap a
	and  a, $03
	ld   hl, iPlInfo_Chizuru_ShinsokuNoroti_ChainedMove
	add  hl, bc
	ld   [hl], a
	or   a			; Return ZFlag = ChainedMove == 0
	ret
.chkCm_chkInputHuman:
	; Human players need to perform the input DB+P/K to start 212 Katsu Shinsoku no Noroti Ten Zui.
	; Depending on the button pressed, start the light or hard versions.
	call MoveInputS_CheckPKTypeWithMergedLH
	jp   nc, .chkCm_retZ		; Pressed any punch/kick button? If not, jump
	jp   nz, .chkCm_chkTenZuiH	; Pressed the kick button? If so start the hard version
.chkCm_chkTenZuiL:				; Otherwise, start the light one
	mMvIn_ChkDirNot MoveInput_DB, .chkCm_retZ
		; Input done
		call Play_Pl_ClearJoyDirBuffer
		; Flag that we're starting the move
		ld   hl, iPlInfo_Chizuru_ShinsokuNoroti_ChainedMove
		add  hl, bc
		set  PCMB_CHIZURU_TEN_ZUI_L, [hl]
		ret
.chkCm_chkTenZuiH:
	mMvIn_ChkDirNot MoveInput_DB, .chkCm_retZ
		; Input done
		call Play_Pl_ClearJoyDirBuffer
		; Flag that we're starting the move
		ld   hl, iPlInfo_Chizuru_ShinsokuNoroti_ChainedMove
		add  hl, bc
		set  PCMB_CHIZURU_TEN_ZUI_H, [hl]
		ret
.chkCm_retZ:
	xor  a	; Z flag set. Nothing started.
	ret
; =============== .isCMSet ===============
; Checks if a chained move was already started.
; OUT
; - A: iPlInfo_Chizuru_ShinsokuNoroti_ChainedMove
; - Z flag: If set, no move is started yet
.isCMSet:
	ld   hl, iPlInfo_Chizuru_ShinsokuNoroti_ChainedMove
	add  hl, bc
	ld   a, [hl]	; A = ChainedMoveMask
	or   a			; A != 0?
	ret
; =============== end of .chkCM ===============
	
; --------------- frame #3 ---------------
; Progressive slow down.
.obj3:
	mMvC_ValFrameStart .obj3_cont
		mMvC_PlaySound SCT_HEAVY
.obj3_cont:
	call .chkCM
	mMvC_DoFrictionH $0080
	jp   .anim
; --------------- frame #4 ---------------
; Progressive slow down + chained move start.
.obj4:
	call .chkCM
	mMvC_DoFrictionH $0080
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $14
		
		call .isCMSet					; A = ChainedMove
		jp   z, .anim					; A == 0? If so, skip
		bit  PCMB_CHIZURU_TEN_ZUI_L, a	; Light ver set?
		jp   nz, .switchToTenZuiL		; If so, jump
		bit  PCMB_CHIZURU_TEN_ZUI_H, a	; Hard ver set?
		jp   nz, .switchToTenZuiH		; If so, jump
		jp   .anim
	.switchToTenZuiL:
		ld   a, MOVE_CHIZURU_TEN_ZUI_L
		call MoveInputS_SetSpecMove_StopSpeed
		mMvC_SetDamageNext $02, HITTYPE_DROP_MAIN, PF3_SHAKELONG
		jp   .ret
	.switchToTenZuiH:
		ld   a, MOVE_CHIZURU_TEN_ZUI_H
		call MoveInputS_SetSpecMove_StopSpeed
		mMvC_SetDamageNext $02, HITTYPE_DROP_DB_A, PF3_SHAKELONG
		jp   .ret
; --------------- frame #5 ---------------
; Slow down. When the frame ends, the move ends.
.chkEnd:
	mMvC_DoFrictionH $0080
	mMvC_ValFrameEnd .anim
		jp   .end
; --------------- common ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
.end:
	call Play_Pl_EndMove
	jp   .ret
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Chizuru_TenZuiL ===============
; Move code for the light version of Chizuru's 212 Katsu Shinsoku no Noroti Ten Zui (MOVE_CHIZURU_TEN_ZUI_L).
MoveC_Chizuru_TenZuiL:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .doGravity
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------
.obj0:
	mMvC_ValFrameStart .obj0_cont
		mMvIn_ChkE .obj0_setJumpE
	.obj0_setJumpLH: ; Light / Heavy
		mMvC_SetSpeedH +$0100
		mMvC_SetSpeedV -$0400
		jp   .doGravity
	.obj0_setJumpE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0200
		mMvC_SetSpeedV -$0400
		jp   .doGravity
.obj0_cont:
	mMvC_NextFrameOnGtYSpeed -$02, ANIMSPEED_NONE
	jp   nc, .doGravity
	jp   .doGravity
; --------------- frame #0-1 / common gravity check ---------------
.doGravity:
	mMvC_ChkGravityHV $0060, .anim
		mMvC_SetLandFrame $02*OBJLSTPTR_ENTRYSIZE, $05
		jp   .ret
; --------------- frame #2 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Chizuru_TenZuiH ===============
; Move code for the hard version of Chizuru's 212 Katsu Shinsoku no Noroti Ten Zui (MOVE_CHIZURU_TEN_ZUI_H).
MoveC_Chizuru_TenZuiH:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	jp   .anim
; --------------- frame #2 ---------------
.obj2:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Chizuru_TamayuraShitsuneL ===============
; Move code for the light version of Chizuru's 108 Katsu Tamayura no Shitsune (MOVE_CHIZURU_TAMAYURA_SHITSUNE_L).	
MoveC_Chizuru_TamayuraShitsuneL:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	jp   .anim
; --------------- [TCRF] Unreferenced frame code ---------------
; Would have played the attack SFX, likely somewhere between #0 and #3.
.unused0:
	mMvC_ValFrameStart .unused0_cont
		mMvC_PlaySound SCT_ATTACKG
.unused0_cont:
	jp   .anim
; --------------- frame #4 ---------------
.obj4:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Chizuru_TamayuraShitsuneH ===============
; Move code for the hard version of Chizuru's 108 Katsu Tamayura no Shitsune (MOVE_CHIZURU_TAMAYURA_SHITSUNE_H).
MoveC_Chizuru_TamayuraShitsuneH:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .moveH_stub
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .moveH_stub
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #0 ---------------
.obj0:
	mMvC_ValFrameStart .moveH_stub
		mMvC_PlaySound SCT_HEAVY
		mMvIn_ChkE .obj0_setDashE
	.obj0_setDashLH: ; Light / Heavy
		mMvC_SetSpeedH $0080
		jp   .moveH_stub
	.obj0_setDashE:  ; [POI] Hidden Heavy
		mMvC_SetSpeedH $0100
		jp   .moveH_stub
; --------------- frame #0-2 ---------------
.moveH_stub:
	jp   .moveH
; --------------- frame #3 ---------------
.obj3:
	mMvC_ValFrameEnd .moveH
		ld   hl, iPlInfo_Flags1
		add  hl, bc
		res  PF1B_INVULN, [hl]
		mMvC_PlaySound SCT_ATTACKG
		jp   .anim
; --------------- common horz movement ---------------
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frame #8 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jr   .ret
; --------------- common ---------------
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Chizuru_SanRaiFuiJin ===============
; Move code for Chizuru's Ichimen Ikatsu San Rai no Fui Jin (MOVE_CHIZURU_SAN_RAI_FUI_JIN_S, MOVE_CHIZURU_SAN_RAI_FUI_JIN_D).
; This is the move where Chizuru pauses for a bit, then dashes forward.
; If the opponent is hit, he will flash and won't be able to start specials for a while.
MoveC_Chizuru_SanRaiFuiJin:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim
; --------------- frame #3 ---------------
.obj3:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $14
		jp   .anim
; --------------- frame #4 ---------------
.obj4:
	mMvC_ValFrameStart .obj4_cont
		mMvC_PlaySound SCT_HEAVY
		;--
		; [TCRF] This is not used elsewhere in this move
		ld   hl, iPlInfo_Chizuru_SanRaiFuiJin_83
		add  hl, bc
		ld   [hl], $00
		;--
		; Set the dash speed depending on move strength
		mMvIn_ChkLHE .obj4_setSpeedH, .obj4_setSpeedE
	.obj4_setSpeedL: ; Light
		mMvC_SetSpeedH $0400
		jp   .obj4_cont
	.obj4_setSpeedH: ; Heavy
		mMvC_SetSpeedH $0500
		jp   .obj4_cont
	.obj4_setSpeedE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH $0600
.obj4_cont:
	mMvC_DoFrictionH $0040
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $0A
		jp   .anim
; --------------- frame #5 ---------------
; Progressively slow down.
.chkEnd:
	mMvC_DoFrictionH $0080
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jp   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Chizuru_ReijiIshizue ===============
; Move code for Chizuru's Ichimen 85 Katsu Reigi no Ishizue (MOVE_CHIZURU_REIGI_ISHIZUE_S, MOVE_CHIZURU_REIGI_ISHIZUE_D).
; Chizuru Clone projectile.
MoveC_Chizuru_ReijiIshizue:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	jp   .anim ; We never get here
; --------------- frame #0 ---------------	
.obj0:
	; Spawn the projectile when starting the frame
	mMvC_ValFrameStart .chkEnd
		call ProjInit_Chizuru_ReigiIshizue
		mMvC_PlaySound SCT_HEAVY
.chkEnd:
	; End the move when the frame's over
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jp   .ret
; --------------- common ---------------
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== ProjInit_Chizuru_ReigiIshizue ===============
; Initializes the projectile for Chizuru's Ichimen 85 Katsu Reigi no Ishizue.
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
ProjInit_Chizuru_ReigiIshizue:
	mMvC_PlaySound SCT_15
	
	push bc
		push de
		
			; A = MoveId
			ld   hl, iPlInfo_MoveId
			add  hl, bc
			ld   a, [hl]
			push af	; Save MoveId
				call ProjInitS_InitAndGetOBJInfo
				
				; Set code pointer
				ld   hl, iOBJInfo_Play_CodeBank
				add  hl, de
				ld   [hl], BANK(ProjC_Chizuru_ReigiIshizue)	; BANK $05 ; iOBJInfo_Play_CodeBank
				inc  hl
				ld   [hl], LOW(ProjC_Chizuru_ReigiIshizue)	; iOBJInfo_Play_CodePtr_Low
				inc  hl
				ld   [hl], HIGH(ProjC_Chizuru_ReigiIshizue)	; iOBJInfo_Play_CodePtr_High
				
				; Write sprite mapping ptr for this projectile.
				ld   hl, iOBJInfo_BankNum
				add  hl, de
				ld   [hl], BANK(OBJLstPtrTable_Proj_Chizuru_ReigiIshizue)	; BANK $01 ; iOBJInfo_BankNum
				inc  hl
				ld   [hl], LOW(OBJLstPtrTable_Proj_Chizuru_ReigiIshizue)	; iOBJInfo_OBJLstPtrTbl_Low
				inc  hl
				ld   [hl], HIGH(OBJLstPtrTable_Proj_Chizuru_ReigiIshizue)	; iOBJInfo_OBJLstPtrTbl_High
				inc  hl
				ld   [hl], $00	; iOBJInfo_OBJLstPtrTblOffset
				
				; Set animation speed.
				ld   hl, iOBJInfo_FrameLeft
				add  hl, de
				ld   [hl], $06	; iOBJInfo_FrameLeft
				inc  hl
				ld   [hl], $06	; iOBJInfo_FrameTotal
				
				; Set priority value
				ld   hl, iOBJInfo_Play_Priority
				add  hl, de
				ld   [hl], PROJ_PRIORITY_NODESPAWN
				
				;
				; Determine how long to display it.
				;
				
				inc  hl	; Seek to iOBJInfo_Play_EnaTimer
				
			pop  af ; A = MoveId
			
			cp   MOVE_CHIZURU_REIGI_ISHIZUE_D	; Desperation move?
			jp   z, .timerD						; If so, jump
		.timerS:
			; The normal version has a despawn timer
			ld   [hl], $78
			jp   .setPos
		.timerD:
			; The desperation version doesn't despawn until it goes offscreen
			ld   [hl], $FF
		.setPos:
		
			; Start on top of player, and move forward at $00.80px/frame
			call OBJLstS_Overlap
			mMvC_SetSpeedH +$0080
		pop  de
	pop  bc
	ret
	
; =============== ProjC_Chizuru_ReigiIshizue ===============
; Projectile code for Chizuru's Ichimen 85 Katsu Reigi no Ishizue.
; This projectile is a walking Chizuru clone that deals continuous damage.
ProjC_Chizuru_ReigiIshizue:
	call ExOBJS_Play_ChkHitModeAndMoveH	; Move projectile
	jp   c, .despawn					; Did it go off-screen? If so, despawn
	
	; Projectile despawns on hit
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	bit  PF1B_HITRECV, [hl]				; Did we get hit?
	jp   nz, .despawn					; If so, despawn it
	
	; Decrement despawn timer only if it's not $FF (like the desperation super)
	ld   hl, iOBJInfo_Play_EnaTimer
	add  hl, de
	bit  7, [hl]		; Is the despawn timer $FF? (>= $80)
	jp   nz, .anim		; If so, don't decrement it
	dec  [hl]			; Otherwise, Timer--
	jp   z, .despawn	; Did it reach 0? If so, despawn it
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
	ret
.despawn:
	call OBJLstS_Hide
	ret
	
; =============== MoveInputReader_Daimon ===============
; Special move input checker for DAIMON.
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
; OUT
; - C flag: If set, a move was started
MoveInputReader_Daimon:
	mMvIn_Validate Daimon
	
; AIR SPECIALS
.chkAir:
	jp   MoveInputReader_Daimon_NoMove
	
; GROUND SPECIALS
.chkGround:
	;             SELECT + B                      SELECT + A
	mMvIn_ChkEasy MoveInit_Daimon_HeavenHellDrop, MoveInit_Daimon_JiraiShin
	mMvIn_ChkGA Daimon, .chkPunch, .chkKick
	
.chkPunch:
	mMvIn_ValidateSuper .chkPunchNoSuper
	; FDBx2+P -> Heaven to Hell Drop
	mMvIn_ChkDir MoveInput_FDBFDB, MoveInit_Daimon_HeavenHellDrop
	
.chkPunchNoSuper:
	; FDBF+P -> Heaven Drop
	mMvIn_ChkDir MoveInput_FDBF, MoveInit_Daimon_HeavenDrop
	; FDF+P -> Jirai Shin
	mMvIn_ChkDir MoveInput_FDF, MoveInit_Daimon_JiraiShin
	; BDF+P -> Cloud Tosser / Stump Throw
	mMvIn_ChkDir MoveInput_BDF, MoveInit_Daimon_CloudTosser
	; End
	jp   MoveInputReader_Daimon_NoMove
.chkKick:
	; BDF+K -> Chou Oosoto Gari
	mMvIn_ChkDir MoveInput_BDF, MoveInit_Daimon_ChouOosotoGari
	; DB+K -> Chou Ukemi
	mMvIn_ChkDir MoveInput_DB, MoveInit_Daimon_ChouUkemi
	; End
	jp   MoveInputReader_Daimon_NoMove
	
; =============== MoveInit_Daimon_JiraiShin ===============
MoveInit_Daimon_JiraiShin:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_DAIMON_JIRAI_SHIN, MOVE_DAIMON_JIRAI_SHIN_FAKE
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Daimon_MoveSet
; =============== MoveInit_Daimon_ChouUkemi ===============
MoveInit_Daimon_ChouUkemi:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_DAIMON_CHOU_UKEMI_L, MOVE_DAIMON_CHOU_UKEMI_H
	call MoveInputS_SetSpecMove_StopSpeed
	; Command roll gets invulnerability
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	set  PF1B_INVULN, [hl]
	jp   MoveInputReader_Daimon_MoveSet
; =============== MoveInit_Daimon_ChouOosotoGari ===============
MoveInit_Daimon_ChouOosotoGari:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_DAIMON_CHOU_OOSOTO_GARI_L, MOVE_DAIMON_CHOU_OOSOTO_GARI_H
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Daimon_MoveSet
; =============== MoveInit_Daimon_CloudTosser ===============
MoveInit_Daimon_CloudTosser:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_GetLH MOVE_DAIMON_CLOUD_TOSSER, MOVE_DAIMON_STUMP_THROW
	call MoveInputS_SetSpecMove_StopSpeed
	jp   MoveInputReader_Daimon_MoveSet
; =============== MoveInit_Daimon_HeavenDrop ===============
MoveInit_Daimon_HeavenDrop:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_ValStartCmdThrow_StdColi Daimon
	mMvIn_GetLH MOVE_DAIMON_HEAVEN_DROP_L, MOVE_DAIMON_HEAVEN_DROP_H
	call MoveInputS_SetSpecMove_StopSpeed
	; Command throw gets invulnerability when confirmed
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	set  PF1B_INVULN, [hl]
	jp   MoveInputReader_Daimon_MoveSet
	
; =============== MoveInit_Daimon_HeavenHellDrop ===============
MoveInit_Daimon_HeavenHellDrop:
	call Play_Pl_ClearJoyDirBuffer
	mMvIn_ValStartCmdThrow_StdColi Daimon
	mMvIn_GetSD MOVE_DAIMON_HEAVEN_HELL_DROP_S, MOVE_DAIMON_HEAVEN_HELL_DROP_D
	call MoveInputS_SetSpecMove_StopSpeed
	; Command throw gets invulnerability when confirmed
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	set  PF1B_INVULN, [hl]
	jp   MoveInputReader_Daimon_MoveSet
; =============== MoveInputReader_Daimon_MoveSet ===============
MoveInputReader_Daimon_MoveSet:
	scf
	ret
; =============== MoveInputReader_Daimon_NoMove ===============
MoveInputReader_Daimon_NoMove:
	or   a
	ret
	
; =============== MoveC_Daimon_JiraiShin ===============
; Move code for Daimon's Jirai Shin and its fake variant. (MOVE_DAIMON_JIRAI_SHIN, MOVE_DAIMON_JIRAI_SHIN_FAKE).
MoveC_Daimon_JiraiShin:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------	
.obj0:
	mMvC_ValFrameEnd .anim
		mMvC_PlaySound SCT_HEAVY
		jp   .anim
; --------------- frame #1 ---------------	
.obj1:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $0A
		
		; The fake version ends early, before the actual attack starts
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_DAIMON_JIRAI_SHIN_FAKE	; iPlInfo_MoveId == MOVE_DAIMON_JIRAI_SHIN_FAKE
		jp   z, .end						; If so, we're done
		
		mMvC_PlaySound SCT_0D
		jp   .anim
; --------------- frame #2 ---------------	
.obj2:
	call Play_Pl_DoGroundScreenShake
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $10
		; Frame #3 uses an extremely long hitbox across the ground.
		; When the opponent gets hit, the screen shakes, so initialize this.
		xor  a
		ld   [wScreenShakeY], a
		jp   .anim
; --------------- frame #3 ---------------
; Attack frame. When it ends, the move's over.
.chkEnd:
	mMvC_ValFrameEnd .anim
; --------------- common ---------------	
.end:
	call Play_Pl_EndMove
	jr   .ret
.anim:
	jp   OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Daimon_ChouUkemi ===============
; Move code for Daimon's Chou Ukemi (MOVE_DAIMON_CHOU_UKEMI_L, MOVE_DAIMON_CHOU_UKEMI_H).	
; Command roll.
MoveC_Daimon_ChouUkemi:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
; --------------- frame #0 ---------------	
.obj0:
	; At the start of the frame, set the forward movement speed
	mMvC_ValFrameStart .obj0_moveH
		mMvC_PlaySound SFX_HEAVY
		
		; Depending on the move strength...
		mMvIn_ChkLHE .obj0_setSpeedH, .obj0_setSpeedE
	.obj0_setSpeedL: ; Light
		mMvC_SetSpeedH +$0100
		jp   .obj0_moveH
	.obj0_setSpeedH: ; Heavy
		mMvC_SetSpeedH +$0200
		jp   .obj0_moveH
	.obj0_setSpeedE: ; [POI] Hidden Heavy
		mMvC_SetSpeedH +$0300
.obj0_moveH:
	jp   .moveH
; --------------- frame #1 ---------------	
.obj1:
	mMvC_ValFrameEnd .moveH
		mMvC_SetAnimSpeed $04 ; Slow down anim (from $01)
		mMvC_PlaySound SFX_DROP
		jp   .moveH
; --------------- frame #1-2, common horz movement ---------------	
.moveH:
	call OBJLstS_ApplyXSpeed
	jp   .anim
; --------------- frame #2 ---------------	
.obj2:
	; Shake the ground for the duration of this frame
	call Play_Pl_DoGroundScreenShake
	
	; [POI] Incorrect target
IF FIX_BUGS == 1
	mMvC_ValFrameEnd .anim
ELSE
	mMvC_ValFrameEnd MoveC_Daimon_JiraiShin.anim
ENDC
		; When the frame is over...
		mMvC_SetAnimSpeed $02	; Speed up the anim
		xor  a					; Reset the screen Y offset
		ld   [wScreenShakeY], a
		
		; Allow chaining into another special during recovery (#3)
		ld   hl, iPlInfo_Flags0
		add  hl, bc
		res  PF0B_SPECMOVE, [hl]
		inc  hl			; Seek to iPlInfo_Flags1
		res  PF1B_NOSPECSTART, [hl]
		jp   .anim
; --------------- frame #3 ---------------	
.chkEnd:
	mMvC_ValFrameEnd .anim
		call Play_Pl_EndMove
		jp   .ret
; --------------- common ---------------	
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Daimon_CmdThrow ===============
; Move code for Daimon's command throws:
; - Chou Oosoto Gari (MOVE_DAIMON_CHOU_OOSOTO_GARI_L, MOVE_DAIMON_CHOU_OOSOTO_GARI_H)
; - Cloud Tosser (MOVE_DAIMON_CLOUD_TOSSER)
; - Stump Throw (MOVE_DAIMON_STUMP_THROW)
MoveC_Daimon_CmdThrow:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	
	; Startup
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	
	; Throw test
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	
	; Throw whiff
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	
	; Throw ok
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj5
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj6
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	
	jp   .anim ; We never get here
; --------------- frame #0 ---------------	
; Startup.
.obj0:
	jp   .anim
; --------------- frame #1 ---------------
; Tries to start the command throw.	
.obj1:
	; If the animation continues as normal (.obj1_anim), the throw hasn't grabbed the opponent yet.
	; If the validation must passes, the throw is confirmed, so we get moved to #4.
	
	; Opponent must be in throw range (overlapped with hitbox for throw range)
	ld   hl, iPlInfo_ColiFlags
	add  hl, bc
	bit  PCF_HITOTHER, [hl]
	jp   z, .obj1_anim
	
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	; Opponent must not be invulnerable
	bit  PF1B_INVULN, [hl]
	jp   nz, .obj1_anim
	; Opponent must be hit
	bit  PF1B_HITRECV, [hl]
	jp   z, .obj1_anim
	; Opponent can't have blocked the hit
	bit  PF1B_GUARD, [hl]
	jp   nz, .obj1_anim
	
	; Try to start the command throw
	mMvIn_ValStartCmdThrow_AllColi .anim
	
		; We're invulnerable with the throw confirmed
		ld   hl, iPlInfo_Flags1
		add  hl, bc
		set  PF1B_INVULN, [hl]
		
		; Set info for next frame
		mMvC_SetFrame $04*OBJLSTPTR_ENTRYSIZE, $01
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp -$10, -$18
		jp   .ret
.obj1_anim:
	jp   .anim
; --------------- frame #4 ---------------
; Rotation frame 1
.obj4:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		
		; For Cloud Tosser / Stump Throw
		mMvC_MoveThrowOp -$08, -$18 ; Move opponent back 8px, up $18px
		
		; Chou Oosoto Gari uses a different position and makes the opponent face the same direction as us
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_DAIMON_CLOUD_TOSSER	; MoveId >= MOVE_DAIMON_CLOUD_TOSSER?
		jp   nc, .anim					; If so, jump (not Chou Oosoto Gari)
		call Pl_CopyXFlipToOther
		mMvC_MoveThrowOp -$10, -$18
		jp   .anim
; --------------- frame #5 ---------------
; Rotation frame 2
.obj5:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTD, PF3_SHAKELONG
		
		; Use different opponent position for Chou Oosoto Gari
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_DAIMON_CLOUD_TOSSER	; MoveId >= MOVE_DAIMON_CLOUD_TOSSER?
		jp   nc, .obj5_setPosCt			; If so, jump (not Chou Oosoto Gari)
	.obj5_setPosCog:
		mMvC_MoveThrowOp -$10, -$10
		jp   .anim
	.obj5_setPosCt:
		mMvC_MoveThrowOp +$10, -$08
		jp   .anim
; --------------- frame #6 ---------------
; Rotation frame 3, switch to damage at the end.
.obj6:
	mMvC_ValFrameEnd .anim
	
		; Set damage info when switching to #7.
		; Chou Oosoto Gari uses a different hit effect than the others.
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_DAIMON_CLOUD_TOSSER	; MoveId >= MOVE_DAIMON_CLOUD_TOSSER?
		jp   nc, .obj6_setDamageCt		; If so, jump (not Chou Oosoto Gari)
	.obj6_setDamageCog:
		mkhl $06, HITTYPE_DROP_DB_A
		ld   hl, CHL
		jp   .obj6_setDamage
	.obj6_setDamageCt:
		mkhl $06, HITTYPE_THROW_END
		ld   hl, CHL
	.obj6_setDamage:
		ld   a, $00 ; Flags
		call Play_Pl_SetMoveDamageNext
		jp   .anim
; --------------- frame #2,#7 ---------------
; Whiff for #2, Damage frame for #7.
.obj2:
	; When switching to #3 or #8, set $0A frames of delay to the recovery.
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $0A
		jp   .anim
; --------------- frames #3,#8 ---------------
.chkEnd:
	mMvC_ValFrameEnd .anim
		jp   .end
	.end:
		mMvC_EndThrow_Slow
		jp   .ret
; --------------- common ---------------	
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Daimon_HeavenDrop ===============
; Move code for Daimon's Heaven Drop (MOVE_DAIMON_HEAVEN_DROP_L, MOVE_DAIMON_HEAVEN_DROP_H).
; Command throw.
MoveC_Daimon_HeavenDrop:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj0
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj1
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj2
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj3
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj4
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj5
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj6
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj7
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .obj7
	cp   $09*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	jp   .anim ; We never get here
; --------------- frame #0 ---------------	
.obj0:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp -$10, -$18
		jp   .anim
; --------------- frames #7-8 ---------------	
.obj7:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $05
		jp   .anim
; --------------- frame #1 ---------------	
.obj1:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp +$08, -$20
		jp   .anim
; --------------- frame #2 ---------------	
.obj2:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_HIT_MULTIGS, PF3_LASTHIT|PF3_SHAKEONCE
		jp   .anim
; --------------- frame #3 ---------------	
.obj3:
	mMvC_ValFrameEnd .anim
		mMvIn_ValStartCmdThrow_AllColi .ret
			jp   .anim
; --------------- frame #4 ---------------	
.obj4:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp -$10, -$20
		jp   .anim
; --------------- frame #5 ---------------	
.obj5:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp +$04, -$18
		jp   .anim
; --------------- frame #6 ---------------	
.obj6:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $1E
		mMvC_SetDamageNext $06, HITTYPE_DROP_SWOOPUP, PF3_SHAKELONG
		jp   .anim
; --------------- frame #9 ---------------	
.chkEnd:
	mMvC_ValFrameEnd .anim
		mMvC_EndThrow_Slow
		jp   .ret
; --------------- common ---------------	
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
	
; =============== MoveC_Daimon_HeavenHellDrop ===============
; Move code for Daimon's Heaven to Hell Drop (MOVE_DAIMON_HEAVEN_HELL_DROP_S, MOVE_DAIMON_HEAVEN_HELL_DROP_D).	
; Command throw.
MoveC_Daimon_HeavenHellDrop:
	call Play_Pl_MoveByColiBoxOverlapX
	mMvC_ValLoaded .ret
	
	; Depending on the visible frame...
	ld   hl, iOBJInfo_OBJLstPtrTblOffsetView
	add  hl, de
	ld   a, [hl]
	cp   $00*OBJLSTPTR_ENTRYSIZE
	jp   z, .init
	cp   $01*OBJLSTPTR_ENTRYSIZE
	jp   z, .iGrabUF
	cp   $02*OBJLSTPTR_ENTRYSIZE
	jp   z, .iGrabF
	cp   $03*OBJLSTPTR_ENTRYSIZE
	jp   z, .iGrabDFDamage
	cp   $04*OBJLSTPTR_ENTRYSIZE
	jp   z, .iSetSpeed
	
	cp   $05*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabStartF
	cp   $06*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabU
	cp   $07*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabUB_setDamage
	cp   $08*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabB_decAnimSpeed
	cp   $09*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabStartB
	cp   $0A*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabU2
	cp   $0B*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabUB_setDamage
	cp   $0C*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpChkLoop
	
	cp   $0D*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabStartF
	cp   $0E*OBJLSTPTR_ENTRYSIZE
	jp   z, .lpGrabU
	cp   $0F*OBJLSTPTR_ENTRYSIZE
	jp   z, .startThrow
	cp   $10*OBJLSTPTR_ENTRYSIZE
	jp   z, .throw1
	cp   $11*OBJLSTPTR_ENTRYSIZE
	jp   z, .throw2
	
	cp   $12*OBJLSTPTR_ENTRYSIZE
	jp   z, .chkEnd
	
	jp   .anim ; We never get here
	
; --------------- frame #0 ---------------
; Startup & initialization code.
.init:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $05
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		
		; 
		; This move animation is divided in five parts:
		; - Init (here)
		; - First hit in grab mode (#1-#4)
		; - Looping part for 2nd+ hit during grab mode (#5-#C)
		; - The throw itself (#C-#11)
		; - Transition to Jirai Shin for the earthquake effect (if applicable) (#12)
		;
		; How many times the second part is looped is determined by the timer in iPlInfo_Daimon_HeavenHellDrop_GrabLoopsLeft.
		; The looping part loops more times in the desperation version of the move, meaning the opponents receives more damage by the end.
		; Because the loop timer also directly influences the animation speed (Speed = Timer >> 1), having
		; it loop more means the desperation super starts with a slower animation speed.
		;
		
		
		; Initialize the aforemented loop timer
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_DAIMON_HEAVEN_HELL_DROP_D	; Is the current move the desperation super?
		jr   z, .init_setLoopCountD			; If so, jump
	.init_setLoopCountS:
		ld   a, $02				; Loop twice for normal super			
		jp   .init_setLoopCount
	.init_setLoopCountD:
		ld   a, $04				; Loop 4 times for desperation super
	.init_setLoopCount:
		ld   hl, iPlInfo_Daimon_HeavenHellDrop_GrabLoopsLeft
		add  hl, bc				; Seek to loop counter
		ld   [hl], a			; Save the new value
		
		; Make opponent face same direction as us
		call Pl_CopyXFlipToOther
		mMvC_MoveThrowOp -$08, -$10
		jp   .anim
; --------------- frame #1 ---------------
; Initial grab frame. Opponent up-front.
.iGrabUF:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
		mMvC_MoveThrowOp -$0C, -$10
		jp   .anim
; --------------- frame #2 ---------------
; Initial grab frame. Opponent is in front.
.iGrabF:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_THROW_ROTD, PF3_LASTHIT|PF3_SHAKEONCE
		mMvC_MoveThrowOp -$10, -$08
		jp   .anim
; --------------- frame #3 ---------------
; Initial grab frame. Opponent is in front and slightly below the middle.
.iGrabDFDamage:
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_HIT_MULTIGS, PF3_LASTHIT|PF3_SHAKEONCE
		jp   .anim
; --------------- frame #4 ---------------
; Initial grab frame. Opponent is on the ground forward.
;
; At the end of the frame, it initializes the animation speed for the looping portion:
; iOBJInfo_FrameTotal = LoopCounter * 2
; This will get decremented twice for every loop, appropriately.
.iSetSpeed:
	mMvC_ValFrameEnd .anim

		push hl	; Save HL
			ld   hl, iPlInfo_Daimon_HeavenHellDrop_GrabLoopsLeft
			add  hl, bc
			ld   a, [hl]	; A = Timer << 1
			sla  a
		pop  hl			; Restore ptr to iOBJInfo_FrameLeft
		inc  hl			; Seek to iOBJInfo_FrameTotal
		ld   [hl], a	; iOBJInfo_FrameTotal = A
		jp   .anim
; --------------- common move / damage instructions ---------------
.setRotL_XM08_YM18:
	mMvC_MoveThrowOp -$08, -$18 ; Move opponent back 8px, up $18px
	jp   .setRotL
.setRotL_XP08_YM18:
	mMvC_MoveThrowOp +$08, -$18
.setRotL:
	mMvC_SetDamageNext $06, HITTYPE_THROW_ROTL, PF3_SHAKELONG
	jp   .anim
.setRotD_XM10YM14:
	mMvC_MoveThrowOp -$10, -$14
	jp   .setRotD
.setRotD_XP10YM14:
	mMvC_MoveThrowOp +$10, -$14
.setRotD:
	mMvC_SetDamageNext $06, HITTYPE_THROW_ROTD, PF3_SHAKELONG
	jp   .anim
; --------------- frame #5,#D ---------------
; Grab loop - Daimon crouching starting the throw. Opponent is on the ground in front.
.lpGrabStartF:
	mMvC_ValFrameEnd .anim
		; Start the command throw again, since damaging the player using HITTYPE_HIT_MULTIGS internally ended the throw state.
		; As the opponent is near and "frozen", this should never fail.
		mMvIn_ValStartCmdThrow_AllColi .ret
			jp   .setRotL_XM08_YM18
; --------------- frame #9 ---------------
; Grab loop - Daimon crouching starting the throw. Opponent is on the ground behind.
.lpGrabStartB:
	mMvC_ValFrameEnd .anim
		; See #5
		mMvIn_ValStartCmdThrow_AllColi .ret
			jp   .setRotL_XP08_YM18
; --------------- frame #6,#E ---------------
; Grab loop. Opponent is above, coming from forward.
.lpGrabU:
	mMvC_ValFrameEnd .anim
		jp   .setRotD_XP10YM14
; --------------- frame #A ---------------
; Grab loop. Opponent is above, coming from behind.
.lpGrabU2:
	mMvC_ValFrameEnd .anim
		jp   .setRotD_XM10YM14
; --------------- frame #7,#B ---------------
; Grab loop. Opponent is diagonally up backwards..
.lpGrabUB_setDamage:
	; At the end of this, deal damage.
	; Doing this ends the throw state, so one of the frames after regrabs the opponent.
	mMvC_ValFrameEnd .anim
		mMvC_SetDamageNext $06, HITTYPE_HIT_MULTIGS, PF3_SHAKELONG
		jp   .anim
; --------------- frame #F ---------------
; At the end of the frame, perform the long off-screen throw.
.startThrow:
	mMvC_ValFrameEnd .anim
		mMvC_SetAnimSpeed $0A
		mMvC_SetDamageNext $06, HITTYPE_DROP_SWOOPUP, PF3_SHAKELONG
		jp   .anim
; --------------- frame #8 ---------------
; Grab loop. Opponent is on the ground backwards.
.lpGrabB_decAnimSpeed:
	mMvC_ValFrameEnd .anim
		inc  hl	; Seek to iOBJInfo_FrameTotal
		dec  [hl]
		jp   .anim
; --------------- frame #C ---------------
; Grab loop. Opponent is on the ground forwards, like in #5.
; At the end of the frame, check if the looping portion should actually loop.
.lpChkLoop:
	mMvC_ValFrameEnd .anim
		; Increase animation speed again (after it was done on #8)
		inc  hl		; Seek to iOBJInfo_FrameTotal
		dec  [hl]	; iOBJInfo_FrameTotal--
		
		push hl
			; LoopCount--
			ld   hl, iPlInfo_Daimon_HeavenHellDrop_GrabLoopsLeft
			add  hl, bc
			dec  [hl]					; Did the loop counter elapse?
			jp   z, .lpChkLoop_noLoop	; If so, jump
		pop  hl	
		
		; Otherwise, loop back to #5.
		; Since .anim will increment the internal sprite mapping ID, this value must be set to #4.
		ld   hl, iOBJInfo_OBJLstPtrTblOffset
		add  hl, de
		ld   [hl], $04*OBJLSTPTR_ENTRYSIZE
		jp   .anim
		
		.lpChkLoop_noLoop:
		pop  hl
		; When the looping is over, continue normally to #D and animate as fast as possible.
		ld   [hl], ANIMSPEED_INSTANT
		jp   .anim
; --------------- frame #10 ---------------
; Throw frame. Nothing happens here.
.throw1:
	jp   .anim
; --------------- frame #11 ---------------
; Post-throw frame.
.throw2:
	mMvC_ValFrameEnd .anim
		; Set a really large delay for #12 before it starts the earthquake.
		; This is sync'd to how the opponent moves when thrown, so the earthquake happens
		; when the opponent is on the ground.
		mMvC_SetAnimSpeed $64
		jp   .anim
; --------------- frame #12 ---------------
; Last frame before the transition to Jirai Shin.
.chkEnd:
	mMvC_ValFrameEnd .anim
		; Transition to Jirai Shin when the move ends.
		; Only the desperation super actually transitions to the real one though.
		ld   a, PLAY_THROWACT_NONE
		ld   [wPlayPlThrowActId], a
		ld   hl, iPlInfo_MoveId
		add  hl, bc
		ld   a, [hl]
		cp   MOVE_DAIMON_HEAVEN_HELL_DROP_D	; Is the current move the desperation super?
		jr   z, .chkEnd_real				; If so, jump
	.chkEnd_fake:
		ld   a, MOVE_DAIMON_JIRAI_SHIN_FAKE
		jp   .chkEnd_setNextMove
	.chkEnd_real:
		ld   a, MOVE_DAIMON_JIRAI_SHIN
	.chkEnd_setNextMove:
		call MoveInputS_SetSpecMove_StopSpeed
		mMvC_SetDamageNext $08, HITTYPE_DROP_MAIN, PF3_SHAKELONG|PF3_FLASH_B_SLOW|PF3_SHAKEONCE
		jp   .ret
; --------------- common ---------------	
.anim:
	call OBJLstS_DoAnimTiming_Loop_by_DE
.ret:
	ret
; =============== END OF BANK ===============
; Junk area below.
L057ED2: db $3E;X
L057ED3: db $83;X
L057ED4: db $CD;X
L057ED5: db $90;X
L057ED6: db $38;X
L057ED7: db $C3;X
L057ED8: db $DD;X
L057ED9: db $7E;X
L057EDA: db $CD;X
L057EDB: db $0B;X
L057EDC: db $2F;X
L057EDD: db $C9;X
L057EDE: db $00;X
L057EDF: db $09;X
L057EE0: db $35;X
L057EE1: db $CA;X
L057EE2: db $EE;X
L057EE3: db $7E;X
L057EE4: db $E1;X
L057EE5: db $21;X
L057EE6: db $13;X
L057EE7: db $00;X
L057EE8: db $19;X
L057EE9: db $36;X
L057EEA: db $10;X
L057EEB: db $C3;X
L057EEC: db $2C;X
L057EED: db $7F;X
L057EEE: db $E1;X
L057EEF: db $36;X
L057EF0: db $00;X
L057EF1: db $C3;X
L057EF2: db $2C;X
L057EF3: db $7F;X
L057EF4: db $C3;X
L057EF5: db $2C;X
L057EF6: db $7F;X
L057EF7: db $CD;X
L057EF8: db $9A;X
L057EF9: db $2E;X
L057EFA: db $D2;X
L057EFB: db $2C;X
L057EFC: db $7F;X
L057EFD: db $23;X
L057EFE: db $36;X
L057EFF: db $64;X
L057F00: db $C3;X
L057F01: db $2C;X
L057F02: db $7F;X
L057F03: db $CD;X
L057F04: db $9A;X
L057F05: db $2E;X
L057F06: db $D2;X
L057F07: db $2C;X
L057F08: db $7F;X
L057F09: db $3E;X
L057F0A: db $00;X
L057F0B: db $EA;X
L057F0C: db $73;X
L057F0D: db $C1;X
L057F0E: db $21;X
L057F0F: db $32;X
L057F10: db $00;X
L057F11: db $09;X
L057F12: db $7E;X
L057F13: db $FE;X
L057F14: db $66;X
L057F15: db $28;X
L057F16: db $05;X
L057F17: db $3E;X
L057F18: db $4A;X
L057F19: db $C3;X
L057F1A: db $1E;X
L057F1B: db $7F;X
L057F1C: db $3E;X
L057F1D: db $48;X
L057F1E: db $CD;X
L057F1F: db $48;X
L057F20: db $38;X
L057F21: db $21;X
L057F22: db $08;X
L057F23: db $08;X
L057F24: db $3E;X
L057F25: db $83;X
L057F26: db $CD;X
L057F27: db $1C;X
L057F28: db $39;X
L057F29: db $C3;X
L057F2A: db $2F;X
L057F2B: db $7F;X
L057F2C: db $CD;X
L057F2D: db $CC;X
L057F2E: db $2F;X
L057F2F: db $C9;X
L057F30: db $7F;X
L057F31: db $E1;X
L057F32: db $21;X
L057F33: db $13;X
L057F34: db $00;X
L057F35: db $19;X
L057F36: db $36;X
L057F37: db $10;X
L057F38: db $C3;X
L057F39: db $79;X
L057F3A: db $7F;X
L057F3B: db $E1;X
L057F3C: db $36;X
L057F3D: db $00;X
L057F3E: db $C3;X
L057F3F: db $79;X
L057F40: db $7F;X
L057F41: db $C3;X
L057F42: db $79;X
L057F43: db $7F;X
L057F44: db $CD;X
L057F45: db $96;X
L057F46: db $2E;X
L057F47: db $D2;X
L057F48: db $79;X
L057F49: db $7F;X
L057F4A: db $23;X
L057F4B: db $36;X
L057F4C: db $6E;X
L057F4D: db $C3;X
L057F4E: db $79;X
L057F4F: db $7F;X
L057F50: db $CD;X
L057F51: db $96;X
L057F52: db $2E;X
L057F53: db $D2;X
L057F54: db $79;X
L057F55: db $7F;X
L057F56: db $3E;X
L057F57: db $00;X
L057F58: db $EA;X
L057F59: db $72;X
L057F5A: db $C1;X
L057F5B: db $21;X
L057F5C: db $32;X
L057F5D: db $00;X
L057F5E: db $09;X
L057F5F: db $7E;X
L057F60: db $FE;X
L057F61: db $66;X
L057F62: db $28;X
L057F63: db $05;X
L057F64: db $3E;X
L057F65: db $4A;X
L057F66: db $C3;X
L057F67: db $6B;X
L057F68: db $7F;X
L057F69: db $3E;X
L057F6A: db $48;X
L057F6B: db $CD;X
L057F6C: db $13;X
L057F6D: db $38;X
L057F6E: db $21;X
L057F6F: db $08;X
L057F70: db $08;X
L057F71: db $3E;X
L057F72: db $83;X
L057F73: db $CD;X
L057F74: db $E7;X
L057F75: db $38;X
L057F76: db $C3;X
L057F77: db $7C;X
L057F78: db $7F;X
L057F79: db $CD;X
L057F7A: db $C6;X
L057F7B: db $2F;X
L057F7C: db $C9;X
L057F7D: db $81;X
L057F7E: db $7F;X
L057F7F: db $3E;X
L057F80: db $48;X
L057F81: db $CD;X
L057F82: db $86;X
L057F83: db $34;X
L057F84: db $21;X
L057F85: db $08;X
L057F86: db $08;X
L057F87: db $3E;X
L057F88: db $83;X
L057F89: db $CD;X
L057F8A: db $5A;X
L057F8B: db $35;X
L057F8C: db $C3;X
L057F8D: db $92;X
L057F8E: db $7F;X
L057F8F: db $CD;X
L057F90: db $36;X
L057F91: db $2C;X
L057F92: db $C9;X
L057F93: db $CD;X
L057F94: db $54;X
L057F95: db $36;X
L057F96: db $D2;X
L057F97: db $42;X
L057F98: db $80;X
L057F99: db $CD;X
L057F9A: db $FB;X
L057F9B: db $03;X
L057F9C: db $3E;X
L057F9D: db $03;X
L057F9E: db $EA;X
L057F9F: db $72;X
L057FA0: db $C1;X
L057FA1: db $C3;X
L057FA2: db $4B;X
L057FA3: db $7F;X
L057FA4: db $CD;X
L057FA5: db $4C;X
L057FA6: db $2A;X
L057FA7: db $D2;X
L057FA8: db $3F;X
L057FA9: db $80;X
L057FAA: db $C3;X
L057FAB: db $65;X
L057FAC: db $7F;X
L057FAD: db $CD;X
L057FAE: db $4C;X
L057FAF: db $2A;X
L057FB0: db $D2;X
L057FB1: db $3F;X
L057FB2: db $80;X
L057FB3: db $C3;X
L057FB4: db $5C;X
L057FB5: db $7F;X
L057FB6: db $CD;X
L057FB7: db $4C;X
L057FB8: db $2A;X
L057FB9: db $D2;X
L057FBA: db $3F;X
L057FBB: db $80;X
L057FBC: db $21;X
L057FBD: db $0B;X
L057FBE: db $06;X
L057FBF: db $3E;X
L057FC0: db $01;X
L057FC1: db $CD;X
L057FC2: db $A0;X
L057FC3: db $34;X
L057FC4: db $C3;X
L057FC5: db $3F;X
L057FC6: db $80;X
L057FC7: db $CD;X
L057FC8: db $4C;X
L057FC9: db $2A;X
L057FCA: db $D2;X
L057FCB: db $3F;X
L057FCC: db $80;X
L057FCD: db $23;X
L057FCE: db $36;X
L057FCF: db $0A;X
L057FD0: db $21;X
L057FD1: db $0E;X
L057FD2: db $06;X
L057FD3: db $3E;X
L057FD4: db $01;X
L057FD5: db $CD;X
L057FD6: db $A0;X
L057FD7: db $34;X
L057FD8: db $C3;X
L057FD9: db $3F;X
L057FDA: db $80;X
L057FDB: db $CD;X
L057FDC: db $4C;X
L057FDD: db $2A;X
L057FDE: db $D2;X
L057FDF: db $3F;X
L057FE0: db $80;X
L057FE1: db $23;X
L057FE2: db $35;X
L057FE3: db $C3;X
L057FE4: db $3F;X
L057FE5: db $80;X
L057FE6: db $CD;X
L057FE7: db $4C;X
L057FE8: db $2A;X
L057FE9: db $D2;X
L057FEA: db $3F;X
L057FEB: db $80;X
L057FEC: db $23;X
L057FED: db $35;X
L057FEE: db $E5;X
L057FEF: db $21;X
L057FF0: db $82;X
L057FF1: db $00;X
L057FF2: db $09;X
L057FF3: db $35;X
L057FF4: db $CA;X
L057FF5: db $01;X
L057FF6: db $80;X
L057FF7: db $E1;X
L057FF8: db $21;X
L057FF9: db $13;X
L057FFA: db $00;X
L057FFB: db $19;X
L057FFC: db $36;X
L057FFD: db $10;X
L057FFE: db $C3;X
L057FFF: db $3F;X
