MoveAnimTbl_Marker:
; =============== MoveAnimTbl_* ===============
; OBJInfo and PlInfo settings for every move (not just specials).
; This primarily defines the move animations, which in turn define the frames, which have their own collision boxes.
;
; It's extremely important that the move animations assigned here are compatible with the respective move code
; as assigned in MoveCodePtrTbl_*.
; 
; This is due to what the move code can do with the sprite mapping ID:
; - The move may only end when a certain ID is reached.
;   If the animation has less frames, it may loop or freeze at the last frame,
;   causing a softlock if the other player doesn't hit the player out of it (guaranteed in case of the CPU).
; - The move ID may be set to an arbitrary value.
;   If that's past the end of the animation table, it will read a garbage sprite mapping
;   with a likely invalid tile count. As neither the GFX writer and sprite mapping writer
;   validate the tile count (in particular there's nothing to mark the number of free space
;   left in the OAM mirror), the game breaks.
;
; See also: Pl_SetNewMove
;
; FORMAT
; Each entry is 8 bytes:
; - 0: Bank number for the animation table (iOBJInfo_BankNum)
; - 1-2: Ptr to animation table (iOBJInfo_OBJLstPtrTbl)
; - 3: Sprite Mapping ID target, when this is reached something happens (usually checking if the move can end). (iPlInfo_OBJLstPtrTblOffsetMoveEnd)
; - 4: Animation speed. Higher values = slower animation (iOBJInfo_FrameLeft)
; - 5: Damage dealt to the opponent (iPlInfo_MoveDamageValNext)
; - 6: Hit Effect ID delivered to the opponent if hit by the move. (HITTYPE_*) (iPlInfo_MoveDamageHitTypeIdNext)
; - 7: Hit properties (how the opponent can block it, etc...) 
;      iPlInfo_Flags3 delivered to the opponent on hit (iPlInfo_MoveDamageFlags3Next)
;
; NOTES
; - Every character begins with a dummy row for move $00 (MOVE_SHARED_NONE).
;   This is never used and shouldn't be for obvious reasons.
; - Characters without a special intro have a duplicate of their normal intro.
; - [POI] Empty special/super move slots are filed with placeholder default entries.
;         All of these reuse the idle animation truncated to the first frame.
;         For special moves, these are set to deal no damage, while super moves do $14 lines.

mMvAnDef: MACRO
	dp \1
	db \2, \3, \4, \5, \6
ENDM



MoveAnimTbl_Kyo:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L074000, $0C, $06, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_IDLE
	mMvAnDef L074012, $08, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_F
	mMvAnDef L07402C, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_B
	mMvAnDef L074046, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CROUCH
	mMvAnDef L07404C, $1C, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_JUMP_N
	mMvAnDef L07406E, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_F
	mMvAnDef L074090, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_B
	mMvAnDef L0740B2, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L0740B8, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L0740BE, $00, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L0740C8, $08, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_RUN_F
	mMvAnDef L0740DA, $08, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HOP_B
	mMvAnDef L0740E8, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L074130, $14, $03, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_TAUNT
	mMvAnDef L074246, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_F
	mMvAnDef L07425C, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_B
	mMvAnDef L0742FC, $04, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WAKEUP
	mMvAnDef L074278, $04, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DIZZY
	mMvAnDef L07414A, $08, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L074158, $0C, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L074280, $00, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0740FC, $18, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_INTRO
	mMvAnDef L07411A, $10, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L07416A, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L074178, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L07418A, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_KICK_L
	mMvAnDef L074198, $10, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_KICK_H
	mMvAnDef L0741AE, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0741BC, $10, $01, $03, HITTYPE_HIT_MID0, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0741D2, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CL
	mMvAnDef L0741E0, $10, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CH
	mMvAnDef L074238, $08, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0741F6, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L07420C, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_KICK_A
	mMvAnDef L074222, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L074306, $50, $00, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE ; BANK $07 ; MOVE_KYO_ARA_KAMI_L
	mMvAnDef L074364, $2C, $00, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_FIRE ; BANK $07 ; MOVE_KYO_ARA_KAMI_H
	mMvAnDef L0743B4, $14, $01, $09, HITTYPE_DROP_MAIN, $00 ; BANK $07 ; MOVE_KYO_ONIYAKI_L
	mMvAnDef L0743B4, $14, $02, $09, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_KYO_ONIYAKI_H
	mMvAnDef L07439A, $20, $01, $04, HITTYPE_DROP_DB_A, $00 ; BANK $07 ; MOVE_KYO_RED_KICK_L
	mMvAnDef L07439A, $20, $01, $04, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $07 ; MOVE_KYO_RED_KICK_H
	mMvAnDef L0743D2, $18, $02, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_KYO_KOTOTSUKI_YOU_L
	mMvAnDef L0743D2, $18, $04, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_KYO_KOTOTSUKI_YOU_H
	mMvAnDef L0743F0, $14, $FF, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_KYO_KAI_L
	mMvAnDef L0743F0, $14, $FF, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $07 ; MOVE_KYO_KAI_H
	mMvAnDef L07440A, $00, $01, $07, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_KYO_NUE_TUMI_L
	mMvAnDef L07440A, $00, $03, $07, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_KYO_NUE_TUMI_H
	mMvAnDef L074000, $00, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_KYO_SPEC_6_L
	mMvAnDef L074000, $00, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_KYO_SPEC_6_H
	mMvAnDef L07443C, $18, $00, $18, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $07 ; MOVE_KYO_URA_OROCHI_NAGI_S
	mMvAnDef L07445E, $18, $00, $01, HITTYPE_HIT_MID0, PF3_FIRE|PF3_LASTHIT ; BANK $07 ; MOVE_KYO_URA_OROCHI_NAGI_D
	mMvAnDef L074000, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $07 ; MOVE_KYO_SUPER_1_S
	mMvAnDef L074000, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $07 ; MOVE_KYO_SUPER_1_D
	mMvAnDef L074480, $0C, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_G
	mMvAnDef L074000, $00, $00, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_THROW_A
	mMvAnDef L0740B2, $00, $05, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L074272, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L07428C, $04, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L074272, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT0MID
	mMvAnDef L074280, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT1MID
	mMvAnDef L074286, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HITLOW
	mMvAnDef L0742B4, $10, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0742D6, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0742E8, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0742CA, $18, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0742E8, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_CH
	mMvAnDef L074296, $18, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L074272, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L074280, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0742C0, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0742D6, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L074280, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_START
	mMvAnDef L074280, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0742F6, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0742D6, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0742C0, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Daimon:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L094000, $0C, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_IDLE
	mMvAnDef L094012, $08, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_F
	mMvAnDef L094024, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_B
	mMvAnDef L094036, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CROUCH
	mMvAnDef L09403C, $1C, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_JUMP_N
	mMvAnDef L09403C, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_F
	mMvAnDef L09403C, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_B
	mMvAnDef L09405E, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L094064, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L09406A, $00, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L094074, $08, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_RUN_F
	mMvAnDef L094086, $08, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HOP_B
	mMvAnDef L094094, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L09409E, $10, $03, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_TAUNT
	mMvAnDef L0941A4, $0C, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_F
	mMvAnDef L0941BA, $0C, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_B
	mMvAnDef L09425C, $04, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WAKEUP
	mMvAnDef L0941D6, $04, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DIZZY
	mMvAnDef L0940B4, $08, $08, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0940C2, $08, $08, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0941DE, $00, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L09409E, $10, $08, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_INTRO
	mMvAnDef L09409E, $10, $08, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0940D0, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0940DE, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0940F0, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_KICK_L
	mMvAnDef L0940FE, $08, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_KICK_H
	mMvAnDef L094110, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L09411E, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L094130, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_CL
	mMvAnDef L09413E, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HEAVYHIT|PF3_HITLOW|PF3_LASTHIT ; BANK $09 ; MOVE_SHARED_KICK_CH
	mMvAnDef L094192, $08, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L094150, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L094166, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_KICK_A
	mMvAnDef L09417C, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L094266, $0C, $04, $0A, HITTYPE_DROP_CH, PF3_HITLOW|PF3_LIGHTHIT ; BANK $09 ; MOVE_DAIMON_JIRAI_SHIN
	mMvAnDef L094266, $0C, $04, $0A, HITTYPE_DROP_CH, PF3_HITLOW|PF3_LIGHTHIT ; BANK $09 ; MOVE_DAIMON_JIRAI_SHIN_FAKE
	mMvAnDef L094278, $14, $01, $00, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_DAIMON_CHOU_UKEMI_L
	mMvAnDef L094278, $14, $01, $00, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_DAIMON_CHOU_UKEMI_H
	mMvAnDef L09428A, $20, $03, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $09 ; MOVE_DAIMON_CHOU_OOSOTO_GARI_L
	mMvAnDef L09428A, $20, $03, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $09 ; MOVE_DAIMON_CHOU_OOSOTO_GARI_H
	mMvAnDef L0942B0, $18, $03, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $09 ; MOVE_DAIMON_CLOUD_TOSSER
	mMvAnDef L0942D6, $18, $03, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $09 ; MOVE_DAIMON_STUMP_THROW
	mMvAnDef L0942FC, $14, $0A, $00, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $09 ; MOVE_DAIMON_HEAVEN_DROP_L
	mMvAnDef L0942FC, $14, $0A, $00, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $09 ; MOVE_DAIMON_HEAVEN_DROP_H
	mMvAnDef L094000, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_DAIMON_SPEC_5_L
	mMvAnDef L094000, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_DAIMON_SPEC_5_H
	mMvAnDef L094000, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_DAIMON_SPEC_6_L
	mMvAnDef L094000, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_DAIMON_SPEC_6_H
	mMvAnDef L094326, $18, $0A, $00, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_DAIMON_HEAVEN_HELL_DROP_S
	mMvAnDef L094326, $18, $0A, $00, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_DAIMON_HEAVEN_HELL_DROP_D
	mMvAnDef L094326, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $09 ; MOVE_DAIMON_SUPER_1_S
	mMvAnDef L094326, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $09 ; MOVE_DAIMON_SUPER_1_D
	mMvAnDef L094374, $0C, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_G
	mMvAnDef L094000, $00, $00, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_THROW_A
	mMvAnDef L09405E, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0941D0, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0941EC, $04, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0941D0, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT0MID
	mMvAnDef L0941DE, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT1MID
	mMvAnDef L0941E4, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HITLOW
	mMvAnDef L094214, $10, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L094236, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L094248, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L09422A, $18, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L094248, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0941F6, $18, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0941D0, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0941DE, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L094220, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L094236, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0941DE, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_START
	mMvAnDef L0941DE, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L094256, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L094236, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L094220, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Terry:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L094DF6, $0C, $06, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_IDLE
	mMvAnDef L094E08, $08, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_F
	mMvAnDef L094E16, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_B
	mMvAnDef L094E24, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CROUCH
	mMvAnDef L094E2A, $1C, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_JUMP_N
	mMvAnDef L094E2A, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_F
	mMvAnDef L094E2A, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_B
	mMvAnDef L094E4C, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L094E52, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L094E58, $00, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L094E62, $08, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_RUN_F
	mMvAnDef L094E74, $08, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HOP_B
	mMvAnDef L094E82, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L094E8C, $1C, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_TAUNT
	mMvAnDef L094FAE, $10, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_F
	mMvAnDef L094FC4, $10, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_B
	mMvAnDef L095064, $04, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WAKEUP
	mMvAnDef L094FE0, $04, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DIZZY
	mMvAnDef OBJLstPtrTable_Terry_WinA, $1C, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L094ED0, $0C, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L094FE8, $00, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L094E8C, $1C, $03, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_INTRO
	mMvAnDef L094E8C, $1C, $03, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L094EE2, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L094EF0, $0C, $01, $04, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L094F02, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_KICK_L
	mMvAnDef L094F10, $08, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_KICK_H
	mMvAnDef L094F1E, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L094F2C, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L094F3A, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_CL
	mMvAnDef L094F48, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_CH
	mMvAnDef L094F9C, $0C, $04, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L094F5A, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L094F70, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_KICK_A
	mMvAnDef L094F86, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L09506E, $0C, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $09 ; MOVE_TERRY_POWER_WAVE_L
	mMvAnDef L09506E, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $09 ; MOVE_TERRY_POWER_WAVE_H
	mMvAnDef L095080, $18, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_TERRY_BURN_KNUCKLE_L
	mMvAnDef L095080, $18, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_TERRY_BURN_KNUCKLE_H
	mMvAnDef L09509E, $10, $02, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_TERRY_CRACK_SHOT_L
	mMvAnDef L09509E, $10, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_TERRY_CRACK_SHOT_H
	mMvAnDef L0950B4, $1C, $01, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $09 ; MOVE_TERRY_RISING_TACKLE_L
	mMvAnDef L0950B4, $1C, $02, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $09 ; MOVE_TERRY_RISING_TACKLE_H
	mMvAnDef L0950D6, $10, $01, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_TERRY_POWER_DUNK_L
	mMvAnDef L0950D6, $10, $02, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_TERRY_POWER_DUNK_H
	mMvAnDef L094DF6, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_TERRY_SPEC_5_L
	mMvAnDef L094DF6, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_TERRY_SPEC_5_H
	mMvAnDef L094DF6, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_TERRY_SPEC_6_L
	mMvAnDef L094DF6, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_TERRY_SPEC_6_H
	mMvAnDef L09506E, $0C, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $09 ; MOVE_TERRY_POWER_GEYSER_S
	mMvAnDef L0950F4, $0C, $01, $10, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT|PF3_HALFSPEED ; BANK $09 ; MOVE_TERRY_POWER_GEYSER_D
	mMvAnDef L09511E, $0C, $14, $07, HITTYPE_DROP_MAIN, PF3_FIRE|PF3_LASTHIT|PF3_HALFSPEED|PF3_LIGHTHIT ;X ; BANK $09 ; MOVE_TERRY_POWER_GEYSER_E
	mMvAnDef L094DF6, $0C, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ;X ; BANK $09 ; MOVE_TERRY_SUPER_1_D
	mMvAnDef L095174, $08, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_G
	mMvAnDef L094DF6, $00, $00, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_THROW_A
	mMvAnDef L094E4C, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L094FDA, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L094FF4, $04, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L094FDA, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT0MID
	mMvAnDef L094FE8, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT1MID
	mMvAnDef L094FEE, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HITLOW
	mMvAnDef L09501C, $10, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L09503E, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L095050, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L095032, $18, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L095050, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_CH
	mMvAnDef L094FFE, $18, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L094FDA, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L094FE8, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L095028, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L09503E, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L094FE8, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_START
	mMvAnDef L094FE8, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L09505E, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L09503E, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L095028, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Andy:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L084000, $0C, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_IDLE
	mMvAnDef L0840CA, $08, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_F
	mMvAnDef L0840D8, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_B
	mMvAnDef L0840E6, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CROUCH
	mMvAnDef L0840EC, $1C, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_JUMP_N
	mMvAnDef L08410E, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_F
	mMvAnDef L084130, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_B
	mMvAnDef L084152, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L084158, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L08415E, $00, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L084168, $08, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_RUN_F
	mMvAnDef L08417A, $08, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HOP_B
	mMvAnDef L084188, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L084192, $18, $03, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_TAUNT
	mMvAnDef L0842A0, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_F
	mMvAnDef L0842B6, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_B
	mMvAnDef L084356, $04, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WAKEUP
	mMvAnDef L0842D2, $04, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DIZZY
	mMvAnDef L0841B0, $08, $08, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0841BE, $04, $08, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0842DA, $00, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L084192, $18, $08, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_INTRO
	mMvAnDef L084192, $18, $08, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0841C8, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0841D6, $0C, $01, $04, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0841E8, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_KICK_L
	mMvAnDef L0841F6, $0C, $02, $08, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_KICK_H
	mMvAnDef L084208, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L084216, $10, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L08422C, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CL
	mMvAnDef L08423A, $10, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CH
	mMvAnDef L084292, $08, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L084250, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L084266, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_KICK_A
	mMvAnDef L08427C, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L084360, $0C, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $08 ; MOVE_ANDY_HI_SHO_KEN_L
	mMvAnDef L084360, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $08 ; MOVE_ANDY_HI_SHO_KEN_H
	mMvAnDef L084372, $14, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT ; BANK $08 ; MOVE_ANDY_ZAN_EI_KEN_L
	mMvAnDef L084372, $14, $02, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT ; BANK $08 ; MOVE_ANDY_ZAN_EI_KEN_H
	mMvAnDef L08438C, $20, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $08 ; MOVE_ANDY_KU_HA_DAN_L
	mMvAnDef L08438C, $20, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $08 ; MOVE_ANDY_KU_HA_DAN_H
	mMvAnDef L0843A6, $18, $02, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $08 ; MOVE_ANDY_SHO_RYU_DAN_L
	mMvAnDef L0843A6, $18, $04, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $08 ; MOVE_ANDY_SHO_RYU_DAN_H
	mMvAnDef L0843CC, $10, $00, $0A, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $08 ; MOVE_ANDY_GEKI_HEKI_HAI_SUI_SHO_L
	mMvAnDef L0843CC, $10, $00, $0A, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $08 ; MOVE_ANDY_GEKI_HEKI_HAI_SUI_SHO_H
	mMvAnDef L0843F2, $00, $FF, $00, $00, $00 ; BANK $08 ; MOVE_ANDY_GENEI_SHIRANUI_L
	mMvAnDef L0843F2, $00, $FF, $00, $00, $00 ; BANK $08 ; MOVE_ANDY_GENEI_SHIRANUI_H
	mMvAnDef L084404, $08, $01, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_ANDY_SHIMO_AGITO
	mMvAnDef L084412, $0C, $00, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_ANDY_UWA_AGITO
	mMvAnDef L084424, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_ANDY_CHO_REPPA_DAN_S
	mMvAnDef L08443E, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE ; BANK $08 ; MOVE_ANDY_CHO_REPPA_DAN_D
	mMvAnDef L084000, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $08 ; MOVE_ANDY_SUPER_1_S
	mMvAnDef L084000, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $08 ; MOVE_ANDY_SUPER_1_D
	mMvAnDef L084458, $14, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_G
	mMvAnDef L084000, $00, $00, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_THROW_A
	mMvAnDef L084152, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0842CC, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0842E6, $04, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0842CC, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT0MID
	mMvAnDef L0842DA, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT1MID
	mMvAnDef L0842E0, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HITLOW
	mMvAnDef L08430E, $10, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L084330, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L084342, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L084324, $18, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L084342, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0842F0, $18, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0842CC, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0842DA, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L08431A, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L084330, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0842DA, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_START
	mMvAnDef L0842DA, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L084350, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L084330, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L08431A, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Ryo:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0A4000, $18, $06, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_IDLE
	mMvAnDef L0A4016, $0C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_F
	mMvAnDef L0A4028, $0C, $03, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_B
	mMvAnDef L0A403A, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CROUCH
	mMvAnDef L0A4040, $1C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_JUMP_N
	mMvAnDef L0A4062, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_F
	mMvAnDef L0A4084, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_B
	mMvAnDef L0A40A6, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_G
	mMvAnDef L0A40AC, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_C
	mMvAnDef L0A40B2, $00, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_BLOCK_A
	mMvAnDef L0A40BC, $08, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_RUN_F
	mMvAnDef L0A40CE, $08, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HOP_B
	mMvAnDef L0A40DC, $04, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0A40E6, $10, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_TAUNT
	mMvAnDef L0A4242, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_F
	mMvAnDef L0A4258, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_B
	mMvAnDef L0A42F8, $04, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WAKEUP
	mMvAnDef L0A4274, $04, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DIZZY
	mMvAnDef L0A4126, $14, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0A4140, $28, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0A427C, $00, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0A40FC, $24, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_INTRO
	mMvAnDef L0A40FC, $24, $01, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0A416E, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0A417C, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0A418E, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_KICK_L
	mMvAnDef L0A419C, $0C, $02, $08, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_KICK_H
	mMvAnDef L0A41AE, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0A41BC, $0C, $01, $03, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0A41CE, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CL
	mMvAnDef L0A41DC, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CH
	mMvAnDef L0A4230, $0C, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0A41EE, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0A4204, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_KICK_A
	mMvAnDef L0A421A, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0A4314, $08, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $0A ; MOVE_RYO_KO_OU_KEN_L
	mMvAnDef L0A4314, $08, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $0A ; MOVE_RYO_KO_OU_KEN_H
	mMvAnDef L0A432A, $14, $01, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_MOU_KO_RAI_JIN_GOU_L
	mMvAnDef L0A432A, $14, $04, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_MOU_KO_RAI_JIN_GOU_H
	mMvAnDef L0A4344, $5C, $00, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_HIEN_SHIPPU_KYAKU_L
	mMvAnDef L0A4344, $5C, $00, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_HIEN_SHIPPU_KYAKU_H
	mMvAnDef L0A435E, $18, $00, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_RYO_KO_HOU_L
	mMvAnDef L0A435E, $18, $00, $06, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_KO_HOU_H
	mMvAnDef L0A4378, $10, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $0A ; MOVE_RYO_KYOKUKEN_RYU_RENBU_KEN_L
	mMvAnDef L0A4378, $10, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $0A ; MOVE_RYO_KYOKUKEN_RYU_RENBU_KEN_H
	mMvAnDef L0A439A, $18, $00, $02, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_KO_HOU_EL
	mMvAnDef L0A439A, $18, $00, $02, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $0A ; MOVE_RYO_KO_HOU_EH
	mMvAnDef L0A4000, $10, $01, $00, $00, $00 ;X ; BANK $0A ; MOVE_RYO_SPEC_6_L
	mMvAnDef L0A4000, $10, $01, $00, $00, $00 ;X ; BANK $0A ; MOVE_RYO_SPEC_6_H
	mMvAnDef L0A43BC, $44, $08, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_RYO_RYU_KO_RANBU_S
	mMvAnDef L0A441A, $44, $08, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_RYO_RYU_KO_RANBU_D
	mMvAnDef L0A44D4, $08, $01, $10, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $0A ; MOVE_RYO_HAOH_SHOKOH_KEN_S
	mMvAnDef L0A44D4, $08, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $0A ; MOVE_RYO_HAOH_SHOKOH_KEN_D
	mMvAnDef L0A4302, $08, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_G
	mMvAnDef L0A4000, $00, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_THROW_A
	mMvAnDef L0A40A6, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0A426E, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0A4288, $04, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0A426E, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT0MID
	mMvAnDef L0A427C, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT1MID
	mMvAnDef L0A4282, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_HITLOW
	mMvAnDef L0A42B0, $10, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0A42D2, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0A42E4, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0A42C6, $18, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0A42E4, $08, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_CH
	mMvAnDef L0A4292, $18, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0A426E, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0A427C, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0A42BC, $04, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0A42D2, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0A427C, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_START
	mMvAnDef L0A427C, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0A42F2, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0A42D2, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0A42BC, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Robert:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0752B7, $0C, $06, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_IDLE
	mMvAnDef L0752C9, $08, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_F
	mMvAnDef L0752D7, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_B
	mMvAnDef L0752E5, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CROUCH
	mMvAnDef L0752EB, $1C, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_JUMP_N
	mMvAnDef L07530D, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_F
	mMvAnDef L07532F, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_B
	mMvAnDef L075351, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L075357, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L07535D, $00, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L075367, $0C, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_RUN_F
	mMvAnDef L075379, $08, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HOP_B
	mMvAnDef L075387, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0753B3, $14, $03, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_TAUNT
	mMvAnDef L0754D5, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_F
	mMvAnDef L0754EB, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_B
	mMvAnDef L07558B, $04, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WAKEUP
	mMvAnDef L075507, $04, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DIZZY
	mMvAnDef L0753CD, $18, $06, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0753EB, $08, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L07550F, $00, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L075391, $1C, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_INTRO
	mMvAnDef L075391, $1C, $05, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0753F9, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L075407, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L075419, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_KICK_L
	mMvAnDef L075427, $0C, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_KICK_H
	mMvAnDef L075439, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L075447, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L075459, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CL
	mMvAnDef L075467, $10, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CH
	mMvAnDef L0754BF, $10, $02, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L07547D, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L075493, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_KICK_A
	mMvAnDef L0754A9, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L075595, $28, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_ROBERT_RYUU_GEKI_KEN_L
	mMvAnDef L075595, $28, $02, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_ROBERT_RYUU_GEKI_KEN_H
	mMvAnDef L0755BF, $18, $01, $04, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_HIEN_SHIPPU_KYAKU_L
	mMvAnDef L0755BF, $18, $03, $04, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_HIEN_SHIPPU_KYAKU_H
	mMvAnDef L0755DD, $20, $03, $08, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_ROBERT_HIEN_RYUU_SHIN_KYA_L
	mMvAnDef L0755DD, $20, $01, $08, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_ROBERT_HIEN_RYUU_SHIN_KYA_H
	mMvAnDef L075607, $18, $00, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_ROBERT_RYUU_GA_L
	mMvAnDef L075607, $18, $00, $06, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_RYUU_GA_H
	mMvAnDef L075643, $10, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_KYOKUGEN_RYU_RANBU_KYAKU_L
	mMvAnDef L075643, $10, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_KYOKUGEN_RYU_RANBU_KYAKU_H
	mMvAnDef L075621, $18, $00, $02, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_RYUU_GA_HIDDEN_L
	mMvAnDef L075621, $18, $00, $02, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_RYUU_GA_HIDDEN_H
	mMvAnDef L0752B7, $00, $02, $0A, $00, $00 ;X ; BANK $07 ; MOVE_ROBERT_SPEC_6_L
	mMvAnDef L0752B7, $00, $02, $0A, $00, $00 ;X ; BANK $07 ; MOVE_ROBERT_SPEC_6_H
	mMvAnDef L075665, $44, $08, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_RYU_KO_RANBU_S
	mMvAnDef L0756AF, $44, $08, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_ROBERT_RYU_KO_RANBU_D
	mMvAnDef L075739, $08, $01, $10, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_ROBERT_HAOH_SHOKOH_KEN_S
	mMvAnDef L075739, $08, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $07 ; MOVE_ROBERT_HAOH_SHOKOH_KEN_D
	mMvAnDef L07574F, $14, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_G
	mMvAnDef L0752B7, $00, $00, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_THROW_A
	mMvAnDef L075351, $00, $05, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L075501, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L07551B, $04, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L075501, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT0MID
	mMvAnDef L07550F, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT1MID
	mMvAnDef L075515, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HITLOW
	mMvAnDef L075543, $10, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L075565, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L075577, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L075559, $18, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L075577, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_CH
	mMvAnDef L075525, $18, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L075501, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L07550F, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L07554F, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L075565, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L07550F, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_START
	mMvAnDef L07550F, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L075585, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L075565, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L07554F, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Athena:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L084FA3, $0C, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_IDLE
	mMvAnDef L084FB5, $08, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_F
	mMvAnDef L084FC7, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_B
	mMvAnDef L084FD9, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CROUCH
	mMvAnDef L084FDF, $1C, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_JUMP_N
	mMvAnDef L085001, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_F
	mMvAnDef L085023, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_B
	mMvAnDef L085045, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L08504B, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L085051, $00, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L08505B, $08, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_RUN_F
	mMvAnDef L08506D, $08, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HOP_B
	mMvAnDef L08507B, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L08525F, $08, $04, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_TAUNT
	mMvAnDef L085159, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_F
	mMvAnDef L08516F, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_B
	mMvAnDef L08520F, $04, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WAKEUP
	mMvAnDef L08518B, $04, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DIZZY
	mMvAnDef L08526D, $18, $03, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L08528F, $14, $03, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L085193, $00, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L085219, $40, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_INTRO
	mMvAnDef L085219, $40, $3C, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L085085, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L085093, $08, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0850A5, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_KICK_L
	mMvAnDef L0850B3, $08, $02, $08, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_KICK_H
	mMvAnDef L0850C5, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0850D3, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0850E5, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CL
	mMvAnDef L0850F3, $08, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CH
	mMvAnDef L085147, $08, $05, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L085105, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L08511B, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_KICK_A
	mMvAnDef L085131, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0852A9, $04, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_ATHENA_PSYCHO_BALL_L
	mMvAnDef L0852A9, $04, $03, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_ATHENA_PSYCHO_BALL_H
	mMvAnDef L0852B7, $10, $01, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_ATHENA_PHOENIX_ARROW_L
	mMvAnDef L0852B7, $10, $01, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_ATHENA_PHOENIX_ARROW_H
	mMvAnDef L0852D5, $1C, $01, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $08 ; MOVE_ATHENA_PSYCHO_REFLECTOR_L
	mMvAnDef L0852D5, $1C, $01, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $08 ; MOVE_ATHENA_PSYCHO_REFLECTOR_H
	mMvAnDef L0852F3, $10, $01, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_ATHENA_PSYCHO_SWORD_L
	mMvAnDef L0852F3, $10, $01, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_ATHENA_PSYCHO_SWORD_H
	mMvAnDef L085319, $08, $01, $00, $00, $00 ; BANK $08 ; MOVE_ATHENA_PSYCHO_TELEPORT_L
	mMvAnDef L085319, $08, $01, $00, $00, $00 ; BANK $08 ; MOVE_ATHENA_PSYCHO_TELEPORT_H
	mMvAnDef L084FA3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $08 ; MOVE_ATHENA_SPEC_5_L
	mMvAnDef L084FA3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $08 ; MOVE_ATHENA_SPEC_5_H
	mMvAnDef L084FA3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $08 ; MOVE_ATHENA_SPEC_6_L
	mMvAnDef L084FA3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $08 ; MOVE_ATHENA_SPEC_6_H
	mMvAnDef L08532B, $14, $08, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_GS
	mMvAnDef L085349, $14, $08, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED|PF3_SUPERALT ; BANK $08 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_GD
	mMvAnDef L085367, $14, $08, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_AS
	mMvAnDef L08538D, $14, $08, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED|PF3_SUPERALT ; BANK $08 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_AD
	mMvAnDef L0853B3, $0C, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_G
	mMvAnDef L0853D1, $0C, $0A, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_THROW_A
	mMvAnDef L085045, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L085185, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L08519F, $04, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L085185, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT0MID
	mMvAnDef L085193, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT1MID
	mMvAnDef L085199, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_HITLOW
	mMvAnDef L0851C7, $10, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0851E9, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0851FB, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0851DD, $18, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0851FB, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0851A9, $18, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L085185, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L085193, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0851D3, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0851E9, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L085193, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_START
	mMvAnDef L085193, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L085209, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0851E9, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0851D3, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Mai:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L085FBA, $1C, $04, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_IDLE
	mMvAnDef L085FDC, $08, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_F
	mMvAnDef L085FEA, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_B
	mMvAnDef L085FF8, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CROUCH
	mMvAnDef L085FFE, $1C, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_JUMP_N
	mMvAnDef L085FFE, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_F
	mMvAnDef L086020, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_B
	mMvAnDef L086042, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L086048, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L08604E, $00, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L086058, $08, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_RUN_F
	mMvAnDef L086062, $08, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HOP_B
	mMvAnDef L086070, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L08607C, $34, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_TAUNT
	mMvAnDef L0861F4, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_F
	mMvAnDef L08620A, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_B
	mMvAnDef L0862AA, $04, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WAKEUP
	mMvAnDef L086226, $04, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DIZZY
	mMvAnDef L0860DC, $1C, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0860FE, $1C, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L08622E, $00, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0860B6, $20, $28, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_INTRO
	mMvAnDef L0860B6, $20, $28, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L086120, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L08612E, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L086140, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_KICK_L
	mMvAnDef L08614E, $08, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_KICK_H
	mMvAnDef L086160, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L08616E, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L086180, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CL
	mMvAnDef L08618E, $08, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CH
	mMvAnDef L0861E2, $08, $02, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0861A0, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0861B6, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_KICK_A
	mMvAnDef L0861CC, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0862B4, $10, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_MAI_KA_CHO_SEN_L
	mMvAnDef L0862B4, $10, $03, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_MAI_KA_CHO_SEN_H
	mMvAnDef L086302, $10, $01, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_HISSATSU_SHINOBIBACHI_L
	mMvAnDef L086302, $10, $03, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_HISSATSU_SHINOBIBACHI_H
	mMvAnDef L086336, $10, $00, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_RYU_EN_BU_L
	mMvAnDef L086336, $10, $00, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_RYU_EN_BU_H
	mMvAnDef L08631C, $18, $00, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_HISHO_RYU_EN_JIN_L
	mMvAnDef L08631C, $18, $00, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_HISHO_RYU_EN_JIN_H
	mMvAnDef L0862CA, $28, $01, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_MAI_CHIJOU_MUSASABI_L
	mMvAnDef L0862CA, $28, $04, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_MAI_CHIJOU_MUSASABI_H
	mMvAnDef L0862F4, $08, $01, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_MAI_KUUCHUU_MUSASABI_L
	mMvAnDef L0862F4, $08, $04, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_MAI_KUUCHUU_MUSASABI_H
	mMvAnDef L085FBA, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $08 ; MOVE_MAI_SPEC_6_L
	mMvAnDef L085FBA, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $08 ; MOVE_MAI_SPEC_6_H
	mMvAnDef L08634C, $18, $00, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_CHO_HISSATSU_SHINOBIBACHI_S
	mMvAnDef L08636A, $18, $00, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $08 ; MOVE_MAI_CHO_HISSATSU_SHINOBIBACHI_D
	mMvAnDef L085FBA, $18, $02, $0A, HITTYPE_HIT_MID1, $00 ;X ; BANK $08 ; MOVE_MAI_SUPER_1_S
	mMvAnDef L085FBA, $18, $02, $0A, HITTYPE_HIT_MID1, $00 ;X ; BANK $08 ; MOVE_MAI_SUPER_1_D
	mMvAnDef L086398, $0C, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_G
	mMvAnDef L0863B2, $08, $0A, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_THROW_A
	mMvAnDef L086042, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L086220, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L08623A, $04, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L086220, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT0MID
	mMvAnDef L08622E, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT1MID
	mMvAnDef L086234, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_HITLOW
	mMvAnDef L086262, $10, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L086284, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L086296, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L086278, $18, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L086296, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_CH
	mMvAnDef L086244, $18, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L086220, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L08622E, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L08626E, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L086284, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L08622E, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_START
	mMvAnDef L08622E, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0862A4, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L086284, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L08626E, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Leona:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0A5BF3, $0C, $06, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_IDLE
	mMvAnDef L0A5C17, $0C, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_F
	mMvAnDef L0A5C3B, $0C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_B
	mMvAnDef L0A5C5F, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CROUCH
	mMvAnDef L0A5C65, $1C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_JUMP_N
	mMvAnDef L0A5C65, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_F
	mMvAnDef L0A5C87, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_B
	mMvAnDef L0A5CA9, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_G
	mMvAnDef L0A5CAF, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_C
	mMvAnDef L0A5CB5, $00, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_BLOCK_A
	mMvAnDef L0A5CBF, $0C, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_RUN_F
	mMvAnDef L0A5CD1, $08, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HOP_B
	mMvAnDef L0A5CDF, $04, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0A5CF7, $2C, $03, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_TAUNT
	mMvAnDef L0A5EB7, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_F
	mMvAnDef L0A5ECD, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_B
	mMvAnDef L0A5F6D, $04, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WAKEUP
	mMvAnDef L0A5EE9, $04, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DIZZY
	mMvAnDef L0A5D7B, $10, $08, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0A5DAB, $08, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0A5EF1, $00, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0A5D43, $1C, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_INTRO
	mMvAnDef L0A5D43, $1C, $3C, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0A5DDF, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0A5DED, $0C, $01, $04, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0A5DFF, $08, $01, $08, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_L
	mMvAnDef L0A5E0D, $10, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_KICK_H
	mMvAnDef L0A5E23, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0A5E31, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0A5E43, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CL
	mMvAnDef L0A5E51, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CH
	mMvAnDef L0A5EA5, $0C, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0A5E63, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0A5E79, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_KICK_A
	mMvAnDef L0A5E8F, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0A5F77, $14, $1E, $01, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_BALTIC_LAUNCHER_L
	mMvAnDef L0A5F91, $14, $10, $01, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_BALTIC_LAUNCHER_H
	mMvAnDef L0A5FA3, $14, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_LEONA_GRAND_SABRE_L
	mMvAnDef L0A5FA3, $14, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_LEONA_GRAND_SABRE_H
	mMvAnDef L0A5FE5, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_X_CALIBUR_L
	mMvAnDef L0A5FE5, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_X_CALIBUR_H
	mMvAnDef L0A6007, $18, $02, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_MOON_SLASHER_L
	mMvAnDef L0A6007, $18, $04, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_MOON_SLASHER_H
	mMvAnDef L0A5BF3, $14, $FF, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $0A ; MOVE_OLEONA_STORM_BRINGER_L
	mMvAnDef L0A5BF3, $14, $FF, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT ;X ; BANK $0A ; MOVE_OLEONA_STORM_BRINGER_H
	mMvAnDef L0A5BF3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_5_L
	mMvAnDef L0A5BF3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_5_H
	mMvAnDef L0A5BF3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_6_L
	mMvAnDef L0A5BF3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_6_H
	mMvAnDef L0A6037, $18, $01, $02, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_V_SLASHER_S
	mMvAnDef L0A6037, $18, $01, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_HALFSPEED|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_V_SLASHER_D
	mMvAnDef L0A5BF3, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $0A ; MOVE_OLEONA_SUPER_MOON_SLASHER_S
	mMvAnDef L0A5BF3, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $0A ; MOVE_OLEONA_SUPER_MOON_SLASHER_D
	mMvAnDef L0A60A9, $14, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_G
	mMvAnDef L0A60E1, $00, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_THROW_A
	mMvAnDef L0A5CA9, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0A5EE3, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0A5EFD, $04, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0A5EE3, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT0MID
	mMvAnDef L0A5EF1, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT1MID
	mMvAnDef L0A5EF7, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_HITLOW
	mMvAnDef L0A5F25, $10, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0A5F47, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0A5F59, $00, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0A5F3B, $18, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0A5F59, $08, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_CH
	mMvAnDef L0A5F07, $18, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0A5EE3, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0A5EF1, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0A5F31, $04, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0A5F47, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0A5EF1, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_START
	mMvAnDef L0A5EF1, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0A5F67, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0A5F47, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0A5F31, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_OLeona:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0A5C05, $0C, $06, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_IDLE
	mMvAnDef L0A5C29, $0C, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_F
	mMvAnDef L0A5C4D, $0C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_B
	mMvAnDef L0A5C5F, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CROUCH
	mMvAnDef L0A5C65, $1C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_JUMP_N
	mMvAnDef L0A5C65, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_F
	mMvAnDef L0A5C87, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_B
	mMvAnDef L0A5CA9, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_G
	mMvAnDef L0A5CAF, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_C
	mMvAnDef L0A5CB5, $00, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_BLOCK_A
	mMvAnDef L0A5CBF, $0C, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_RUN_F
	mMvAnDef L0A5CD1, $08, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HOP_B
	mMvAnDef L0A5CEB, $04, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0A5D31, $0C, $03, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_TAUNT
	mMvAnDef L0A5EB7, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_F
	mMvAnDef L0A5ECD, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_B
	mMvAnDef L0A5F6D, $04, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WAKEUP
	mMvAnDef L0A5EE9, $04, $0A, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_DIZZY
	mMvAnDef L0A5D91, $14, $08, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0A5DBD, $1C, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0A5EF1, $00, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0A5D65, $10, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_INTRO
	mMvAnDef L0A5D65, $10, $3C, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0A5DDF, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0A5DED, $0C, $01, $04, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0A5DFF, $08, $01, $08, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_L
	mMvAnDef L0A5E0D, $10, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_KICK_H
	mMvAnDef L0A5E23, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0A5E31, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0A5E43, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CL
	mMvAnDef L0A5E51, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CH
	mMvAnDef L0A5EA5, $0C, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0A5E63, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0A5E79, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_KICK_A
	mMvAnDef L0A5E8F, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0A5F77, $14, $1E, $01, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_BALTIC_LAUNCHER_L
	mMvAnDef L0A5F91, $14, $10, $01, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_BALTIC_LAUNCHER_H
	mMvAnDef L0A5FA3, $14, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_LEONA_GRAND_SABRE_L
	mMvAnDef L0A5FA3, $14, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_LEONA_GRAND_SABRE_H
	mMvAnDef L0A5FE5, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_X_CALIBUR_L
	mMvAnDef L0A5FE5, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_X_CALIBUR_H
	mMvAnDef L0A6007, $18, $02, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_MOON_SLASHER_L
	mMvAnDef L0A6007, $18, $04, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_LEONA_MOON_SLASHER_H
	mMvAnDef L0A601D, $14, $0A, $01, HITTYPE_HIT_MULTI1, PF3_LIGHTHIT ; BANK $0A ; MOVE_OLEONA_STORM_BRINGER_L
	mMvAnDef L0A601D, $14, $0A, $01, HITTYPE_HIT_MULTI1, PF3_LIGHTHIT ; BANK $0A ; MOVE_OLEONA_STORM_BRINGER_H
	mMvAnDef L0A5C05, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_5_L
	mMvAnDef L0A5C05, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_5_H
	mMvAnDef L0A5C05, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_6_L
	mMvAnDef L0A5C05, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_LEONA_SPEC_6_H
	mMvAnDef L0A6055, $18, $01, $02, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_V_SLASHER_S
	mMvAnDef L0A6055, $18, $01, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_HALFSPEED|PF3_LIGHTHIT ; BANK $0A ; MOVE_LEONA_V_SLASHER_D
	mMvAnDef L0A6073, $18, $01, $02, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT ; BANK $0A ; MOVE_OLEONA_SUPER_MOON_SLASHER_S
	mMvAnDef L0A6073, $18, $01, $02, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT ; BANK $0A ; MOVE_OLEONA_SUPER_MOON_SLASHER_D
	mMvAnDef L0A60C7, $14, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_G
	mMvAnDef L0A60E1, $00, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_THROW_A
	mMvAnDef L0A5CA9, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0A5EE3, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0A5EFD, $04, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0A5EE3, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT0MID
	mMvAnDef L0A5EF1, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT1MID
	mMvAnDef L0A5EF7, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_HITLOW
	mMvAnDef L0A5F25, $10, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0A5F47, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0A5F59, $00, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0A5F3B, $18, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0A5F59, $08, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_CH
	mMvAnDef L0A5F07, $18, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0A5EE3, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0A5EF1, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0A5F31, $04, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0A5F47, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0A5EF1, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_START
	mMvAnDef L0A5EF1, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0A5F67, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0A5F47, $00, $3C, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0A5F31, $00, $3C, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Geese:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L076154, $0C, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_IDLE
	mMvAnDef L076166, $08, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_F
	mMvAnDef L076178, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_B
	mMvAnDef L07618A, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CROUCH
	mMvAnDef L076190, $1C, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_JUMP_N
	mMvAnDef L076190, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_F
	mMvAnDef L076190, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_B
	mMvAnDef L0761B2, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L0761B8, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L0761BE, $00, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L0761C8, $08, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_RUN_F
	mMvAnDef L0761DA, $08, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HOP_B
	mMvAnDef L0761E8, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0761F2, $14, $03, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_TAUNT
	mMvAnDef L076334, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_F
	mMvAnDef L07634A, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_B
	mMvAnDef L0763EA, $04, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WAKEUP
	mMvAnDef L076366, $04, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DIZZY
	mMvAnDef L076244, $00, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L07624A, $10, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L07636E, $00, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L07620C, $14, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_INTRO
	mMvAnDef L076226, $18, $08, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L076260, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L07626E, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L076280, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_KICK_L
	mMvAnDef L07628E, $10, $02, $08, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_KICK_H
	mMvAnDef L0762A4, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0762B2, $0C, $01, $03, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0762C4, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CL
	mMvAnDef L0762D2, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CH
	mMvAnDef L076326, $08, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0762FA, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0762E4, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_KICK_A
	mMvAnDef L076310, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0763F4, $0C, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT ; BANK $07 ; MOVE_GEESE_REPPUKEN_L
	mMvAnDef L07640A, $0C, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_LASTHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_GEESE_REPPUKEN_H
	mMvAnDef L07642C, $14, $01, $04, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $07 ; MOVE_GEESE_JA_EI_KEN_L
	mMvAnDef L07642C, $14, $01, $04, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $07 ; MOVE_GEESE_JA_EI_KEN_H
	mMvAnDef L07643E, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_GEESE_HISHOU_NICHIRIN_ZAN_L
	mMvAnDef L07643E, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $07 ; MOVE_GEESE_HISHOU_NICHIRIN_ZAN_H
	mMvAnDef L07645C, $18, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_GEESE_SHIPPU_KEN_L
	mMvAnDef L07645C, $18, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_GEESE_SHIPPU_KEN_H
	mMvAnDef L07646E, $14, $10, $00, $00, $00 ; BANK $07 ; MOVE_GEESE_ATEMI_NAGE_L
	mMvAnDef L076484, $14, $10, $00, $00, $00 ; BANK $07 ; MOVE_GEESE_ATEMI_NAGE_H
	mMvAnDef L076154, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_GEESE_SPEC_5_L
	mMvAnDef L076154, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_GEESE_SPEC_5_H
	mMvAnDef L076154, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_GEESE_SPEC_6_L
	mMvAnDef L076154, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_GEESE_SPEC_6_H
	mMvAnDef L07649A, $18, $14, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $07 ; MOVE_GEESE_RAGING_STORM_S
	mMvAnDef L07649A, $18, $14, $1C, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $07 ; MOVE_GEESE_RAGING_STORM_D
	mMvAnDef L076154, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $07 ; MOVE_GEESE_SUPER_1_S
	mMvAnDef L076154, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $07 ; MOVE_GEESE_SUPER_1_D
	mMvAnDef L0764A8, $14, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_G
	mMvAnDef L076154, $00, $00, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_THROW_A
	mMvAnDef L0761B2, $00, $05, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L076360, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L07637A, $04, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L076360, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT0MID
	mMvAnDef L07636E, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT1MID
	mMvAnDef L076374, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HITLOW
	mMvAnDef L0763A2, $10, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0763C4, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0763D6, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0763B8, $18, $00, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0763D6, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_CH
	mMvAnDef L076384, $18, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L076360, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L07636E, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0763AE, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0763C4, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L07636E, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_START
	mMvAnDef L07636E, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0763E4, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0763C4, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0763AE, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Krauser:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L095AA3, $0C, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_IDLE
	mMvAnDef L095AB5, $08, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_F
	mMvAnDef L095AB5, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_B
	mMvAnDef L095AC7, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CROUCH
	mMvAnDef L095ACD, $1C, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_JUMP_N
	mMvAnDef L095ACD, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_F
	mMvAnDef L095ACD, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_B
	mMvAnDef L095AEF, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L095AF5, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L095AFB, $00, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L095B05, $08, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_RUN_F
	mMvAnDef L095B17, $08, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HOP_B
	mMvAnDef L095B25, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L095B2F, $0C, $03, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_TAUNT
	mMvAnDef L095C5B, $10, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_F
	mMvAnDef L095C71, $10, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_B
	mMvAnDef L095D11, $04, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WAKEUP
	mMvAnDef L095C8D, $04, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DIZZY
	mMvAnDef L095B41, $0C, $08, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L095B53, $14, $08, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L095C95, $00, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L095B6D, $10, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_INTRO
	mMvAnDef L095B6D, $10, $3C, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L095B83, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L095B91, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L095BA3, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_KICK_L
	mMvAnDef L095BB1, $0C, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_KICK_H
	mMvAnDef L095BC3, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L095BD1, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L095BE3, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_CL
	mMvAnDef L095BF1, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_CH
	mMvAnDef L095C45, $10, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L095C03, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L095C19, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_KICK_A
	mMvAnDef L095C2F, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L095D31, $0C, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_KRAUSER_HIGH_BLITZ_BALL_L
	mMvAnDef L095D31, $0C, $03, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_KRAUSER_HIGH_BLITZ_BALL_H
	mMvAnDef L095D3F, $14, $01, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_KRAUSER_LOW_BLITZ_BALL_L
	mMvAnDef L095D3F, $14, $03, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_KRAUSER_LOW_BLITZ_BALL_H
	mMvAnDef L095D4D, $20, $01, $08, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_KRAUSER_LEG_TOMAHAWK_L
	mMvAnDef L095D4D, $20, $02, $08, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_KRAUSER_LEG_TOMAHAWK_H
	mMvAnDef L095D6B, $18, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_KRAUSER_KAISER_KICK_L
	mMvAnDef L095D6B, $18, $02, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_KRAUSER_KAISER_KICK_H
	mMvAnDef L095D7D, $14, $FF, $09, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_KRAUSER_KAISER_DUEL_SOBAT_L
	mMvAnDef L095D7D, $14, $FF, $09, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $09 ; MOVE_KRAUSER_KAISER_DUEL_SOBAT_H
	mMvAnDef L095D8F, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_KRAUSER_KAISER_SUPLEX_L
	mMvAnDef L095D8F, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_KRAUSER_KAISER_SUPLEX_H
	mMvAnDef L095AA3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_KRAUSER_SPEC_6_L
	mMvAnDef L095AA3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_KRAUSER_SPEC_6_H
	mMvAnDef L095DB9, $18, $02, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_KRAUSER_KAISER_WAVE_S
	mMvAnDef L095DB9, $18, $03, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $09 ; MOVE_KRAUSER_KAISER_WAVE_D
	mMvAnDef L095AA3, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $09 ; MOVE_KRAUSER_SUPER_1_S
	mMvAnDef L095AA3, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $09 ; MOVE_KRAUSER_SUPER_1_D
	mMvAnDef L095D1B, $14, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_G
	mMvAnDef L095AA3, $00, $00, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_THROW_A
	mMvAnDef L095AEF, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L095C87, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L095CA1, $04, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L095C87, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT0MID
	mMvAnDef L095C95, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT1MID
	mMvAnDef L095C9B, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_HITLOW
	mMvAnDef L095CC9, $10, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L095CEB, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L095CFD, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L095CDF, $18, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L095CFD, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_CH
	mMvAnDef L095CAB, $18, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L095C87, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L095C95, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L095CD5, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L095CEB, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L095C95, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_START
	mMvAnDef L095C95, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L095D0B, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L095CEB, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L095CD5, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_MrBig:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L07700D, $0C, $06, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_IDLE
	mMvAnDef L07701F, $0C, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_F
	mMvAnDef L077031, $0C, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WALK_B
	mMvAnDef L077043, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CROUCH
	mMvAnDef L077049, $1C, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_JUMP_N
	mMvAnDef L077049, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_F
	mMvAnDef L077049, $1C, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_JUMP_B
	mMvAnDef L07706B, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L077071, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L077077, $00, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L077081, $0C, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_RUN_F
	mMvAnDef L077093, $08, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HOP_B
	mMvAnDef L0770A1, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0770AD, $04, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_TAUNT
	mMvAnDef L0771AB, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_F
	mMvAnDef L0771C1, $10, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_ROLL_B
	mMvAnDef L077261, $04, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WAKEUP
	mMvAnDef L0771DD, $04, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DIZZY
	mMvAnDef L0770B7, $04, $10, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0770C1, $0C, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0771E5, $00, $01, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0770AD, $04, $10, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_INTRO
	mMvAnDef L0770AD, $04, $10, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0770D3, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0770E1, $10, $01, $04, HITTYPE_HIT_MID0, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0770F7, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_KICK_L
	mMvAnDef L077105, $0C, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_KICK_H
	mMvAnDef L077117, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $07 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L077125, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L077137, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CL
	mMvAnDef L077145, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $07 ; MOVE_SHARED_KICK_CH
	mMvAnDef L077199, $0C, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L077157, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L07716D, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_KICK_A
	mMvAnDef L077183, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $07 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L07726B, $0C, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_MRBIG_GROUND_BLASTER_L
	mMvAnDef L07726B, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_MRBIG_GROUND_BLASTER_H
	mMvAnDef L077279, $14, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_MRBIG_CROSS_DIVING_L
	mMvAnDef L077279, $14, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $07 ; MOVE_MRBIG_CROSS_DIVING_H
	mMvAnDef L07729B, $20, $01, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_MRBIG_SPINNING_LANCER_L
	mMvAnDef L07729B, $20, $03, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_MRBIG_SPINNING_LANCER_H
	mMvAnDef L0772CF, $18, $02, $09, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_MRBIG_CALIFORNIA_ROMANCE_L
	mMvAnDef L0772BD, $18, $00, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_MRBIG_CALIFORNIA_ROMANCE_H
	mMvAnDef L0772E9, $14, $00, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_MRBIG_DRUM_SHOT_L
	mMvAnDef L0772E9, $14, $00, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $07 ; MOVE_MRBIG_DRUM_SHOT_H
	mMvAnDef L07700D, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_MRBIG_SPEC_5_L
	mMvAnDef L07700D, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_MRBIG_SPEC_5_H
	mMvAnDef L07700D, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_MRBIG_SPEC_6_L
	mMvAnDef L07700D, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $07 ; MOVE_MRBIG_SPEC_6_H
	mMvAnDef L07730B, $18, $01, $02, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_SUPERALT|PF3_LIGHTHIT ; BANK $07 ; MOVE_MRBIG_BLASTER_WAVE_S
	mMvAnDef L07730B, $18, $01, $02, HITTYPE_DROP_MAIN, PF3_LASTHIT|PF3_SUPERALT|PF3_LIGHTHIT ; BANK $07 ; MOVE_MRBIG_BLASTER_WAVE_D
	mMvAnDef L07700D, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $07 ; MOVE_MRBIG_SUPER_1_S
	mMvAnDef L07700D, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $07 ; MOVE_MRBIG_SUPER_1_D
	mMvAnDef L077319, $14, $0A, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_G
	mMvAnDef L07700D, $00, $00, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_THROW_A
	mMvAnDef L07706B, $00, $05, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0771D7, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0771F1, $04, $FF, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0771D7, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT0MID
	mMvAnDef L0771E5, $00, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT1MID
	mMvAnDef L0771EB, $00, $05, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_HITLOW
	mMvAnDef L077219, $10, $05, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L07723B, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L07724D, $00, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L07722F, $18, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L07724D, $08, $02, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0771FB, $18, $02, $00, $00, $00 ;X ; BANK $07 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0771D7, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0771E5, $00, $14, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L077225, $04, $00, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L07723B, $0C, $FF, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0771E5, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_START
	mMvAnDef L0771E5, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L07725B, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L07723B, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L077225, $00, $3C, $00, $00, $00 ; BANK $07 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Iori:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L054000, $0C, $06, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_IDLE
	mMvAnDef L054024, $0C, $01, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_F
	mMvAnDef L054036, $0C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_B
	mMvAnDef L054048, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CROUCH
	mMvAnDef L05404E, $1C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_JUMP_N
	mMvAnDef L05404E, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_F
	mMvAnDef L05404E, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_B
	mMvAnDef L054070, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L054076, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L05407C, $00, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L054086, $08, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_RUN_F
	mMvAnDef L054094, $08, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HOP_B
	mMvAnDef L0540A2, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0540B6, $08, $08, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_TAUNT
	mMvAnDef L054268, $10, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_F
	mMvAnDef L05427E, $10, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_B
	mMvAnDef L05431E, $04, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WAKEUP
	mMvAnDef L05429A, $04, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DIZZY
	mMvAnDef L054106, $50, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L05415C, $10, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L054190, $00, $09, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0540C4, $0C, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_INTRO
	mMvAnDef L0540F8, $08, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L054196, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0541A4, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0541B6, $08, $01, $08, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_L
	mMvAnDef L0541C4, $0C, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_KICK_H
	mMvAnDef L0541D6, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0541E4, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0541F6, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CL
	mMvAnDef L054204, $10, $04, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CH
	mMvAnDef L05425A, $08, $04, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L05421A, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L054230, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_KICK_A
	mMvAnDef L054244, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L054328, $10, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $05 ; MOVE_IORI_YAMI_BARAI_L
	mMvAnDef L054328, $10, $03, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $05 ; MOVE_IORI_YAMI_BARAI_H
	mMvAnDef L05439C, $14, $01, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE ; BANK $05 ; MOVE_IORI_ONI_YAKI_L
	mMvAnDef L05439C, $14, $02, $09, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_IORI_ONI_YAKI_H
	mMvAnDef L054382, $14, $01, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_AOI_HANA_L
	mMvAnDef L054382, $14, $01, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_AOI_HANA_H
	mMvAnDef L05433E, $1C, $01, $09, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KOTO_TSUKI_IN_L
	mMvAnDef L05433E, $1C, $01, $09, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KOTO_TSUKI_IN_H
	mMvAnDef L0543D4, $00, $04, $00, $00, $00 ;X ; BANK $05 ; MOVE_IORI_SCUM_GALE_L
	mMvAnDef L0543D4, $00, $04, $00, $00, $00 ; BANK $05 ; MOVE_IORI_SCUM_GALE_H
	mMvAnDef L054000, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_IORI_SPEC_5_L
	mMvAnDef L054000, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_IORI_SPEC_5_H
	mMvAnDef L0543EA, $00, $02, $01, HITTYPE_HIT_MULTIGS, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_ESCAPE_L
	mMvAnDef L0543EA, $00, $02, $01, HITTYPE_HIT_MULTIGS, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_ESCAPE_H
	mMvAnDef L054464, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_S
	mMvAnDef L0544BA, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_D
	mMvAnDef L054000, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $05 ; MOVE_OIORI_KIN_YA_OTOME_S
	mMvAnDef L054000, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $05 ; MOVE_OIORI_KIN_YA_OTOME_D
	mMvAnDef L05456E, $0C, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_G
	mMvAnDef L054000, $00, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_A
	mMvAnDef L054070, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L054294, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0542AE, $04, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L054294, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT0MID
	mMvAnDef L0542A2, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT1MID
	mMvAnDef L0542A8, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_HITLOW
	mMvAnDef L0542D6, $10, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0542F8, $0C, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L05430A, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0542EC, $18, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L05430A, $08, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0542B8, $18, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L054294, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0542A2, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0542E2, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0542F8, $0C, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0542A2, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_START
	mMvAnDef L0542A2, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L054318, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0542F8, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0542E2, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Mature:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0967C3, $08, $06, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_IDLE
	mMvAnDef L0967D1, $10, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_F
	mMvAnDef L0967E7, $10, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WALK_B
	mMvAnDef L0967FD, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CROUCH
	mMvAnDef L096803, $1C, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_JUMP_N
	mMvAnDef L096803, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_F
	mMvAnDef L096803, $1C, $02, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_JUMP_B
	mMvAnDef L096825, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L09682B, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L096831, $00, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L09683B, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_RUN_F
	mMvAnDef L096845, $08, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HOP_B
	mMvAnDef L096853, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L09685F, $04, $10, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_TAUNT
	mMvAnDef L096977, $10, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_F
	mMvAnDef L09698D, $10, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_ROLL_B
	mMvAnDef L096A2D, $04, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WAKEUP
	mMvAnDef L0969A9, $04, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DIZZY
	mMvAnDef L096887, $04, $10, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L096891, $08, $10, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0969B1, $00, $01, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L096869, $18, $08, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_INTRO
	mMvAnDef L096869, $18, $08, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L09689F, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0968AD, $0C, $01, $04, HITTYPE_HIT_MID0, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0968BF, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_L
	mMvAnDef L0968D1, $0C, $02, $08, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_KICK_H
	mMvAnDef L0968E3, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $09 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0968F1, $0C, $01, $03, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L096903, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $09 ; MOVE_SHARED_KICK_CL
	mMvAnDef L096911, $0C, $02, $06, HITTYPE_HIT_MID0, $00 ; BANK $09 ; MOVE_SHARED_KICK_CH
	mMvAnDef L096965, $0C, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $09 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L096923, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L096939, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_KICK_A
	mMvAnDef L09694F, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $09 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L096A37, $0C, $01, $0A, HITTYPE_HIT_MULTI1, PF3_LASTHIT ; BANK $09 ; MOVE_MATURE_DECIDE_L
	mMvAnDef L096A37, $0C, $03, $0A, HITTYPE_HIT_MULTI1, PF3_LASTHIT ; BANK $09 ; MOVE_MATURE_DECIDE_H
	mMvAnDef L096A59, $14, $01, $0A, HITTYPE_HIT_MID1, PF3_LIGHTHIT ; BANK $09 ; MOVE_MATURE_METAL_MASSACRE_L
	mMvAnDef L096A59, $14, $02, $0A, HITTYPE_HIT_MID1, PF3_LIGHTHIT ; BANK $09 ; MOVE_MATURE_METAL_MASSACRE_H
	mMvAnDef L096A7F, $20, $00, $04, HITTYPE_HIT_MID0, PF3_LIGHTHIT ; BANK $09 ; MOVE_MATURE_DEATH_ROW_L
	mMvAnDef L096A7F, $20, $00, $04, HITTYPE_HIT_MID0, PF3_LIGHTHIT ; BANK $09 ; MOVE_MATURE_DEATH_ROW_H
	mMvAnDef L096AAD, $18, $01, $09, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $09 ; MOVE_MATURE_DESPAIR_L
	mMvAnDef L096AAD, $18, $02, $09, HITTYPE_HIT_MID0, PF3_HEAVYHIT ; BANK $09 ; MOVE_MATURE_DESPAIR_H
	mMvAnDef L0967C3, $14, $FF, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $09 ; MOVE_MATURE_SPEC_4_L
	mMvAnDef L0967C3, $14, $FF, $09, HITTYPE_DROP_MAIN, PF3_LASTHIT ;X ; BANK $09 ; MOVE_MATURE_SPEC_4_H
	mMvAnDef L0967C3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_MATURE_SPEC_5_L
	mMvAnDef L0967C3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_MATURE_SPEC_5_H
	mMvAnDef L0967C3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_MATURE_SPEC_6_L
	mMvAnDef L0967C3, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $09 ; MOVE_MATURE_SPEC_6_H
	mMvAnDef L096ACB, $18, $01, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT ; BANK $09 ; MOVE_MATURE_HEAVENS_GATE_S
	mMvAnDef L096ACB, $18, $04, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT ; BANK $09 ; MOVE_MATURE_HEAVENS_GATE_D
	mMvAnDef L0967C3, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $09 ; MOVE_MATURE_SUPER_1_S
	mMvAnDef L0967C3, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ;X ; BANK $09 ; MOVE_MATURE_SUPER_1_D
	mMvAnDef L096AE9, $14, $0A, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_G
	mMvAnDef L0967C3, $00, $00, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_THROW_A
	mMvAnDef L096825, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0969A3, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0969BD, $04, $FF, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0969A3, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT0MID
	mMvAnDef L0969B1, $00, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT1MID
	mMvAnDef L0969B7, $00, $05, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_HITLOW
	mMvAnDef L0969E5, $10, $05, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L096A07, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L096A19, $00, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0969FB, $18, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L096A19, $08, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0969C7, $18, $02, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0969A3, $00, $14, $00, $00, $00 ;X ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0969B1, $00, $14, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0969F1, $04, $00, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L096A07, $0C, $FF, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0969B1, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_START
	mMvAnDef L0969B1, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L096A27, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L096A07, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0969F1, $00, $3C, $00, $00, $00 ; BANK $09 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Chizuru:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0552DB, $0C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_IDLE
	mMvAnDef L0552ED, $08, $01, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_F
	mMvAnDef L0552FB, $08, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_B
	mMvAnDef L055309, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CROUCH
	mMvAnDef L05530F, $1C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_JUMP_N
	mMvAnDef L055331, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_F
	mMvAnDef L055353, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_B
	mMvAnDef L055375, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L05537B, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L055381, $00, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L05552F, $08, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_RUN_F
	mMvAnDef L05553D, $08, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HOP_B
	mMvAnDef L055525, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L05554B, $2C, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_TAUNT
	mMvAnDef L0554F9, $0C, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_F
	mMvAnDef L05550F, $0C, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_B
	mMvAnDef L055415, $04, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WAKEUP
	mMvAnDef L055391, $04, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DIZZY
	mMvAnDef L05557D, $10, $06, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L055593, $04, $06, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0555B7, $00, $01, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L05554B, $2C, $04, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_INTRO
	mMvAnDef L05554B, $2C, $04, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L05541F, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L05542D, $08, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L05543B, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_SHARED_KICK_L
	mMvAnDef L055449, $08, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_KICK_H
	mMvAnDef L055465, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L055473, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L055481, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CL
	mMvAnDef L05548F, $10, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CH
	mMvAnDef L0554D1, $0C, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0554A5, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0554BB, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_KICK_A
	mMvAnDef L0554E3, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0555BD, $10, $01, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_TENJIN_KOTOWARI_L
	mMvAnDef L0555BD, $10, $03, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_TENJIN_KOTOWARI_H
	mMvAnDef L0555DF, $14, $00, $0A, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_L
	mMvAnDef L0555DF, $14, $02, $0A, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_H
	mMvAnDef L0555F9, $20, $01, $0A, HITTYPE_DROP_DB_A, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_L
	mMvAnDef L0555F9, $20, $01, $0A, HITTYPE_DROP_DB_A, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_H
	mMvAnDef L055613, $1C, $FF, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TEN_ZUI_L
	mMvAnDef L055621, $1C, $02, $09, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TEN_ZUI_H
	mMvAnDef L05563F, $00, $01, $09, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TAMAYURA_SHITSUNE_L
	mMvAnDef L05562F, $00, $04, $09, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TAMAYURA_SHITSUNE_H
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_5_L
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_5_H
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_6_L
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_6_H
	mMvAnDef L055655, $00, $02, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_SUPERALT ; BANK $05 ; MOVE_CHIZURU_SAN_RAI_FUI_JIN_S
	mMvAnDef L055655, $00, $02, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_SUPERALT ; BANK $05 ; MOVE_CHIZURU_SAN_RAI_FUI_JIN_D
	mMvAnDef L05566F, $40, $01, $03, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_REIGI_ISHIZUE_S
	mMvAnDef L05566F, $40, $01, $01, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_REIGI_ISHIZUE_D
	mMvAnDef L055675, $18, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_G
	mMvAnDef L0552DB, $00, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_A
	mMvAnDef L055375, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L05538B, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0553A5, $04, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L05538B, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT0MID
	mMvAnDef L055399, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT1MID
	mMvAnDef L05539F, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_HITLOW
	mMvAnDef L0553CD, $10, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0553EF, $0C, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L055401, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0553E3, $18, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L055401, $08, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0553AF, $18, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L05538B, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L055399, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0553D9, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0553EF, $0C, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L055399, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_START
	mMvAnDef L055399, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L05540F, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0553EF, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0553D9, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Kagura:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0552DB, $0C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_IDLE
	mMvAnDef L0552ED, $08, $01, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_F
	mMvAnDef L0552FB, $08, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_B
	mMvAnDef L055309, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CROUCH
	mMvAnDef L05530F, $1C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_JUMP_N
	mMvAnDef L055331, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_F
	mMvAnDef L055353, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_B
	mMvAnDef L055375, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L05537B, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L055381, $00, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L05552F, $08, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_RUN_F
	mMvAnDef L05553D, $08, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HOP_B
	mMvAnDef L055525, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L05554B, $2C, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_TAUNT
	mMvAnDef L0554F9, $0C, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_F
	mMvAnDef L05550F, $0C, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_B
	mMvAnDef L055415, $04, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WAKEUP
	mMvAnDef L055391, $04, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DIZZY
	mMvAnDef L05557D, $10, $06, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L05559D, $14, $06, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0555B7, $00, $01, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L05554B, $2C, $03, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_INTRO
	mMvAnDef L05554B, $2C, $03, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L05541F, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L05542D, $08, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L05543B, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_SHARED_KICK_L
	mMvAnDef L055457, $08, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_KICK_H
	mMvAnDef L055465, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L055473, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L055481, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CL
	mMvAnDef L05548F, $10, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CH
	mMvAnDef L0554D1, $0C, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0554A5, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0554BB, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_KICK_A
	mMvAnDef L0554E3, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0555BD, $10, $01, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_TENJIN_KOTOWARI_L
	mMvAnDef L0555BD, $10, $03, $0A, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_TENJIN_KOTOWARI_H
	mMvAnDef L0555DF, $14, $00, $0A, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_L
	mMvAnDef L0555DF, $14, $02, $0A, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_H
	mMvAnDef L0555F9, $20, $01, $0A, HITTYPE_DROP_DB_A, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_L
	mMvAnDef L0555F9, $20, $01, $0A, HITTYPE_DROP_DB_A, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_H
	mMvAnDef L055613, $1C, $FF, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TEN_ZUI_L
	mMvAnDef L055621, $1C, $02, $09, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TEN_ZUI_H
	mMvAnDef L05563F, $00, $01, $09, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TAMAYURA_SHITSUNE_L
	mMvAnDef L05562F, $00, $04, $09, HITTYPE_DROP_DB_A, PF3_HEAVYHIT ; BANK $05 ; MOVE_CHIZURU_TAMAYURA_SHITSUNE_H
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_5_L
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_5_H
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_6_L
	mMvAnDef L0552DB, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_6_H
	mMvAnDef L055655, $00, $02, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_FIRE ; BANK $05 ; MOVE_CHIZURU_SAN_RAI_FUI_JIN_S
	mMvAnDef L055655, $00, $02, $0A, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_FIRE ; BANK $05 ; MOVE_CHIZURU_SAN_RAI_FUI_JIN_D
	mMvAnDef L05566F, $40, $01, $03, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_REIGI_ISHIZUE_S
	mMvAnDef L05566F, $40, $01, $01, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_CHIZURU_REIGI_ISHIZUE_D
	mMvAnDef L055675, $18, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_G
	mMvAnDef L0552DB, $00, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_A
	mMvAnDef L055375, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L05538B, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0553A5, $04, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L05538B, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT0MID
	mMvAnDef L055399, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT1MID
	mMvAnDef L05539F, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_HITLOW
	mMvAnDef L0553CD, $10, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0553EF, $0C, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L055401, $00, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0553E3, $18, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L055401, $08, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0553AF, $18, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L05538B, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L055399, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0553D9, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0553EF, $0C, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L055399, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_START
	mMvAnDef L055399, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L05540F, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0553EF, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0553D9, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_Goenitz:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L086F30, $0C, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_IDLE
	mMvAnDef L086F42, $08, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_F
	mMvAnDef L086F54, $08, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WALK_B
	mMvAnDef L086F66, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CROUCH
	mMvAnDef L086F6C, $1C, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_JUMP_N
	mMvAnDef L086F6C, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_F
	mMvAnDef L086F6C, $1C, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_JUMP_B
	mMvAnDef L086F8E, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L086F94, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L086F9A, $00, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L086FA4, $08, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_RUN_F
	mMvAnDef L086FAA, $08, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HOP_B
	mMvAnDef L086FB8, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L086FC2, $0C, $03, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_TAUNT
	mMvAnDef L0870EE, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_F
	mMvAnDef L087104, $10, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_ROLL_B
	mMvAnDef L0871A4, $04, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WAKEUP
	mMvAnDef L087120, $04, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DIZZY
	mMvAnDef L086FEA, $0C, $08, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L086FFC, $10, $08, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L087128, $00, $01, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L086FD4, $10, $08, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_INTRO
	mMvAnDef L086FD4, $10, $08, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L087012, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L087020, $14, $01, $04, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L08703A, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_KICK_L
	mMvAnDef L087048, $10, $02, $08, HITTYPE_HIT_MID0, $00 ; BANK $08 ; MOVE_SHARED_KICK_H
	mMvAnDef L08705E, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $08 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L08706C, $08, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L08707A, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CL
	mMvAnDef L087088, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $08 ; MOVE_SHARED_KICK_CH
	mMvAnDef L0870DC, $08, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $08 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L08709A, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0870B0, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_KICK_A
	mMvAnDef L0870C6, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $08 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0871C8, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_GOENITZ_YONOKAZE1
	mMvAnDef L0871C8, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_GOENITZ_YONOKAZE2
	mMvAnDef L0871C8, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_GOENITZ_YONOKAZE3
	mMvAnDef L0871C8, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $08 ; MOVE_GOENITZ_YONOKAZE4
	mMvAnDef L0871E2, $14, $01, $00, $00, $00 ; BANK $08 ; MOVE_GOENITZ_HYOUGA_L
	mMvAnDef L0871F8, $14, $01, $00, $00, $00 ; BANK $08 ; MOVE_GOENITZ_HYOUGA_H
	mMvAnDef L08720A, $20, $01, $02, HITTYPE_HIT_MID1, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $08 ; MOVE_GOENITZ_WANPYOU_TOKOBUSE_L
	mMvAnDef L087220, $20, $01, $02, HITTYPE_HIT_MID0, PF3_LASTHIT|PF3_LIGHTHIT ; BANK $08 ; MOVE_GOENITZ_WANPYOU_TOKOBUSE_H
	mMvAnDef L087236, $18, $05, $00, $00, $00 ; BANK $08 ; MOVE_GOENITZ_YAMIDOUKOKU_SL
	mMvAnDef L087236, $18, $05, $00, $00, $00 ; BANK $08 ; MOVE_GOENITZ_YAMIDOUKOKU_SH
	mMvAnDef L0872BA, $00, $02, $0A, $00, $00 ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_THROW_L
	mMvAnDef L0872D4, $00, $02, $0A, $00, $00 ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_THROW_H
	mMvAnDef L0872A4, $14, $00, $02, HITTYPE_HIT_MULTI0, PF3_LASTHIT ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_PART2_L
	mMvAnDef L0872A4, $14, $00, $02, HITTYPE_HIT_MULTI0, PF3_LASTHIT ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_PART2_H
	mMvAnDef L087250, $18, $01, $09, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_MIZUCHI_SL
	mMvAnDef L087262, $18, $01, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_MIZUCHI_SH
	mMvAnDef L087274, $18, $01, $09, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_JISSOUKOKU_DL
	mMvAnDef L08728E, $18, $01, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $08 ; MOVE_GOENITZ_SHINYAOTOME_JISSOUKOKU_DH
	mMvAnDef L0872BA, $14, $0A, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_G
	mMvAnDef L086F30, $00, $00, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_THROW_A
	mMvAnDef L086F8E, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L08711A, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L087134, $04, $FF, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L08711A, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT0MID
	mMvAnDef L087128, $00, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT1MID
	mMvAnDef L08712E, $00, $05, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_HITLOW
	mMvAnDef L08715C, $10, $05, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L08717E, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L087190, $00, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L087172, $18, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L087190, $08, $02, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_DROP_CH
	mMvAnDef L08713E, $18, $02, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L08711A, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L087128, $00, $14, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L087168, $04, $00, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L08717E, $0C, $FF, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L087128, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_START
	mMvAnDef L087128, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L08719E, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L08717E, $00, $3C, $00, $00, $00 ;X ; BANK $08 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L087168, $00, $3C, $00, $00, $00 ; BANK $08 ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_MrKarate:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L0A44EA, $0C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_IDLE
	mMvAnDef L0A44FC, $08, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_F
	mMvAnDef L0A450E, $08, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WALK_B
	mMvAnDef L0A4520, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CROUCH
	mMvAnDef L0A4526, $1C, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_JUMP_N
	mMvAnDef L0A4548, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_F
	mMvAnDef L0A456A, $1C, $02, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_JUMP_B
	mMvAnDef L0A458C, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_G
	mMvAnDef L0A4592, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BLOCK_C
	mMvAnDef L0A4598, $00, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_BLOCK_A
	mMvAnDef L0A45A2, $08, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_RUN_F
	mMvAnDef L0A45B4, $08, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HOP_B
	mMvAnDef L0A45C2, $04, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0A45CC, $08, $03, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_TAUNT
	mMvAnDef L0A4728, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_F
	mMvAnDef L0A473E, $10, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_ROLL_B
	mMvAnDef L0A47DE, $04, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WAKEUP
	mMvAnDef L0A475A, $04, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DIZZY
	mMvAnDef L0A4622, $28, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_NORM
	mMvAnDef L0A4622, $28, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_WIN_ALT
	mMvAnDef L0A4762, $00, $01, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0A45DA, $2C, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_INTRO
	mMvAnDef L0A45DA, $2C, $3C, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L0A4650, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0A465E, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0A4670, $08, $01, $08, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_KICK_L
	mMvAnDef L0A467E, $08, $02, $08, HITTYPE_HIT_MID0, $00 ; BANK $0A ; MOVE_SHARED_KICK_H
	mMvAnDef L0A4690, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0A469E, $0C, $01, $03, HITTYPE_HIT_MID1, $00 ; BANK $0A ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0A46B0, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CL
	mMvAnDef L0A46BE, $0C, $02, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $0A ; MOVE_SHARED_KICK_CH
	mMvAnDef L0A4712, $0C, $03, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $0A ; MOVE_SHARED_ATTACK_G
	mMvAnDef L0A46D0, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_PUNCH_A
	mMvAnDef L0A46E6, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_KICK_A
	mMvAnDef L0A46FC, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $0A ; MOVE_SHARED_ATTACK_A
	mMvAnDef L0A47FA, $0C, $01, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $0A ; MOVE_MRKARATE_KO_OU_KEN_L
	mMvAnDef L0A47FA, $0C, $03, $0A, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $0A ; MOVE_MRKARATE_KO_OU_KEN_H
	mMvAnDef L0A480C, $14, $01, $01, HITTYPE_HIT_MULTI1, PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_SHOURAN_KYAKU_L
	mMvAnDef L0A480C, $14, $02, $01, HITTYPE_HIT_MULTI1, PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_SHOURAN_KYAKU_H
	mMvAnDef L0A482A, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_HIEN_SHIPPUU_KYAKU_L
	mMvAnDef L0A482A, $20, $01, $04, HITTYPE_DROP_MAIN, PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_HIEN_SHIPPUU_KYAKU_H
	mMvAnDef L0A4848, $18, $01, $01, HITTYPE_HIT_MULTI1, PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_ZENRETSUKEN_L
	mMvAnDef L0A4848, $18, $01, $01, HITTYPE_HIT_MULTI1, PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_ZENRETSUKEN_H
	mMvAnDef L0A486E, $14, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_KYOKUKEN_RYU_RENBU_KEN_L
	mMvAnDef L0A486E, $14, $01, $04, HITTYPE_HIT_MID1, PF3_HITLOW|PF3_OVERHEAD|PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_KYOKUKEN_RYU_RENBU_KEN_H
	mMvAnDef L0A44EA, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_MRKARATE_KO_OU_KEN_UNUSED_EL
	mMvAnDef L0A44EA, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_MRKARATE_KO_OU_KEN_UNUSED_EH
	mMvAnDef L0A44EA, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_MRKARATE_SPEC_6_L
	mMvAnDef L0A44EA, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $0A ; MOVE_MRKARATE_SPEC_6_H
	mMvAnDef L0A48A6, $18, $01, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $0A ; MOVE_MRKARATE_RYUKO_RANBU_S
	mMvAnDef L0A4904, $18, $01, $01, HITTYPE_HIT_MULTI1, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $0A ; MOVE_MRKARATE_RYUKO_RANBU_UNUSED_D
	mMvAnDef L0A4890, $18, $01, $10, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_HALFSPEED ; BANK $0A ; MOVE_MRKARATE_HAOH_SHO_KOH_KEN_S
	mMvAnDef L0A4890, $18, $01, $14, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $0A ; MOVE_MRKARATE_HAOH_SHO_KOH_KEN_D
	mMvAnDef L0A47E8, $14, $0A, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_G
	mMvAnDef L0A44EA, $00, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_THROW_A
	mMvAnDef L0A458C, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L0A4754, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0A476E, $04, $FF, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L0A4754, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT0MID
	mMvAnDef L0A4762, $00, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT1MID
	mMvAnDef L0A4768, $00, $05, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_HITLOW
	mMvAnDef L0A4796, $10, $05, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0A47B8, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_A
	mMvAnDef L0A47CA, $00, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0A47AC, $18, $00, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L0A47CA, $08, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_DROP_CH
	mMvAnDef L0A4778, $18, $02, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L0A4754, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0A4762, $00, $14, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0A47A2, $04, $00, $00, $00, $00 ;X ; BANK $0A ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0A47B8, $0C, $FF, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0A4762, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_START
	mMvAnDef L0A4762, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L0A47D8, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0A47B8, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0A47A2, $00, $3C, $00, $00, $00 ; BANK $0A ; MOVE_SHARED_THROW_ROTR
MoveAnimTbl_OIori:
	db $4C, $00, $00, $00, $00, $00, $00, $00 ;X ; MOVE_SHARED_NONE
	mMvAnDef L054012, $0C, $06, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_IDLE
	mMvAnDef L054024, $0C, $01, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_F
	mMvAnDef L054036, $0C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WALK_B
	mMvAnDef L054048, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CROUCH
	mMvAnDef L05404E, $1C, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_JUMP_N
	mMvAnDef L05404E, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_F
	mMvAnDef L05404E, $1C, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_JUMP_B
	mMvAnDef L054070, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_G
	mMvAnDef L054076, $00, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_BLOCK_C
	mMvAnDef L05407C, $00, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_BLOCK_A
	mMvAnDef L054086, $08, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_RUN_F
	mMvAnDef L054094, $08, $FF, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HOP_B
	mMvAnDef L0540AC, $04, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_CHARGEMETER
	mMvAnDef L0540B6, $08, $08, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_TAUNT
	mMvAnDef L054268, $10, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_F
	mMvAnDef L05427E, $10, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_ROLL_B
	mMvAnDef L05431E, $04, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WAKEUP
	mMvAnDef L05429A, $04, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DIZZY
	mMvAnDef L054106, $50, $02, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_NORM
	mMvAnDef L054172, $10, $00, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_WIN_ALT
	mMvAnDef L054190, $00, $09, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_LOST_TIMEOVER
	mMvAnDef L0540D6, $1C, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_INTRO
	mMvAnDef L0540D6, $1C, $3C, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_INTRO_SPEC
	mMvAnDef L054196, $08, $00, $04, HITTYPE_HIT_MID0, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_L
	mMvAnDef L0541A4, $0C, $01, $04, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_H
	mMvAnDef L0541B6, $08, $01, $08, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_L
	mMvAnDef L0541C4, $0C, $02, $08, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_KICK_H
	mMvAnDef L0541D6, $08, $00, $03, HITTYPE_HIT_MID1, $00 ; BANK $05 ; MOVE_SHARED_PUNCH_CL
	mMvAnDef L0541E4, $0C, $01, $03, HITTYPE_HIT_MID1, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_PUNCH_CH
	mMvAnDef L0541F6, $08, $00, $06, HITTYPE_HIT_MID1, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CL
	mMvAnDef L054204, $10, $04, $06, HITTYPE_DROP_CH, PF3_HITLOW ; BANK $05 ; MOVE_SHARED_KICK_CH
	mMvAnDef L05425A, $08, $04, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT ; BANK $05 ; MOVE_SHARED_ATTACK_G
	mMvAnDef L05421A, $10, $01, $05, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_PUNCH_A
	mMvAnDef L054230, $10, $01, $09, HITTYPE_HIT_MID0, PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_KICK_A
	mMvAnDef L054244, $10, $01, $06, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_OVERHEAD ; BANK $05 ; MOVE_SHARED_ATTACK_A
	mMvAnDef L054328, $10, $01, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $05 ; MOVE_IORI_YAMI_BARAI_L
	mMvAnDef L054328, $10, $03, $0A, HITTYPE_HIT_MID0, PF3_HEAVYHIT|PF3_FIRE|PF3_HALFSPEED ; BANK $05 ; MOVE_IORI_YAMI_BARAI_H
	mMvAnDef L0543B6, $14, $01, $09, HITTYPE_HIT_MID1, PF3_HEAVYHIT|PF3_FIRE|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_ONI_YAKI_L
	mMvAnDef L0543B6, $14, $01, $09, HITTYPE_DROP_MAIN, PF3_HEAVYHIT|PF3_FIRE|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_ONI_YAKI_H
	mMvAnDef L054382, $14, $01, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_AOI_HANA_L
	mMvAnDef L054382, $14, $01, $04, HITTYPE_HIT_MID1, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_AOI_HANA_H
	mMvAnDef L054360, $1C, $01, $09, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KOTO_TSUKI_IN_L
	mMvAnDef L054360, $1C, $01, $09, HITTYPE_HIT_MID0, PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KOTO_TSUKI_IN_H
	mMvAnDef L0543D4, $00, $04, $00, $00, $00 ;X ; BANK $05 ; MOVE_IORI_SCUM_GALE_L
	mMvAnDef L0543D4, $00, $04, $00, $00, $00 ; BANK $05 ; MOVE_IORI_SCUM_GALE_H
	mMvAnDef L054012, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_IORI_SPEC_5_L
	mMvAnDef L054012, $00, $02, $0A, HITTYPE_DUMMY, $00 ;X ; BANK $05 ; MOVE_IORI_SPEC_5_H
	mMvAnDef L0543EA, $00, $02, $01, HITTYPE_HIT_MULTIGS, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_ESCAPE_L
	mMvAnDef L0543EA, $00, $02, $01, HITTYPE_HIT_MULTIGS, PF3_HEAVYHIT|PF3_LASTHIT ;X ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_ESCAPE_H
	mMvAnDef L054464, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_S
	mMvAnDef L0544BA, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_D
	mMvAnDef L05452C, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_OIORI_KIN_YA_OTOME_S
	mMvAnDef L05452C, $48, $0C, $09, HITTYPE_HIT_MULTI0, PF3_HEAVYHIT|PF3_LASTHIT ; BANK $05 ; MOVE_OIORI_KIN_YA_OTOME_D
	mMvAnDef L05456E, $0C, $0A, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_G
	mMvAnDef L054012, $00, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_A
	mMvAnDef L054070, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_POST_BLOCKSTUN
	mMvAnDef L054294, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_GUARDBREAK_G
	mMvAnDef L0542AE, $04, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_GUARDBREAK_A
	mMvAnDef L054294, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT0MID
	mMvAnDef L0542A2, $00, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT1MID
	mMvAnDef L0542A8, $00, $05, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_HITLOW
	mMvAnDef L0542D6, $10, $05, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_DROP_MAIN
	mMvAnDef L0542F8, $0C, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_END_A
	mMvAnDef L05430A, $00, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_DROP_DBG
	mMvAnDef L0542EC, $18, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_HIT_SWOOPUP
	mMvAnDef L05430A, $08, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_DROP_CH
	mMvAnDef L0542B8, $18, $02, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_BACKJUMP_REC_A
	mMvAnDef L054294, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID0
	mMvAnDef L0542A2, $00, $14, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_HIT_MULTIMID1
	mMvAnDef L0542E2, $04, $00, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_HIT_MULTIGS
	mMvAnDef L0542F8, $0C, $FF, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_END_G
	mMvAnDef L0542A2, $00, $3C, $00, $00, $00 ; BANK $05 ; MOVE_SHARED_THROW_START
	mMvAnDef L0542A2, $00, $3C, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_ROTU
	mMvAnDef L054318, $00, $3C, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_ROTL
	mMvAnDef L0542F8, $00, $3C, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_ROTD
	mMvAnDef L0542E2, $00, $3C, $00, $00, $00 ;X ; BANK $05 ; MOVE_SHARED_THROW_ROTR

; =============== MoveCodePtrTbl_* ===============
; Code pointers assigned to every move.
; These follow the groups mentioned in Play_DoPl.execMoveCode.
;
; NOTES
; - Characters with no air throws reuse MoveC_Base_Idle.
MoveCodePtrTbl_Shared_Base:
	dpr MoveC_Base_None ; BANK $02 ; MOVE_SHARED_NONE         
	dpr MoveC_Base_Idle ; BANK $02 ; MOVE_SHARED_IDLE         
	dpr MoveC_Base_WalkH ; BANK $02 ; MOVE_SHARED_WALK_F       
	dpr MoveC_Base_WalkH ; BANK $02 ; MOVE_SHARED_WALK_B       
	dpr MoveC_Base_NoAnim ; BANK $02 ; MOVE_SHARED_CROUCH       
	; Improper bank number defined for these
	dw MoveC_Base_Jump ; BANK $00 ; MOVE_SHARED_JUMP_N     
	db $02	
	dw MoveC_Base_Jump ; BANK $00 ; MOVE_SHARED_JUMP_F       
	db $02
	dw MoveC_Base_Jump ; BANK $00 ; MOVE_SHARED_JUMP_B
	db $02
	dpr MoveC_Base_NoAnim ; BANK $02 ; MOVE_SHARED_BLOCK_G      
	dpr MoveC_Base_NoAnim ; BANK $02 ; MOVE_SHARED_BLOCK_C      
	dpr MoveC_Base_BlockA ; BANK $02 ; MOVE_SHARED_BLOCK_A      
	dpr MoveC_Base_RunF ; BANK $02 ; MOVE_SHARED_RUN_F       
	dpr MoveC_Base_DashB ; BANK $02 ; MOVE_SHARED_HOP_B       
	dpr MoveC_Base_ChargeMeter ; BANK $02 ; MOVE_SHARED_CHARGEMETER  
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_TAUNT        
	dpr MoveC_Base_Roll ; BANK $02 ; MOVE_SHARED_ROLL_F       
	dpr MoveC_Base_Roll ; BANK $02 ; MOVE_SHARED_ROLL_B       
	dpr MoveC_Base_WakeUp ; BANK $02 ; MOVE_SHARED_WAKEUP       
	dpr MoveC_Base_Dizzy ; BANK $02 ; MOVE_SHARED_DIZZY        
	dpr MoveC_Base_RoundEnd ; BANK $02 ; MOVE_SHARED_WIN_NORM     
	dpr MoveC_Base_RoundEnd ; BANK $02 ; MOVE_SHARED_WIN_ALT      
	dpr MoveC_Base_RoundEnd ; BANK $02 ; MOVE_SHARED_LOST_TIMEOVER
	dpr MoveC_Base_RoundStart ; BANK $02 ; MOVE_SHARED_INTRO        
	dpr MoveC_Base_RoundStart ; BANK $02 ; MOVE_SHARED_INTRO_SPEC   
MoveCodePtrTbl_Shared_Hit:
	dpr MoveC_Hit_PostStunKnockback ; BANK $02 ; MOVE_SHARED_POST_BLOCKSTUN
	dpr MoveC_Hit_PostStunKnockback ; BANK $02 ; MOVE_SHARED_GUARDBREAK_G
	dpr MoveC_Hit_GuardBreakA ; BANK $02 ; MOVE_SHARED_GUARDBREAK_A
	dpr MoveC_Hit_PostStunKnockback ; BANK $02 ; MOVE_SHARED_HIT0MID
	dpr MoveC_Hit_PostStunKnockback ; BANK $02 ; MOVE_SHARED_HIT1MID
	dpr MoveC_Hit_PostStunKnockback ; BANK $02 ; MOVE_SHARED_HITLOW
	dpr MoveC_Hit_DropMain ; BANK $02 ; MOVE_SHARED_DROP_MAIN
	dpr MoveC_Hit_Throw_End ; BANK $02 ; MOVE_SHARED_THROW_END_A
	dpr MoveC_Hit_DropDBG ; BANK $02 ; MOVE_SHARED_DROP_DBG
	dpr MoveC_Hit_SwoopUp ; BANK $02 ; MOVE_SHARED_HIT_SWOOPUP
	dpr MoveC_Hit_DropCH ; BANK $02 ; MOVE_SHARED_DROP_CH
	dpr MoveC_Hit_BackJumpAirRec ; BANK $02 ; MOVE_SHARED_BACKJUMP_REC_A
	dpr MoveC_Hit_MultiMidKnockback ; BANK $02 ; MOVE_SHARED_HIT_MULTIMID0
	dpr MoveC_Hit_MultiMidKnockback ; BANK $02 ; MOVE_SHARED_HIT_MULTIMID1
	dpr MoveC_Hit_MultiMidGS ; BANK $02 ; MOVE_SHARED_HIT_MULTIGS
	dpr MoveC_Hit_Throw_End ; BANK $02 ; MOVE_SHARED_THROW_END_G
	dpr MoveC_Hit_Throw_Start ; BANK $02 ; MOVE_SHARED_THROW_START
	dpr MoveC_Hit_Throw_Rot ; BANK $02 ; MOVE_SHARED_THROW_ROTU
	dpr MoveC_Hit_Throw_Rot ; BANK $02 ; MOVE_SHARED_THROW_ROTL
	dpr MoveC_Hit_Throw_Rot ; BANK $02 ; MOVE_SHARED_THROW_ROTD
	dpr MoveC_Hit_Throw_Rot ; BANK $02 ; MOVE_SHARED_THROW_ROTR
MoveCodePtrTbl_Kyo:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Kyo_AraKami ; BANK $06 ; MOVE_KYO_ARA_KAMI_L
	dpr MoveC_Kyo_DokuKami ; BANK $06 ; MOVE_KYO_ARA_KAMI_H
	dpr MoveC_Kyo_OniYaki ; BANK $06 ; MOVE_KYO_ONIYAKI_L
	dpr MoveC_Kyo_OniYaki ; BANK $06 ; MOVE_KYO_ONIYAKI_H
	dpr MoveC_Kyo_RedKick ; BANK $06 ; MOVE_KYO_RED_KICK_L
	dpr MoveC_Kyo_RedKick ; BANK $06 ; MOVE_KYO_RED_KICK_H
	dpr MoveC_Kyo_KototsukiYou ; BANK $06 ; MOVE_KYO_KOTOTSUKI_YOU_L
	dpr MoveC_Kyo_KototsukiYou ; BANK $06 ; MOVE_KYO_KOTOTSUKI_YOU_H
	dpr MoveC_Kyo_Kai ; BANK $06 ; MOVE_KYO_KAI_L
	dpr MoveC_Kyo_Kai ; BANK $06 ; MOVE_KYO_KAI_H
	dpr MoveC_Kyo_NueTumi ; BANK $06 ; MOVE_KYO_NUE_TUMI_L
	dpr MoveC_Kyo_NueTumi ; BANK $06 ; MOVE_KYO_NUE_TUMI_H
	dpr MoveC_Kyo_AraKami ;X ; BANK $06 ; MOVE_KYO_SPEC_6_L
	dpr MoveC_Kyo_AraKami ;X ; BANK $06 ; MOVE_KYO_SPEC_6_H
	dpr MoveC_Kyo_UraOrochiNagi ; BANK $06 ; MOVE_KYO_URA_OROCHI_NAGI_S
	dpr MoveC_Kyo_UraOrochiNagi ; BANK $06 ; MOVE_KYO_URA_OROCHI_NAGI_D
	dpr MoveC_Kyo_UraOrochiNagi ;X ; BANK $06 ; MOVE_KYO_SUPER_1_S
	dpr MoveC_Kyo_UraOrochiNagi ;X ; BANK $06 ; MOVE_KYO_SUPER_1_D
	dpr MoveC_Kyo_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Daimon:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Daimon_JiraiShin ; BANK $05 ; MOVE_DAIMON_JIRAI_SHIN
	dpr MoveC_Daimon_JiraiShin ; BANK $05 ; MOVE_DAIMON_JIRAI_SHIN_FAKE
	dpr MoveC_Daimon_ChouUkemi ; BANK $05 ; MOVE_DAIMON_CHOU_UKEMI_L
	dpr MoveC_Daimon_ChouUkemi ; BANK $05 ; MOVE_DAIMON_CHOU_UKEMI_H
	dpr MoveC_Daimon_CmdThrow ; BANK $05 ; MOVE_DAIMON_CHOU_OOSOTO_GARI_L
	dpr MoveC_Daimon_CmdThrow ; BANK $05 ; MOVE_DAIMON_CHOU_OOSOTO_GARI_H
	dpr MoveC_Daimon_CmdThrow ; BANK $05 ; MOVE_DAIMON_CLOUD_TOSSER
	dpr MoveC_Daimon_CmdThrow ; BANK $05 ; MOVE_DAIMON_STUMP_THROW
	dpr MoveC_Daimon_HeavenDrop ; BANK $05 ; MOVE_DAIMON_HEAVEN_DROP_L
	dpr MoveC_Daimon_HeavenDrop ; BANK $05 ; MOVE_DAIMON_HEAVEN_DROP_H
	dpr MoveC_Daimon_JiraiShin ;X ; BANK $05 ; MOVE_DAIMON_SPEC_5_L
	dpr MoveC_Daimon_JiraiShin ;X ; BANK $05 ; MOVE_DAIMON_SPEC_5_H
	dpr MoveC_Daimon_JiraiShin ;X ; BANK $05 ; MOVE_DAIMON_SPEC_6_L
	dpr MoveC_Daimon_JiraiShin ;X ; BANK $05 ; MOVE_DAIMON_SPEC_6_H
	dpr MoveC_Daimon_HeavenHellDrop ; BANK $05 ; MOVE_DAIMON_HEAVEN_HELL_DROP_S
	dpr MoveC_Daimon_HeavenHellDrop ; BANK $05 ; MOVE_DAIMON_HEAVEN_HELL_DROP_D
	dpr MoveC_Daimon_HeavenHellDrop ;X ; BANK $05 ; MOVE_DAIMON_SUPER_1_S
	dpr MoveC_Daimon_HeavenHellDrop ;X ; BANK $05 ; MOVE_DAIMON_SUPER_1_D
	dpr MoveC_Daimon_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Andy:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_MF07 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Andy_HiShoKen ; BANK $06 ; MOVE_ANDY_HI_SHO_KEN_L
	dpr MoveC_Andy_HiShoKen ; BANK $06 ; MOVE_ANDY_HI_SHO_KEN_H
	dpr MoveC_Andy_ZanEiKen ; BANK $06 ; MOVE_ANDY_ZAN_EI_KEN_L
	dpr MoveC_Andy_ZanEiKen ; BANK $06 ; MOVE_ANDY_ZAN_EI_KEN_H
	dpr MoveC_Andy_KuHaDan ; BANK $06 ; MOVE_ANDY_KU_HA_DAN_L
	dpr MoveC_Andy_KuHaDan ; BANK $06 ; MOVE_ANDY_KU_HA_DAN_H
	dpr MoveC_Andy_ShoRyuDan ; BANK $06 ; MOVE_ANDY_SHO_RYU_DAN_L
	dpr MoveC_Andy_ShoRyuDan ; BANK $06 ; MOVE_ANDY_SHO_RYU_DAN_H
	dpr MoveC_Andy_GekiHekiHaiSuiSho ; BANK $06 ; MOVE_ANDY_GEKI_HEKI_HAI_SUI_SHO_L
	dpr MoveC_Andy_GekiHekiHaiSuiSho ; BANK $06 ; MOVE_ANDY_GEKI_HEKI_HAI_SUI_SHO_H
	dpr MoveC_Andy_GeneiShiranui ; BANK $06 ; MOVE_ANDY_GENEI_SHIRANUI_L
	dpr MoveC_Andy_GeneiShiranui ; BANK $06 ; MOVE_ANDY_GENEI_SHIRANUI_H
	dpr MoveC_Andy_GeneiShiranuiSubmove ; BANK $06 ; MOVE_ANDY_SHIMO_AGITO
	dpr MoveC_Andy_GeneiShiranuiSubmove ; BANK $06 ; MOVE_ANDY_UWA_AGITO
	dpr MoveC_Andy_ChoReppaDan ; BANK $06 ; MOVE_ANDY_CHO_REPPA_DAN_S
	dpr MoveC_Andy_ChoReppaDan ; BANK $06 ; MOVE_ANDY_CHO_REPPA_DAN_D
	dpr MoveC_Andy_ChoReppaDan ;X ; BANK $06 ; MOVE_ANDY_SUPER_1_S
	dpr MoveC_Andy_ChoReppaDan ;X ; BANK $06 ; MOVE_ANDY_SUPER_1_D
	dpr MoveC_Andy_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Robert:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_MF07 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Robert_RyuuGekiKen ; BANK $02 ; MOVE_ROBERT_RYUU_GEKI_KEN_L
	dpr MoveC_Robert_RyuuGekiKen ; BANK $02 ; MOVE_ROBERT_RYUU_GEKI_KEN_H
	dpr MoveC_Robert_HienShippuKyaku ; BANK $02 ; MOVE_ROBERT_HIEN_SHIPPU_KYAKU_L
	dpr MoveC_Robert_HienShippuKyaku ; BANK $02 ; MOVE_ROBERT_HIEN_SHIPPU_KYAKU_H
	dpr MoveC_Robert_HienRyuuShinKya ; BANK $02 ; MOVE_ROBERT_HIEN_RYUU_SHIN_KYA_L
	dpr MoveC_Robert_HienRyuuShinKya ; BANK $02 ; MOVE_ROBERT_HIEN_RYUU_SHIN_KYA_H
	dpr MoveC_Robert_RyuuGa ; BANK $02 ; MOVE_ROBERT_RYUU_GA_L
	dpr MoveC_Robert_RyuuGa ; BANK $02 ; MOVE_ROBERT_RYUU_GA_H
	dpr MoveC_Robert_KyokugenRyuRanbuKyaku ; BANK $02 ; MOVE_ROBERT_KYOKUGEN_RYU_RANBU_KYAKU_L
	dpr MoveC_Robert_KyokugenRyuRanbuKyaku ; BANK $02 ; MOVE_ROBERT_KYOKUGEN_RYU_RANBU_KYAKU_H
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_ROBERT_RYUU_GA_HIDDEN_L
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_ROBERT_RYUU_GA_HIDDEN_H
	dpr MoveC_Robert_RyuuGekiKen ;X ; BANK $02 ; MOVE_ROBERT_SPEC_6_L
	dpr MoveC_Robert_RyuuGekiKen ;X ; BANK $02 ; MOVE_ROBERT_SPEC_6_H
	dpr MoveC_Robert_RyuKoRanbuS ; BANK $02 ; MOVE_ROBERT_RYU_KO_RANBU_S
	dpr MoveC_Robert_RyuKoRanbuD ; BANK $02 ; MOVE_ROBERT_RYU_KO_RANBU_D
	dpr MoveC_Robert_HaohShokohKen ; BANK $02 ; MOVE_ROBERT_HAOH_SHOKOH_KEN_S
	dpr MoveC_Robert_HaohShokohKen ; BANK $02 ; MOVE_ROBERT_HAOH_SHOKOH_KEN_D
	dpr MoveC_Robert_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Leona:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_MF07 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Leona_BalticLauncherL ; BANK $02 ; MOVE_LEONA_BALTIC_LAUNCHER_L
	dpr MoveC_Leona_BalticLauncherH ; BANK $02 ; MOVE_LEONA_BALTIC_LAUNCHER_H
	dpr MoveC_Leona_GrandSabre ; BANK $02 ; MOVE_LEONA_GRAND_SABRE_L
	dpr MoveC_Leona_GrandSabre ; BANK $02 ; MOVE_LEONA_GRAND_SABRE_H
	dpr MoveC_Leona_XCalibur ; BANK $02 ; MOVE_LEONA_X_CALIBUR_L
	dpr MoveC_Leona_XCalibur ; BANK $02 ; MOVE_LEONA_X_CALIBUR_H
	dpr MoveC_Leona_MoonSlasher ; BANK $02 ; MOVE_LEONA_MOON_SLASHER_L
	dpr MoveC_Leona_MoonSlasher ; BANK $02 ; MOVE_LEONA_MOON_SLASHER_H
	dpr MoveC_OLeona_StormBringer ; BANK $02 ; MOVE_OLEONA_STORM_BRINGER_L
	dpr MoveC_OLeona_StormBringer ; BANK $02 ; MOVE_OLEONA_STORM_BRINGER_H
	dpr MoveC_Leona_BalticLauncherL ;X ; BANK $02 ; MOVE_LEONA_SPEC_5_L
	dpr MoveC_Leona_BalticLauncherL ;X ; BANK $02 ; MOVE_LEONA_SPEC_5_H
	dpr MoveC_Leona_BalticLauncherL ;X ; BANK $02 ; MOVE_LEONA_SPEC_6_L
	dpr MoveC_Leona_BalticLauncherL ;X ; BANK $02 ; MOVE_LEONA_SPEC_6_H
	dpr MoveC_Leona_VSlasher ; BANK $02 ; MOVE_LEONA_V_SLASHER_S
	dpr MoveC_Leona_VSlasher ; BANK $02 ; MOVE_LEONA_V_SLASHER_D
	dpr MoveC_OLeona_SuperMoonSlasher ; BANK $02 ; MOVE_OLEONA_SUPER_MOON_SLASHER_S
	dpr MoveC_OLeona_SuperMoonSlasher ; BANK $02 ; MOVE_OLEONA_SUPER_MOON_SLASHER_D
	dpr MoveC_Leona_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_ThrowA_DiagF ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Geese:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormL_2Hit_D06_A03 ; BANK $1C ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormL_2Hit_D06_A03 ; BANK $1C ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_MF07 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Geese_ReppukenL ; BANK $06 ; MOVE_GEESE_REPPUKEN_L
	dpr MoveC_Geese_ReppukenH ; BANK $06 ; MOVE_GEESE_REPPUKEN_H
	dpr MoveC_Geese_JaEiKen ; BANK $06 ; MOVE_GEESE_JA_EI_KEN_L
	dpr MoveC_Geese_JaEiKen ; BANK $06 ; MOVE_GEESE_JA_EI_KEN_H
	dpr MoveC_Geese_HishouNichirinZan ; BANK $06 ; MOVE_GEESE_HISHOU_NICHIRIN_ZAN_L
	dpr MoveC_Geese_HishouNichirinZan ; BANK $06 ; MOVE_GEESE_HISHOU_NICHIRIN_ZAN_H
	dpr MoveC_Geese_ShippuKen ; BANK $06 ; MOVE_GEESE_SHIPPU_KEN_L
	dpr MoveC_Geese_ShippuKen ; BANK $06 ; MOVE_GEESE_SHIPPU_KEN_H
	dpr MoveC_Geese_AtemiNage ; BANK $06 ; MOVE_GEESE_ATEMI_NAGE_L
	dpr MoveC_Geese_AtemiNage ; BANK $06 ; MOVE_GEESE_ATEMI_NAGE_H
	dpr MoveC_Geese_ReppukenL ;X ; BANK $06 ; MOVE_GEESE_SPEC_5_L
	dpr MoveC_Geese_ReppukenL ;X ; BANK $06 ; MOVE_GEESE_SPEC_5_H
	dpr MoveC_Geese_ReppukenL ;X ; BANK $06 ; MOVE_GEESE_SPEC_6_L
	dpr MoveC_Geese_ReppukenL ;X ; BANK $06 ; MOVE_GEESE_SPEC_6_H
	dpr MoveC_Geese_RagingStorm ; BANK $06 ; MOVE_GEESE_RAGING_STORM_S
	dpr MoveC_Geese_RagingStorm ; BANK $06 ; MOVE_GEESE_RAGING_STORM_D
	dpr MoveC_Geese_RagingStorm ;X ; BANK $06 ; MOVE_GEESE_SUPER_1_S
	dpr MoveC_Geese_RagingStorm ;X ; BANK $06 ; MOVE_GEESE_SUPER_1_D
	dpr MoveC_Geese_ThrowG ; BANK $09 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Krauser:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Krauser_BlitzBall ; BANK $09 ; MOVE_KRAUSER_HIGH_BLITZ_BALL_L
	dpr MoveC_Krauser_BlitzBall ; BANK $09 ; MOVE_KRAUSER_HIGH_BLITZ_BALL_H
	dpr MoveC_Krauser_BlitzBall ; BANK $09 ; MOVE_KRAUSER_LOW_BLITZ_BALL_L
	dpr MoveC_Krauser_BlitzBall ; BANK $09 ; MOVE_KRAUSER_LOW_BLITZ_BALL_H
	dpr MoveC_Krauser_LegTomahawk ; BANK $09 ; MOVE_KRAUSER_LEG_TOMAHAWK_L
	dpr MoveC_Krauser_LegTomahawk ; BANK $09 ; MOVE_KRAUSER_LEG_TOMAHAWK_H
	dpr MoveC_Krauser_KaiserKick ; BANK $09 ; MOVE_KRAUSER_KAISER_KICK_L
	dpr MoveC_Krauser_KaiserKick ; BANK $09 ; MOVE_KRAUSER_KAISER_KICK_H
	dpr MoveC_Krauser_KaiserDuelSobat ; BANK $09 ; MOVE_KRAUSER_KAISER_DUEL_SOBAT_L
	dpr MoveC_Krauser_KaiserDuelSobat ; BANK $09 ; MOVE_KRAUSER_KAISER_DUEL_SOBAT_H
	dpr MoveC_Krauser_KaiserSuplex ; BANK $09 ; MOVE_KRAUSER_KAISER_SUPLEX_L
	dpr MoveC_Krauser_KaiserSuplex ; BANK $09 ; MOVE_KRAUSER_KAISER_SUPLEX_H
	dpr MoveC_Krauser_BlitzBall ;X ; BANK $09 ; MOVE_KRAUSER_SPEC_6_L
	dpr MoveC_Krauser_BlitzBall ;X ; BANK $09 ; MOVE_KRAUSER_SPEC_6_H
	dpr MoveC_Krauser_KaiserWave ; BANK $09 ; MOVE_KRAUSER_KAISER_WAVE_S
	dpr MoveC_Krauser_KaiserWave ; BANK $09 ; MOVE_KRAUSER_KAISER_WAVE_D
	dpr MoveC_Krauser_KaiserWave ;X ; BANK $09 ; MOVE_KRAUSER_SUPER_1_S
	dpr MoveC_Krauser_KaiserWave ;X ; BANK $09 ; MOVE_KRAUSER_SUPER_1_D
	dpr MoveC_Krauser_ThrowG ; BANK $09 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_MrBig:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_MrBig_PunchH ; BANK $1C ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_MrBig_GroundBlaster ; BANK $06 ; MOVE_MRBIG_GROUND_BLASTER_L
	dpr MoveC_MrBig_GroundBlaster ; BANK $06 ; MOVE_MRBIG_GROUND_BLASTER_H
	dpr MoveC_MrBig_CrossDiving ; BANK $06 ; MOVE_MRBIG_CROSS_DIVING_L
	dpr MoveC_MrBig_CrossDiving ; BANK $06 ; MOVE_MRBIG_CROSS_DIVING_H
	dpr MoveC_MrBig_SpinningLancer ; BANK $06 ; MOVE_MRBIG_SPINNING_LANCER_L
	dpr MoveC_MrBig_SpinningLancer ; BANK $06 ; MOVE_MRBIG_SPINNING_LANCER_H
	dpr MoveC_Robert_RyuuGa ; BANK $02 ; MOVE_MRBIG_CALIFORNIA_ROMANCE_L
	dpr MoveC_MrBig_CaliforniaRomanceH ; BANK $06 ; MOVE_MRBIG_CALIFORNIA_ROMANCE_H
	dpr MoveC_MrBig_DrumShot ; BANK $06 ; MOVE_MRBIG_DRUM_SHOT_L
	dpr MoveC_MrBig_DrumShot ; BANK $06 ; MOVE_MRBIG_DRUM_SHOT_H
	dpr MoveC_MrBig_GroundBlaster ;X ; BANK $06 ; MOVE_MRBIG_SPEC_5_L
	dpr MoveC_MrBig_GroundBlaster ;X ; BANK $06 ; MOVE_MRBIG_SPEC_5_H
	dpr MoveC_MrBig_GroundBlaster ;X ; BANK $06 ; MOVE_MRBIG_SPEC_6_L
	dpr MoveC_MrBig_GroundBlaster ;X ; BANK $06 ; MOVE_MRBIG_SPEC_6_H
	dpr MoveC_MrBig_BlasterWave ; BANK $06 ; MOVE_MRBIG_BLASTER_WAVE_S
	dpr MoveC_MrBig_BlasterWave ; BANK $06 ; MOVE_MRBIG_BLASTER_WAVE_D
	dpr MoveC_MrBig_BlasterWave ;X ; BANK $06 ; MOVE_MRBIG_SUPER_1_S
	dpr MoveC_MrBig_BlasterWave ;X ; BANK $06 ; MOVE_MRBIG_SUPER_1_D
	dpr MoveC_MrBig_ThrowG ; BANK $09 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Mature:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Mature_PunchH ; BANK $1C ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL_2Hit_D06_A03 ; BANK $1C ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_MF07 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Mature_Decide ; BANK $05 ; MOVE_MATURE_DECIDE_L
	dpr MoveC_Mature_Decide ; BANK $05 ; MOVE_MATURE_DECIDE_H
	dpr MoveC_Mature_MetalMassacre ; BANK $05 ; MOVE_MATURE_METAL_MASSACRE_L
	dpr MoveC_Mature_MetalMassacre ; BANK $05 ; MOVE_MATURE_METAL_MASSACRE_H
	dpr MoveC_Mature_DeathRow ; BANK $05 ; MOVE_MATURE_DEATH_ROW_L
	dpr MoveC_Mature_DeathRow ; BANK $05 ; MOVE_MATURE_DEATH_ROW_H
	dpr MoveC_Mature_Despair ; BANK $05 ; MOVE_MATURE_DESPAIR_L
	dpr MoveC_Mature_Despair ; BANK $05 ; MOVE_MATURE_DESPAIR_H
	dpr MoveC_Mature_Decide ;X ; BANK $05 ; MOVE_MATURE_SPEC_4_L
	dpr MoveC_Mature_Decide ;X ; BANK $05 ; MOVE_MATURE_SPEC_4_H
	dpr MoveC_Mature_Decide ;X ; BANK $05 ; MOVE_MATURE_SPEC_5_L
	dpr MoveC_Mature_Decide ;X ; BANK $05 ; MOVE_MATURE_SPEC_5_H
	dpr MoveC_Mature_Decide ;X ; BANK $05 ; MOVE_MATURE_SPEC_6_L
	dpr MoveC_Mature_Decide ;X ; BANK $05 ; MOVE_MATURE_SPEC_6_H
	dpr MoveC_Mature_HeavensGate ; BANK $05 ; MOVE_MATURE_HEAVENS_GATE_S
	dpr MoveC_Mature_HeavensGate ; BANK $05 ; MOVE_MATURE_HEAVENS_GATE_D
	dpr MoveC_Mature_HeavensGate ;X ; BANK $05 ; MOVE_MATURE_SUPER_1_S
	dpr MoveC_Mature_HeavensGate ;X ; BANK $05 ; MOVE_MATURE_SUPER_1_D
	dpr MoveC_Mature_ThrowG ; BANK $09 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Chizuru:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_CHIZURU_TENJIN_KOTOWARI_L
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_CHIZURU_TENJIN_KOTOWARI_H
	dpr MoveC_Chizuru_ShinsokuNoroti ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_L
	dpr MoveC_Chizuru_ShinsokuNoroti ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_HIGH_H
	dpr MoveC_Chizuru_ShinsokuNoroti ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_L
	dpr MoveC_Chizuru_ShinsokuNoroti ; BANK $05 ; MOVE_CHIZURU_SHINSOKU_NOROTI_LOW_H
	dpr MoveC_Chizuru_TenZuiL ; BANK $05 ; MOVE_CHIZURU_TEN_ZUI_L
	dpr MoveC_Chizuru_TenZuiH ; BANK $05 ; MOVE_CHIZURU_TEN_ZUI_H
	dpr MoveC_Chizuru_TamayuraShitsuneL ; BANK $05 ; MOVE_CHIZURU_TAMAYURA_SHITSUNE_L
	dpr MoveC_Chizuru_TamayuraShitsuneH ; BANK $05 ; MOVE_CHIZURU_TAMAYURA_SHITSUNE_H
	dpr MoveC_Chizuru_ShinsokuNoroti ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_5_L
	dpr MoveC_Chizuru_ShinsokuNoroti ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_5_H
	dpr MoveC_Chizuru_ShinsokuNoroti ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_6_L
	dpr MoveC_Chizuru_ShinsokuNoroti ;X ; BANK $05 ; MOVE_CHIZURU_SPEC_6_H
	dpr MoveC_Chizuru_SanRaiFuiJin ; BANK $05 ; MOVE_CHIZURU_SAN_RAI_FUI_JIN_S
	dpr MoveC_Chizuru_SanRaiFuiJin ; BANK $05 ; MOVE_CHIZURU_SAN_RAI_FUI_JIN_D
	dpr MoveC_Chizuru_ReijiIshizue ; BANK $05 ; MOVE_CHIZURU_REIGI_ISHIZUE_S
	dpr MoveC_Chizuru_ReijiIshizue ; BANK $05 ; MOVE_CHIZURU_REIGI_ISHIZUE_D
	dpr MoveC_Chizuru_ThrowG ; BANK $09 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Goenitz:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Goenitz_PunchH ; BANK $1C ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Goenitz_KickH ; BANK $1C ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Goenitz_Yonokaze ; BANK $0A ; MOVE_GOENITZ_YONOKAZE1
	dpr MoveC_Goenitz_Yonokaze ; BANK $0A ; MOVE_GOENITZ_YONOKAZE2
	dpr MoveC_Goenitz_Yonokaze ; BANK $0A ; MOVE_GOENITZ_YONOKAZE3
	dpr MoveC_Goenitz_Yonokaze ; BANK $0A ; MOVE_GOENITZ_YONOKAZE4
	dpr MoveC_Goenitz_HyougaL ; BANK $0A ; MOVE_GOENITZ_HYOUGA_L
	dpr MoveC_Goenitz_HyougaH ; BANK $0A ; MOVE_GOENITZ_HYOUGA_H
	dpr MoveC_Goenitz_WanpyouTokobuse ; BANK $0A ; MOVE_GOENITZ_WANPYOU_TOKOBUSE_L
	dpr MoveC_Goenitz_WanpyouTokobuse ; BANK $0A ; MOVE_GOENITZ_WANPYOU_TOKOBUSE_H
	dpr MoveC_Goenitz_Yamidoukoku ; BANK $0A ; MOVE_GOENITZ_YAMIDOUKOKU_SL
	dpr MoveC_Goenitz_Yamidoukoku ; BANK $0A ; MOVE_GOENITZ_YAMIDOUKOKU_SH
	dpr MoveC_Goenitz_ShinyaotomeThrowL ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_THROW_L
	dpr MoveC_Goenitz_ShinyaotomeThrowH ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_THROW_H
	dpr MoveC_Goenitz_ShinyaotomePart2 ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_PART2_L
	dpr MoveC_Goenitz_ShinyaotomePart2 ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_PART2_H
	dpr MoveC_Goenitz_ShinyaotomeMizuchiSL ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_MIZUCHI_SL
	dpr MoveC_Goenitz_ShinyaotomeMizuchiSH ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_MIZUCHI_SH
	dpr MoveC_Goenitz_ShinyaotomeJissoukokuDL ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_JISSOUKOKU_DL
	dpr MoveC_Goenitz_ShinyaotomeJissoukokuDH ; BANK $0A ; MOVE_GOENITZ_SHINYAOTOME_JISSOUKOKU_DH
	dpr MoveC_Goenitz_ShinyaotomeThrowL ; BANK $0A ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_MrKarate:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormL_2Hit_D06_A03 ; BANK $1C ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_MrKarate_KoOuKen ; BANK $02 ; MOVE_MRKARATE_KO_OU_KEN_L
	dpr MoveC_MrKarate_KoOuKen ; BANK $02 ; MOVE_MRKARATE_KO_OU_KEN_H
	dpr MoveC_MrKarate_ShouranKyaku ; BANK $02 ; MOVE_MRKARATE_SHOURAN_KYAKU_L
	dpr MoveC_MrKarate_ShouranKyaku ; BANK $02 ; MOVE_MRKARATE_SHOURAN_KYAKU_H
	dpr MoveC_MrKarate_HienShippuuKyaku ; BANK $02 ; MOVE_MRKARATE_HIEN_SHIPPUU_KYAKU_L
	dpr MoveC_MrKarate_HienShippuuKyaku ; BANK $02 ; MOVE_MRKARATE_HIEN_SHIPPUU_KYAKU_H
	dpr MoveC_MrKarate_Zenretsuken ; BANK $02 ; MOVE_MRKARATE_ZENRETSUKEN_L
	dpr MoveC_MrKarate_Zenretsuken ; BANK $02 ; MOVE_MRKARATE_ZENRETSUKEN_H
	dpr MoveC_Robert_KyokugenRyuRanbuKyaku ; BANK $02 ; MOVE_MRKARATE_KYOKUKEN_RYU_RENBU_KEN_L
	dpr MoveC_Robert_KyokugenRyuRanbuKyaku ; BANK $02 ; MOVE_MRKARATE_KYOKUKEN_RYU_RENBU_KEN_H
	dpr MoveC_Terry_RisingTackle ;X ; BANK $02 ; MOVE_MRKARATE_KO_OU_KEN_UNUSED_EL ; [TCRF] Would be an hidden version of Ko Ou Ken, likely cloned from Ryo's entry. Its respective animation is a placeholder one.
	dpr MoveC_Terry_RisingTackle ;X ; BANK $02 ; MOVE_MRKARATE_KO_OU_KEN_UNUSED_EH
	dpr MoveC_Ryo_KoOuKen ;X ; BANK $02 ; MOVE_MRKARATE_SPEC_6_L ; [POI] This placeholder entry is using the one for Ryo, hinting that at some point Mr. Karate didn't have its own code for KoOuKen.
	dpr MoveC_Ryo_KoOuKen ;X ; BANK $02 ; MOVE_MRKARATE_SPEC_6_H
	dpr MoveC_MrKarate_RyukoRanbuS ; BANK $02 ; MOVE_MRKARATE_RYUKO_RANBU_S
	dpr MoveC_MrKarate_Unused_RyukoRanbuD ;X ; BANK $02 ; MOVE_MRKARATE_RYUKO_RANBU_UNUSED_D
	dpr MoveC_Robert_HaohShokohKen ; BANK $02 ; MOVE_MRKARATE_HAOH_SHO_KOH_KEN_S
	dpr MoveC_Robert_HaohShokohKen ; BANK $02 ; MOVE_MRKARATE_HAOH_SHO_KOH_KEN_D
	dpr MoveC_Ryo_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Ryo:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH_2Hit_D06_A04 ; BANK $1C ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormL_2Hit_D06_A03 ; BANK $1C ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Ryo_KoOuKen ; BANK $02 ; MOVE_RYO_KO_OU_KEN_L
	dpr MoveC_Ryo_KoOuKen ; BANK $02 ; MOVE_RYO_KO_OU_KEN_H
	dpr MoveC_Ryo_MouKoRaiJinGou ; BANK $02 ; MOVE_RYO_MOU_KO_RAI_JIN_GOU_L
	dpr MoveC_Ryo_MouKoRaiJinGou ; BANK $02 ; MOVE_RYO_MOU_KO_RAI_JIN_GOU_H
	dpr MoveC_Ryo_HienShippuKyaku ; BANK $02 ; MOVE_RYO_HIEN_SHIPPU_KYAKU_L
	dpr MoveC_Ryo_HienShippuKyaku ; BANK $02 ; MOVE_RYO_HIEN_SHIPPU_KYAKU_H
	dpr MoveC_Robert_RyuuGa ; BANK $02 ; MOVE_RYO_KO_HOU_L
	dpr MoveC_Robert_RyuuGa ; BANK $02 ; MOVE_RYO_KO_HOU_H
	dpr MoveC_Robert_KyokugenRyuRanbuKyaku ; BANK $02 ; MOVE_RYO_KYOKUKEN_RYU_RENBU_KEN_L
	dpr MoveC_Robert_KyokugenRyuRanbuKyaku ; BANK $02 ; MOVE_RYO_KYOKUKEN_RYU_RENBU_KEN_H
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_RYO_KO_HOU_EL
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_RYO_KO_HOU_EH
	dpr MoveC_Ryo_KoOuKen ;X ; BANK $02 ; MOVE_RYO_SPEC_6_L
	dpr MoveC_Ryo_KoOuKen ;X ; BANK $02 ; MOVE_RYO_SPEC_6_H
	dpr MoveC_Ryo_RyuKoRanbuS ; BANK $02 ; MOVE_RYO_RYU_KO_RANBU_S
	dpr MoveC_Ryo_RyuKoRanbuD ; BANK $02 ; MOVE_RYO_RYU_KO_RANBU_D
	dpr MoveC_Robert_HaohShokohKen ; BANK $02 ; MOVE_RYO_HAOH_SHOKOH_KEN_S
	dpr MoveC_Robert_HaohShokohKen ; BANK $02 ; MOVE_RYO_HAOH_SHOKOH_KEN_D
	dpr MoveC_Ryo_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Terry:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormL_2Hit_D06_A03 ; BANK $1C ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Terry_PowerWave ; BANK $06 ; MOVE_TERRY_POWER_WAVE_L
	dpr MoveC_Terry_PowerWave ; BANK $06 ; MOVE_TERRY_POWER_WAVE_H
	dpr MoveC_Terry_BurnKnuckle ; BANK $06 ; MOVE_TERRY_BURN_KNUCKLE_L
	dpr MoveC_Terry_BurnKnuckle ; BANK $06 ; MOVE_TERRY_BURN_KNUCKLE_H
	dpr MoveC_Terry_CrackShot ; BANK $06 ; MOVE_TERRY_CRACK_SHOT_L
	dpr MoveC_Terry_CrackShot ; BANK $06 ; MOVE_TERRY_CRACK_SHOT_H
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_TERRY_RISING_TACKLE_L
	dpr MoveC_Terry_RisingTackle ; BANK $02 ; MOVE_TERRY_RISING_TACKLE_H
	dpr MoveC_Terry_PowerDunk ; BANK $06 ; MOVE_TERRY_POWER_DUNK_L
	dpr MoveC_Terry_PowerDunk ; BANK $06 ; MOVE_TERRY_POWER_DUNK_H
	dpr MoveC_Terry_PowerWave ;X ; BANK $06 ; MOVE_TERRY_SPEC_5_L
	dpr MoveC_Terry_PowerWave ;X ; BANK $06 ; MOVE_TERRY_SPEC_5_H
	dpr MoveC_Terry_PowerWave ;X ; BANK $06 ; MOVE_TERRY_SPEC_6_L
	dpr MoveC_Terry_PowerWave ;X ; BANK $06 ; MOVE_TERRY_SPEC_6_H
	dpr MoveC_Terry_PowerWave ; BANK $06 ; MOVE_TERRY_POWER_GEYSER_S
	dpr MoveC_Terry_PowerGeyserD ; BANK $06 ; MOVE_TERRY_POWER_GEYSER_D
	dpr MoveC_Terry_PowerGeyserE ; BANK $06 ; MOVE_TERRY_POWER_GEYSER_E
	dpr MoveC_Terry_PowerGeyserD ;X ; BANK $06 ; MOVE_TERRY_SUPER_1_D
	dpr MoveC_Terry_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Athena:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Athena_PsychoBall ; BANK $06 ; MOVE_ATHENA_PSYCHO_BALL_L
	dpr MoveC_Athena_PsychoBall ; BANK $06 ; MOVE_ATHENA_PSYCHO_BALL_H
	dpr MoveC_Athena_PhoenixArrow ; BANK $06 ; MOVE_ATHENA_PHOENIX_ARROW_L
	dpr MoveC_Athena_PhoenixArrow ; BANK $06 ; MOVE_ATHENA_PHOENIX_ARROW_H
	dpr MoveC_Athena_PsychoReflector ; BANK $06 ; MOVE_ATHENA_PSYCHO_REFLECTOR_L
	dpr MoveC_Athena_PsychoReflector ; BANK $06 ; MOVE_ATHENA_PSYCHO_REFLECTOR_H
	dpr MoveC_Andy_ShoRyuDan ; BANK $06 ; MOVE_ATHENA_PSYCHO_SWORD_L
	dpr MoveC_Andy_ShoRyuDan ; BANK $06 ; MOVE_ATHENA_PSYCHO_SWORD_H
	dpr MoveC_Athena_PsychoTeleport ; BANK $06 ; MOVE_ATHENA_PSYCHO_TELEPORT_L
	dpr MoveC_Athena_PsychoTeleport ; BANK $06 ; MOVE_ATHENA_PSYCHO_TELEPORT_H
	dpr MoveC_Athena_PsychoBall ;X ; BANK $06 ; MOVE_ATHENA_SPEC_5_L
	dpr MoveC_Athena_PsychoBall ;X ; BANK $06 ; MOVE_ATHENA_SPEC_5_H
	dpr MoveC_Athena_PsychoBall ;X ; BANK $06 ; MOVE_ATHENA_SPEC_6_L
	dpr MoveC_Athena_PsychoBall ;X ; BANK $06 ; MOVE_ATHENA_SPEC_6_H
	dpr MoveC_Athena_ShCryst ; BANK $06 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_GS
	dpr MoveC_Athena_ShCryst ; BANK $06 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_GD
	dpr MoveC_Athena_ShCryst ; BANK $06 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_AS
	dpr MoveC_Athena_ShCryst ; BANK $06 ; MOVE_ATHENA_SHINING_CRYSTAL_BIT_AD
	dpr MoveC_Athena_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_ThrowA_DiagF ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Mai:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Mai_KaChoSen ; BANK $06 ; MOVE_MAI_KA_CHO_SEN_L
	dpr MoveC_Mai_KaChoSen ; BANK $06 ; MOVE_MAI_KA_CHO_SEN_H
	dpr MoveC_Mai_HissatsuShinobibachi ; BANK $06 ; MOVE_MAI_HISSATSU_SHINOBIBACHI_L
	dpr MoveC_Mai_HissatsuShinobibachi ; BANK $06 ; MOVE_MAI_HISSATSU_SHINOBIBACHI_H
	dpr MoveC_Mai_RyuEnBu ; BANK $06 ; MOVE_MAI_RYU_EN_BU_L
	dpr MoveC_Mai_RyuEnBu ; BANK $06 ; MOVE_MAI_RYU_EN_BU_H
	dpr MoveC_Mai_HishoRyuEnJin ; BANK $06 ; MOVE_MAI_HISHO_RYU_EN_JIN_L
	dpr MoveC_Mai_HishoRyuEnJin ; BANK $06 ; MOVE_MAI_HISHO_RYU_EN_JIN_H
	dpr MoveC_Mai_ChijouMusasabi ; BANK $06 ; MOVE_MAI_CHIJOU_MUSASABI_L
	dpr MoveC_Mai_ChijouMusasabi ; BANK $06 ; MOVE_MAI_CHIJOU_MUSASABI_H
	dpr MoveC_Mai_KuuchuuMusasabi ; BANK $06 ; MOVE_MAI_KUUCHUU_MUSASABI_L
	dpr MoveC_Mai_KuuchuuMusasabi ; BANK $06 ; MOVE_MAI_KUUCHUU_MUSASABI_H
	dpr MoveC_Mai_KaChoSen ;X ; BANK $06 ; MOVE_MAI_SPEC_6_L
	dpr MoveC_Mai_KaChoSen ;X ; BANK $06 ; MOVE_MAI_SPEC_6_H
	dpr MoveC_Mai_ChoHissatsuShinobibachiS ; BANK $06 ; MOVE_MAI_CHO_HISSATSU_SHINOBIBACHI_S
	dpr MoveC_Mai_ChoHissatsuShinobibachiD ; BANK $06 ; MOVE_MAI_CHO_HISSATSU_SHINOBIBACHI_D
	dpr MoveC_Mai_ChoHissatsuShinobibachiS ;X ; BANK $06 ; MOVE_MAI_SUPER_1_S
	dpr MoveC_Mai_ChoHissatsuShinobibachiD ;X ; BANK $06 ; MOVE_MAI_SUPER_1_D
	dpr MoveC_Mai_ThrowG ; BANK $02 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_ThrowA_DirD ; BANK $02 ; MOVE_SHARED_THROW_A
MoveCodePtrTbl_Iori:
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_L
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_H
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_PUNCH_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_PUNCH_CH
	dpr MoveC_Base_NormL ; BANK $02 ; MOVE_SHARED_KICK_CL
	dpr MoveC_Base_NormH ; BANK $02 ; MOVE_SHARED_KICK_CH
	dpr MoveC_Base_AttackG_SF04M0040 ; BANK $06 ; MOVE_SHARED_ATTACK_G
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_PUNCH_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_KICK_A
	dpr MoveC_Base_NormA ; BANK $02 ; MOVE_SHARED_ATTACK_A
	dpr MoveC_Iori_YamiBarai ; BANK $05 ; MOVE_IORI_YAMI_BARAI_L
	dpr MoveC_Iori_YamiBarai ; BANK $05 ; MOVE_IORI_YAMI_BARAI_H
	dpr MoveC_Iori_OniYaki ; BANK $05 ; MOVE_IORI_ONI_YAKI_L
	dpr MoveC_Iori_OniYaki ; BANK $05 ; MOVE_IORI_ONI_YAKI_H
	dpr MoveC_Iori_AoiHana ; BANK $05 ; MOVE_IORI_AOI_HANA_L
	dpr MoveC_Iori_AoiHana ; BANK $05 ; MOVE_IORI_AOI_HANA_H
	dpr MoveC_Iori_KotoTsukiIn ; BANK $05 ; MOVE_IORI_KOTO_TSUKI_IN_L
	dpr MoveC_Iori_KotoTsukiIn ; BANK $05 ; MOVE_IORI_KOTO_TSUKI_IN_H
	dpr MoveC_Iori_ScumGale ; BANK $05 ; MOVE_IORI_SCUM_GALE_L
	dpr MoveC_Iori_ScumGale ; BANK $05 ; MOVE_IORI_SCUM_GALE_H
	dpr MoveC_Iori_YamiBarai ;X ; BANK $05 ; MOVE_IORI_SPEC_5_L
	dpr MoveC_Iori_YamiBarai ;X ; BANK $05 ; MOVE_IORI_SPEC_5_H
	dpr MoveC_Iori_KinYaOtomeEscapeD ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_ESCAPE_L
	dpr MoveC_Iori_KinYaOtomeEscapeD ;X ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_ESCAPE_H
	dpr MoveC_Iori_KinYaOtomeS ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_S
	dpr MoveC_Iori_KinYaOtomeD ; BANK $05 ; MOVE_IORI_KIN_YA_OTOME_D
	dpr MoveC_OIori_KinYaOtome ; BANK $05 ; MOVE_OIORI_KIN_YA_OTOME_S
	dpr MoveC_OIori_KinYaOtome ; BANK $05 ; MOVE_OIORI_KIN_YA_OTOME_D
	dpr MoveC_Iori_ThrowG ; BANK $09 ; MOVE_SHARED_THROW_G
	dpr MoveC_Base_Idle ;X ; BANK $02 ; MOVE_SHARED_THROW_A
	
; 
; =============== START OF SUBMODULE Play->CPU ===============
;

; =============== Play_CPU_Do ===============
; Handles inputs for CPU players.
;
; While this handles the move inputs, not everything is handled here.
; Some moves (in particular those that have submoves) have CPU-specific
; code to randomize how to handle them.
;
; IN
; - BC: Ptr to wPlInfo
; - DE: Ptr to respective wOBJInfo
Play_CPU_Do:

	;
	; If iPlInfo_CPUWaitTimer is set, don't do anything until it elapses.
	; This is strictly to delay the next action by a bit, as the CPU doesn't use 
	; the MoveInput_* like the player does.
	;
	ld   hl, iPlInfo_CPUWaitTimer
	add  hl, bc
	ld   a, [hl]
	cp   $00			; WaitTimer == $00?
	jr   z, .resetInput	; If so, jump
	dec  a				; Otherwise, WaitTimer--
	ld   [hl], a
	ret					; and exit
.resetInput:
	;
	; Clear all joypad input fields
	;
	xor  a
	ld   hl, iPlInfo_JoyNewKeys
	add  hl, bc
	ldi  [hl], a	; iPlInfo_JoyNewKeys
	ldi  [hl], a	; iPlInfo_JoyKeys
	ldi  [hl], a	; iPlInfo_JoyNewKeysLH
	call Play_Pl_ClearJoyDirBuffer
	
	;
	; CPU AI LOGIC STARTS HERE
	;
	; First part here is reacting to what the player is doing.
	;
	
	; Handle separately what happens if there's an enemy projectile on screen
	ld   hl, iPlInfo_Flags0Other
	add  hl, bc
	bit  PF0B_PROJ, [hl]			; Does the opponent have an active fireball?
	jp   nz, Play_CPU_CheckProj		; If so, jump
	
	; Handle separately if the current or next frame from the opponent deal damage
	ld   hl, iPlInfo_MoveDamageValOther
	add  hl, bc
	ld   a, [hl]					; A = Cur Damage value
	ld   hl, iPlInfo_MoveDamageValNextOther
	add  hl, bc
	or   a, [hl]					; A |= Next damage value
	jp   nz, Play_CPU_BlockAttack_ByDifficulty				; A != 0? If so, jump
	
	; On HARD difficulty, several additional checks are made.
	; The only check that remains in this block on EASY/NORMAL difficulties
	; is the player distance one, which also activates closer to the opponent.
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD		; Playing on HARD?
	jp   nz, .valNormEasy		; If not, jump
.valHard:
	;
	; HARD ONLY
	;
	
	; If the opponent is invulnerable, move/hop backwards
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]
	jp   nz, Play_CPU_SetJoyKeysB_HopRand
	
	; If we're in the post-blockstun knockback, randomize return input
	ld   hl, iPlInfo_MoveId
	add  hl, bc
	ld   a, [hl]
	cp   MOVE_SHARED_POST_BLOCKSTUN			; During knockback?
	jp   z, Play_CPU_OnBlockstunKnockback	; If so, jump
	
	; If we can cancel the current move into another, perform a random character-specific input
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	bit  PF1B_ALLOWHITCANCEL, [hl]
	jp   nz, Play_CPU_SetRandCharInput
	
	; If we're within $20px from the opponent, try to perform a random action
	ld   hl, iPlInfo_PlDistance
	add  hl, bc
	ld   a, [hl]
	cp   $20						; iPlInfo_PlDistance < $20?
	jp   c, Play_CPU_OnPlNear		; If so, jump
	
	;
	; Every alternating $40 frames, perform a random character-specific input.
	; Notably, this only happens here, with the HARD difficulty setting.
	; On NORMAL and EASY, the CPU will never attack when far away.
	;
	ld   a, [wTimer]
	bit  6, a
	jp   nz, Play_CPU_SetRandCharInput
	; Every alternating $80 frames that don't fall into the above check, try to jump forwards.
	; This gives a window of opportunity for the jump to happen.
	bit  7, a
	jp   nz, Play_CPU_SetJoyKeysJumpUF
	
	jp   .idle
.valNormEasy:
	;
	; NORMAL/EASY ONLY
	;
	
	; If we're within $1Apx from the opponent, try to perform a random action
	ld   hl, iPlInfo_PlDistance
	add  hl, bc
	ld   a, [hl]
	cp   $1A						; iPlInfo_PlDistance < $1A?
	jp   c, Play_CPU_OnPlNear		; If so, jump
	
.idle:

	;
	; IDLE MOVEMENT
	;
	; If we got here, there's nothing for the CPU to react to.
	;

	; Don't pick a new action until the next block until the timer elapses
	ld   hl, iPlInfo_CPUIdleTimer
	add  hl, bc
	ld   a, [hl]
	cp   $00				; iPlInfo_CPUIdleTimer == $00?
	jr   z, .setIdleMove	; If so, jump
	dec  a					; Otherwise, iPlInfo_CPUIdleTimer--
	ld   [hl], a
	jr   .execIdleMove		; and skip
.setIdleMove:

	;
	; Set the new length of the timer value.
	; This is always $16.
	;
	
	;--
	; [POI] What's this used for? A canceled attempt at randomizing the timer?
	call Rand	; A = Rand
	or   a, $07	; Set lower three bits
	;--
	ld   a, $0B
	ld   e, a
	add  a, e			; A = $0B * 2
	ld   hl, iPlInfo_CPUIdleTimer
	add  hl, bc			; Seek to delay
	ld   [hl], a		; Write it
	
	;
	; Randomize the action.
	;
	call Rand
	; ~15.5% chance -> Attempt to move backwards (moves forward anyway if too far away from the opponent)
	cp   $28
	jr   c, .chkSetMoveB
	; ~23.5% chance -> Attempt to pause (moves forward anyway if too far away from the opponent)
	cp   $64
	jr   c, .chkSetNoMove
	; ~10% chance -> Charge meter
	cp   $7D
	jr   c, .setChargeMove
	; ~51% chance -> Move forward
.setMoveF:
	; iPlInfo_CPUIdleMove = CMA_MOVEF
	xor  a	; CMA_MOVEF
	ld   hl, iPlInfo_CPUIdleMove
	add  hl, bc
	ld   [hl], a
	jr   .execIdleMove
.chkSetMoveB:
	; Move forward instead if too far away from the opponent
	ld   hl, iPlInfo_PlDistance
	add  hl, bc
	ld   a, [hl]
	cp   $5A			; iPlInfo_PlDistance >= $5A?
	jp   nc, .setMoveF	; If so, jump
	; iPlInfo_CPUIdleMove = CMA_MOVEB
	ld   a, CMA_MOVEB
	ld   hl, iPlInfo_CPUIdleMove
	add  hl, bc
	ld   [hl], a
	jr   .execIdleMove
.chkSetNoMove:
	; Move forward instead if too far away from the opponent
	ld   hl, iPlInfo_PlDistance
	add  hl, bc
	ld   a, [hl]
	cp   $55			; iPlInfo_PlDistance >= $55?
	jp   nc, .setMoveF	; If so, jump
	; iPlInfo_CPUIdleMove = CMA_NONE
	ld   a, CMA_NONE
	ld   hl, iPlInfo_CPUIdleMove
	add  hl, bc
	ld   [hl], a
	jr   .execIdleMove
.setChargeMove:
	; iPlInfo_CPUIdleMove = CMA_CHARGE
	ld   a, CMA_CHARGE
	ld   hl, iPlInfo_CPUIdleMove
	add  hl, bc
	ld   [hl], a
	jr   .execIdleMove
	
.execIdleMove:
	; Execute the currently set idle move input
	ld   hl, iPlInfo_CPUIdleMove
	add  hl, bc
	ld   a, [hl]
	cp   CMA_MOVEF
	jp   z, Play_CPU_SetJoyKeysF_RunRand
	cp   CMA_MOVEB
	jp   z, Play_CPU_SetJoyKeysB_HopRand
	cp   CMA_CHARGE
	jp   z, Play_CPU_SetJoyKeys_Charge
	ret
	
; =============== Play_CPU_SetJoyKeys_Charge ===============
; Makes the CPU charge meter. (A+B+Down)
Play_CPU_SetJoyKeys_Charge:

	; If we reached max power, abort this move early.
	ld   hl, iPlInfo_Pow
	add  hl, bc
	ld   a, [hl]		
	cp   PLAY_POW_MAX	; At max power?
	jr   z, .end		; If so, jump
	
	; Perform the charge input
	ld   a, KEY_B|KEY_A|KEY_DOWN
	ld   d, KEP_B_LIGHT|KEP_A_LIGHT
	jp   Play_CPU_SetJoyKeys
.end:
	; Reset the idle timer.
	; This will force to pick a new idle move next frame.
	xor  a
	ld   hl, iPlInfo_CPUIdleTimer
	add  hl, bc
	ld   [hl], a
	ret
; =============== Play_CPU_OnPlNear ===============
; Handles the logic when the opponent is near us.
;
; This needs to survive a gauntlet of difficulty-specific validations, which,
; if pass, make the CPU execute a random action.
Play_CPU_OnPlNear:

	;
	; The difficulty variable for this part only matters for non-boss stages.
	; The bosses and extra rounds have their own difficulty which is harder than hard.
	;

	; Depending on difficulty...
	ld   a, [wDifficulty]
	cp   DIFFICULTY_NORMAL
	jp   z, .norm
	cp   DIFFICULTY_HARD
	jp   z, .hard
.easy:
	; Check hardcoded stage difficulties
	ld   a, [wCharSeqId]
	cp   STAGESEQ_KAGURA	; Are we in a boss or extra stage?
	jp   nc, .hard			; If so, jump
	
	; Don't do anything for the next 10 frames
	ld   hl, iPlInfo_CPUWaitTimer
	add  hl, bc
	ld   a, $0A
	ld   [hl], a
	
	; ~39% chance of not doing anything
	call Rand
	cp   $64
	ret  c
	
	jp   .doAction
.norm:
	; Check hardcoded stage difficulties
	ld   a, [wCharSeqId]
	cp   STAGESEQ_GOENITZ	; Are we in the Goenitz or extra stages?
	jp   nc, .hardest		; If so, jump
	cp   STAGESEQ_KAGURA	; Are we in boss Kagura's stage?
	jp   nc, .hard			; If so, jump
	
	; Don't do anything for the next frame
	ld   hl, iPlInfo_CPUWaitTimer
	add  hl, bc
	ld   a, $01
	ld   [hl], a
	
	; ~8% chance of not doing anything
	call Rand
	cp   $14
	ret  c
	
	jp   .doAction
.hard:
	; Check hardcoded stage difficulties.
	; .hardest is like .hard, except it:
	; - respects POWERUP mode 
	; - allows hit cancel
	; - makes the CPU block/walk back if the opponent is invulnerable.
	
	; [POI] On POWERUP mode, HARD is perpetually HARDEST here
	ld   a, [wDipSwitch]
	bit  DIPB_POWERUP, a
	jp   nz, .hardest
	; [POI] The other STAGESEQ_KAGURA checks in .easy and .norm, instead of leading directly to .hardest, led here.
	;       What gives? Is it an error? Should have this been checking STAGESEQ_GOENITZ?
	ld   a, [wCharSeqId]
	cp   a, STAGESEQ_KAGURA	; Are we in a boss or extra stages?
	jp   nc, .hardest		; If so, jump
	; 50% chance to be in hardest mode
	ld   a, [wTimer]
	bit  7, a				; wTimer >= $80?
	jp   nz, .hardest		; If so, jump
	
	; If we're in the post-blockstun knockback, randomize return input (WITHOUT respecting POWERUP mode)
	ld   hl, iPlInfo_MoveId
	add  hl, bc
	ld   a, [hl]
	cp   MOVE_SHARED_POST_BLOCKSTUN		; During knockback?
	jp   z, Play_CPU_SetRandCharInput	; If so, jump
	
	; Allow the CPU to do something the next frame
	ld   hl, iPlInfo_CPUWaitTimer
	add  hl, bc
	ld   a, $00
	ld   [hl], a
	
	; ~4% chance of not doing anything
	; With the previous 50% chance to go to .hardest, which has a 0% rand chance, it makes it ~2%
	call Rand
	cp   a, $0A
	ret  c
	
	jp   .doAction
	;--
.hardest:
	; Attempt to special/super cancel if possible
	ld   hl, iPlInfo_Flags1
	add  hl, bc
	bit  PF1B_ALLOWHITCANCEL, [hl]
	jp   nz, Play_CPU_SetRandCharInput
	
	; If we're in the post-blockstun knockback, randomize return input (respecting POWERUP mode)
	ld   hl, iPlInfo_MoveId
	add  hl, bc
	ld   a, [hl]
	cp   MOVE_SHARED_POST_BLOCKSTUN			; During knockback?
	jp   z, Play_CPU_OnBlockstunKnockback	; If so, jump
	
	; Allow the CPU to do something the next frame
	ld   hl, iPlInfo_CPUWaitTimer
	add  hl, bc
	ld   a, $00
	ld   [hl], a
	
	; If the opponent is invulnerable, try to walk back outside of the "near" range.
	ld   hl, iPlInfo_Flags1Other
	add  hl, bc
	bit  PF1B_INVULN, [hl]
	jp   nz, Play_CPU_BlockAttack_ByDifficulty
	
	; 0% chance of not doing anything.
	
.doAction:
	
	;
	; IDLE MODE (near player)
	;
	; There's nothing for the CPU to react to, so perform a random action.
	;
	
	call Rand
	; ~15.5% chance -> 25% chance of A+B attack
	cp   $28
	jp   c, Play_CPU_SetJoyKeysAtkG_C25
	; ~8%    chance -> 25% chance of heavy punch
	cp   $3C
	jp   c, Play_CPU_SetJoyKeysHP_C25
	; ~8%    chance -> 25% chance of light punch
	cp   $50
	jp   c, Play_CPU_SetJoyKeysLP_C25
	; ~8%    chance -> Heavy kick
	cp   $64
	jp   c, Play_CPU_SetJoyKeysHK
	; ~8%    chance -> Heavy punch
	cp   $78
	jp   c, Play_CPU_SetJoyKeysLK
	; ~8%    chance -> Random character-specific input
	cp   $8C
	jp   c, Play_CPU_SetRandCharInput
	; ~8%    chance -> Move/hop back
	cp   $A0
	jp   c, Play_CPU_SetJoyKeysB_HopRand
	; ~23.5% chance -> 50% chance of throw (or heavy punch while holding back)
	cp   $DC
	jp   c, Play_CPU_SetJoyKeysB_HP_C50
	; ~14%   chance -> Nothing
	ret

; =============== Play_CPU_OnBlockstunKnockback ===============
; Handles the logic when in the middle of knockback after blockstun.
; These attempt to set a character-specific input that may take effect 
; as soon as knockback ends if something else doesn't write to the key buffer.
Play_CPU_OnBlockstunKnockback:

	;
	; Without powerup mode active, fall back to Play_CPU_SetRandCharInput
	;
	ld   a, [wDipSwitch]
	bit  DIPB_POWERUP, a				; Is the powerup cheat enabled?
	jp   z, Play_CPU_SetRandCharInput	; If not, jump
	
.powerup:
	;
	; In powerup mode, continuously attempt to perform the inputs for either $01 or $07.
	; Note that while $01 is an input for a normal special, $07 is the slot reserved for the super move input.
	;
	ld   a, [wTimer]
	bit  1, a			; Every alternating $02 frames
	jp   nz, .super
.spec:
	bit  0, a			; Every other frame
	jp   nz, .specH
.specL:
	ld   a, $01	; Use move input $01
	scf
	ccf	; Use light version (#0)
	jp   Play_CPU_ApplyCharInput
.specH:
	ld   a, $01	; Use move input $01
	scf	; Use heavy version (#1)
	jp   Play_CPU_ApplyCharInput
.super:
	ld   a, [wTimer]
	bit  0, a			; Every other frame
	jp   nz, .superH
.superL:
	ld   a, $07	; Use super move input
	scf
	ccf	; Use light version (#0)
	jp   Play_CPU_ApplyCharInput
.superH:
	ld   a, $07	; Use super move input
	scf	; Use heavy version (#1)
	jp   Play_CPU_ApplyCharInput
	
	
; =============== Play_CPU_SetRandCharInput ===============
; Makes the CPU perform a random special move input / character-specific move input
; with random strength.
Play_CPU_SetRandCharInput:
	;
	; 62.5% chance of performing a light attack.
	;
	call Rand		; A = Rand
	cp   $A0		; A < $A0?
	jp   c, .light	; If so, jump
.heavy:
	call Rand	; Randomize moveinput id
	and  a, $07	; Force valid range ($00-$07)
	scf			; Use heavy version (#1)
	jp   Play_CPU_ApplyCharInput
.light:
	call Rand	; Randomize moveinput id
	and  a, $07	; Force valid range ($00-$07)
	scf
	ccf			; Use light version (#0)
	jp   Play_CPU_ApplyCharInput
	
; =============== Play_CPU_BlockAttack_ByDifficulty ===============
; Makes the opponent block the active attack (or, if we got here with no attack, to walk back away from the opponent), with difficulty-specific logic.
; - EASY and NORMAL have almost identical logic. They randomize between blocking mid and low
;   back depending on the global timer.
;   The difference between these are the bits that are checked to determine if the CPU should
;   do anything and which move should performed. 
;   - On EASY those are respectively bit 7 and 6.
;   - On NORMAL those are bit 6 and 5
;   This means on EASY, the CPU will not do anything for longer and alternate between block stances less.
; - HARD makes the CPU always do something. The action performed isn't randomized either.
;   See Play_CPU_BlockAttack for more info.
Play_CPU_BlockAttack_ByDifficulty:
	; Determine which difficulty we're in.
	ld   a, [wDifficulty]
	cp   DIFFICULTY_EASY	; On EASY difficulty?
	jp   z, .easy			; If so, jump
	cp   DIFFICULTY_NORMAL	; On NORMAL difficulty?
	jp   z, .norm			; If so, jump
.hard:
	jp   Play_CPU_BlockAttack	; Otherwise, we're on HARD
.easy:
	; Return every alternating $80 frames
	ld   a, [wTimer]
	bit  7, a
	ret  nz
	; Every $40 frames, alternate between crouch block and block
	bit  6, a
	jp   z, Play_CPU_SetJoyKeysDB
	jp   Play_CPU_SetJoyKeysB
.norm:
	; Return every alternating $40 frames
	ld   a, [wTimer]
	bit  6, a
	ret  nz
	; Every $20 frames, alternate between crouch block and block
	bit  5, a
	jp   z, Play_CPU_SetJoyKeysDB
	jp   Play_CPU_SetJoyKeysB
	
; =============== Play_CPU_BlockAttack_C15 ===============
; Performs actions depending on how the opponent's attack hits,
; with 15% chance of not doing anything.
Play_CPU_BlockAttack_C15:
	;
	; ~15.6% chance of not doing anything
	;
	call Rand	; A = Rand
	cp   $28	; A < $28?
	ret  c		; If so, return
	; Fall-through
	
; =============== Play_CPU_BlockAttack ===============
; Makes the opponent block or jump back the active attack.
; Performs actions depending on how the opponent's attack hits.
Play_CPU_BlockAttack:
	
	; Get the damage flags for the opponent's move
	ld   hl, iPlInfo_MoveDamageFlags3Other
	add  hl, bc
	ld   a, [hl]	; A = Cur flags
	ld   hl, iPlInfo_MoveDamageFlags3NextOther
	add  hl, bc
	or   a, [hl]	; A |= Next flags
	
	;
	; Move backwards/block when the attack doesn't hit low.
	; This means the CPU doesn't need to watch its feet and block low, so just block.
	;
	; If the opponent isn't attacking (ie: we got here through the PF1B_INVULN check),
	; walk back in an attempt to get out of the opponent's range.
	;
	bit  PF3B_HITLOW, a				; Does the attack hit low?
	jp   z, Play_CPU_SetJoyKeysB	; If not, jump
	
	;
	; If the attack hits low (but doesn't also hit mid), crouch block.
	;
	bit  PF3B_OVERHEAD, a			; Does the attack hit high?
	jp   z, Play_CPU_SetJoyKeysDB	; If not, jump
	
	;
	; Otherwise, this is an unblockable. Try to block it anyway.
	;
	jp   Play_CPU_SetJoyKeysB
	ret ; We never get here

; =============== Play_CPU_CheckProj ===============	
; Behaviour when an enemy projectile is active on-screen.
Play_CPU_CheckProj:
	;
	; On EASY difficulty, there's a 50% chance of not doing anything.
	;
	ld   a, [wDifficulty]
	cp   DIFFICULTY_EASY			; Playing on EASY?
	jp   nz, .chkAthenaCrystalBit	; If not, skip
	ld   a, [wTimer]
	cp   $80						; wTimer < $80?
	ret  c							; If so, return
	
.chkAthenaCrystalBit:
	;
	; Start spamming user moves if we're on HARD and attempting to hit the CPU 
	; with Athena's normal super.
	; Note the desperation version is unaffected.
	;
	
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD				; Playing on HARD?
	jp   nz, .norm		; If not, skip
	
	ld   hl, iPlInfo_CharIdOther
	add  hl, bc
	ld   a, [hl]
	cp   CHAR_ID_ATHENA					; Opponent is Athena?
	jp   nz, .chkPowerupMode			; If not, skip
	
	ld   hl, iPlInfo_MoveIdOther
	add  hl, bc
	ld   a, [hl]
	cp   a, MOVE_ATHENA_SHINING_CRYSTAL_BIT_GS	; Opponent is doing a normal super?
	jp   z, Play_CPU_SetRandCharInputH			; If so, jump
	cp   a, MOVE_ATHENA_SHINING_CRYSTAL_BIT_AS	; ""
	jp   z, Play_CPU_SetRandCharInputH			; ""

.chkPowerupMode:

	;
	; Handle the projectile distance checks differently in powerup mode.
	;
	ld   a, [wDipSwitch]
	bit  DIPB_POWERUP, a	; Is the powerup cheat enabled?
	jp   z, .norm			; If not, jump
	
.powerup:	
	;
	; If we pressed any attack button in the last few frames but no attack started,
	; perform a crouching light punch.
	; Note that switching to a new move, most of the time, clears iPlInfo_JoyBufKeysLH.
	;
	ld   hl, iPlInfo_JoyBufKeysLH
	add  hl, bc
	ld   a, [hl]
	and  a, KEP_A_LIGHT|KEP_B_LIGHT|KEP_A_HEAVY|KEP_B_HEAVY	; Are we pressing any button already?
	jp   nz, Play_CPU_SetJoyKeysC_LP_C25					; If so, jump
	
	;
	; Check distance with enemy projectile.
	;
	ld   hl, iPlInfo_ProjDistance
	add  hl, bc
	ld   a, [hl]
	; Crouching light punch if distance >= $46
	cp   $46
	jp   nc, Play_CPU_SetJoyKeysC_LP_C25
	; Roll if distance in range $32-$45
	cp   $32			
	jp   nc, Play_CPU_StartRoll_D14_C20
	; Block or jump back if distance < $32
	jr   Play_CPU_BlockAttack
.norm:
	;
	; Check distance with enemy projectile.
	;
	ld   hl, iPlInfo_ProjDistance
	add  hl, bc
	ld   a, [hl]
	; Do a random character-specific input if distance >= $55
	cp   $55
	jp   nc, Play_CPU_SetRandCharInputH
	; Jump forward if distance in range $46-$54
	cp   $46
	jp   nc, Play_CPU_SetJoyKeysJumpUF
	; Roll if distance < $32
	cp   $32
	jp   c, Play_CPU_StartRoll_D14_C20
	; Block or jump back if distance in range $32-$45
	jp   Play_CPU_BlockAttack_C15
	
; =============== Play_CPU_StartRoll_D14_C20 ===============
; Makes the CPU perform a roll in a random direction.
; On EASY and NORMAL difficulties, there's a 20% chance of blocking the attack
; instead of starting a roll.
; On HARD, the roll always happens.
Play_CPU_StartRoll_D14_C20:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD	; Playing on HARD?
	jp   z, .end			; If so, skip
	; ~20% chance of jumping to Play_CPU_BlockAttack 
	call Rand
	cp   $32
	jp   c, Play_CPU_BlockAttack
.end:
	; Fall-through
; =============== Play_CPU_StartRoll_D14 ===============
; Makes the CPU perform a roll in a random direction.
; After doing this, the CPU will not press anything for 20 frames.
Play_CPU_StartRoll_D14:
	; Wait 20 frames before next time we execute AI code
	ld   hl, iPlInfo_CPUWaitTimer
	add  hl, bc
	ld   a, $14
	ld   [hl], a
	
	; Hold A+B+(50% chance between L and R)
	ld   a, [wTimer]
	bit  0, a			; wTimer % 2 != 0?
	jp   nz, .setL		; If so, jump
.setR:
	ld   a, KEY_A|KEY_B|KEY_RIGHT ; $31
	jp   .go
.setL:
	ld   a, KEY_A|KEY_B|KEY_LEFT ; $32
.go:
	ld   d, KEP_A_HEAVY|KEP_B_HEAVY
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeysJumpUF ===============
; Makes the CPU perform the input for a forward jump, "randomized" between a small hop and hyper jump.
; Note this will always be done regardless of whatever action we're in, so it could have
; different effects if we are in the middle of a special move.
Play_CPU_SetJoyKeysJumpUF:

	;
	; Every alternating 16 frames, try to perform a D+U input.
	; This triggers an hyper jump if done.
	;
	ld   a, [wTimer]
	bit  4, a					; (wTimer & $10) == 0?
	jp   z, .setJumpDir			; If so, skip
	ld   hl, MoveInput_DU_Fast
	call Play_CPU_ApplyMoveInputDir
	
.setJumpDir:

	;
	; Perform the forward jump input, which will get added to the buffer later
	; in the frame when Play_WriteKeysToBuffer gets executed.
	;
	
	; Determine which direction is for moving forward
	ld   hl, iOBJInfo_OBJLstFlags
	add  hl, de
	bit  SPRB_XFLIP, [hl]		; Are we facing right?
	jp   nz, .setJumpR			; If so, jump
.setJumpL:	
	ld   a, KEY_LEFT|KEY_UP		; UL is forward when facing left (2P side)
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
.setJumpR:
	ld   a, KEY_RIGHT|KEY_UP	; UR is forward when facing right (1P side)
	ld   d, $00
	jp   Play_CPU_SetJoyKeys

; =============== Play_CPU_SetRandCharInputH ===============
; Makes the CPU perform a random heavy special move input / character-specific move input.
Play_CPU_SetRandCharInputH:
	call Rand	; Randomize moveinput id
	and  a, $07	; Force valid range ($00-$07)
	scf			; Use heavy version (#1)
	jp   Play_CPU_ApplyCharInput
	
; =============== Play_CPU_SetJoyKeysB_HP_C50 ===============
; Makes the CPU perform an heavy punch while holding back.
; There's 50% chance for this to happen.
; Because this is called when close to the opponent, the intention
; is to start a throw, but the player may not be on the ground / in 
; throw range, so it won't always happen.
Play_CPU_SetJoyKeysB_HP_C50:
	call Rand
	bit  0, a
	ret  z
	ld   hl, iOBJInfo_OBJLstFlags
	add  hl, de
	bit  SPRB_XFLIP, [hl]	; Are we visually facing right? (1P side)
	jp   nz, .moveL			; If so, jump
	ld   a, KEY_RIGHT		; On the 2P side, right is backwards
	ld   d, KEP_B_HEAVY
	jp   Play_CPU_SetJoyKeys
.moveL:
	ld   a, KEY_LEFT		; On the 1P side, left is backwards
	ld   d, KEP_B_HEAVY
	jp   Play_CPU_SetJoyKeys
	

; =============== Play_CPU_SetJoyKeys*_C75 ===============
; Sets of subroutines that makes the CPU perform a punch/kick input.
; These subroutines are affected by difficulty in the same way:
; - On EASY and NORMAL difficulties, there's a 75% chance of not moving.
; - On HARD difficulty, the CPU always moves.
	
; =============== Play_CPU_SetJoyKeysLP_C25 ===============
; Makes the CPU perform a standing light punch input.
Play_CPU_SetJoyKeysLP_C25:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD	; On HARD difficulty?
	jp   z, .setKeys		; If so, skip
	call Rand				; A = Rand
	bit  0, a				; bit0 set? (50%)
	ret  z					; If so, return
	bit  1, a				; bit1 set? (another 50%)
	ret  z					; If so, return
.setKeys:
	xor  a ; KEY_NONE
	ld   d, KEP_B_LIGHT
	jp   Play_CPU_SetJoyKeys
; =============== Play_CPU_SetJoyKeysAtkG_C25 ===============
; Makes the CPU perform a ground A+B attack.
Play_CPU_SetJoyKeysAtkG_C25:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD
	jp   z, .setKeys
	call Rand
	bit  0, a
	ret  z
	bit  1, a
	ret  z
.setKeys:
	ld   a, KEY_A|KEY_B
	ld   d, KEP_B_HEAVY|KEP_A_HEAVY
	jp   Play_CPU_SetJoyKeys
; =============== Play_CPU_SetJoyKeysHP_C25 ===============
; Makes the CPU perform a standing heavy punch input.
Play_CPU_SetJoyKeysHP_C25:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD
	jp   z, .setKeys
	call Rand
	bit  0, a
	ret  z
	bit  1, a
	ret  z
.setKeys:
	xor  a ; KEY_NONE
	ld   d, KEP_B_HEAVY
	jp   Play_CPU_SetJoyKeys
; =============== Play_CPU_SetJoyKeysC_LP_C25 ===============
; Makes the CPU perform a crouching light punch input.
Play_CPU_SetJoyKeysC_LP_C25:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD
	jp   z, .setKeys
	call Rand
	bit  0, a
	ret  z
	bit  1, a
	ret  z
.setKeys:
	ld   a, KEY_DOWN
	ld   d, KEP_B_LIGHT
	jp   Play_CPU_SetJoyKeys
; =============== Play_CPU_Unused_SetJoyKeysC_HP_C25 ===============
; [TCRF] Unreferenced code.
; Makes the CPU perform a crouching heavy punch input.
Play_CPU_Unused_SetJoyKeysC_HP_C25:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD
	jp   z, .setKeys
	call Rand
	bit  0, a
	ret  z
	bit  1, a
	ret  z
.setKeys:          
	ld   a, KEY_DOWN
	ld   d, KEP_B_HEAVY
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeysLK ===============
; Makes the CPU perform the light kick input.
Play_CPU_SetJoyKeysLK:
	xor  a ; KEY_NONE
	ld   d, KEP_A_LIGHT
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeysHK ===============
; Makes the CPU perform the heavy kick input.
Play_CPU_SetJoyKeysHK:
	xor  a ; KEY_NONE
	ld   d, KEP_A_HEAVY
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeysB_HopRand ===============
; Makes the CPU move back.
; On NORMAL and EASY difficulties, there's a 50% chance the CPU will hop backwards.
Play_CPU_SetJoyKeysB_HopRand:
	ld   a, [wDifficulty]
	cp   DIFFICULTY_HARD			; On hard difficulty?
	jp   z, Play_CPU_SetJoyKeysB	; If so, skip
	
	; Moving or hopping backwards? 50% chance of either.
	call Rand		; A = Rand
	bit  7, a		; A < $80?		
	jp   z, Play_CPU_SetJoyKeysB	; If so, jump
	
	; The hop input will be copied to the buffer.
	ld   hl, MoveInput_BB
	call Play_CPU_ApplyMoveInputDir
	; Fall-through
	
; =============== Play_CPU_SetJoyKeysB ===============
; Makes the CPU input back.
Play_CPU_SetJoyKeysB:
	ld   hl, iOBJInfo_OBJLstFlags
	add  hl, de
	bit  SPRB_XFLIP, [hl]	; Are we visually facing right? (1P side)
	jp   nz, .moveL			; If so, jump
.moveR:
	ld   a, KEY_RIGHT		; On the 2P side, right is backwards
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
.moveL:
	ld   a, KEY_LEFT		; On the 1P side, left is backwards
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeysDB ===============
; Makes the CPU input down back.
Play_CPU_SetJoyKeysDB:
	ld   hl, iOBJInfo_OBJLstFlags
	add  hl, de
	bit  SPRB_XFLIP, [hl]	; Are we visually facing right? (1P side)
	jp   nz, .moveUL		; If so, jump
.moveUR:
	ld   a, KEY_DOWN|KEY_RIGHT
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
.moveUL:
	ld   a, KEY_DOWN|KEY_LEFT
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeysF_RunRand ===============
; Makes the CPU move forward if it's not too close to the opponent.
; There's a 50% chance the CPU will run forwards.
Play_CPU_SetJoyKeysF_RunRand:

	; Don't do anything if we're too close to the opponent
	ld   hl, iPlInfo_PlDistance
	add  hl, bc
	ld   a, [hl]
	cp   $1A				; iPlInfo_PlDistance < $1A?
	ret  c					; If so, return
	
	; Moving or running forward? 50% chance of either.
	call Rand		; A = Rand
	bit  7, a		; A < $80?
	jp   z, Play_CPU_SetJoyKeysF	; If so, jump
.setRun:
	; The run input will be copied to the buffer.
	; Note that we don't return because we still need to make the CPU hold forward,
	; otherwise the run ends quickly.
	ld   hl, MoveInput_FF
	call Play_CPU_ApplyMoveInputDir
	; Fall-through
	
; =============== Play_CPU_SetJoyKeysF ===============
; Makes the CPU input forward.
Play_CPU_SetJoyKeysF:
	ld   hl, iOBJInfo_OBJLstFlags
	add  hl, de
	bit  SPRB_XFLIP, [hl]	; Are we visually facing right? (1P side)
	jp   nz, .moveR			; If so, jump
.moveL:
	ld   a, KEY_LEFT		; On the 2P side, left is forwards
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
.moveR:
	ld   a, KEY_RIGHT		; On the 1P side, right is forwards
	ld   d, $00
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_SetJoyKeys ===============
; Writes the "current" joypad keys values.
;
; Later in the frame, when Play_WriteKeysToBuffer gets executed, these inputs will
; be added to the buffer at iPlInfo_JoyDirBuffer & iPlInfo_JoyBtnBuffer.
;
; IN
; - A: Held keys (iPlInfo_JoyKeys)
; - D: Light/Heavy button info (iPlInfo_JoyNewKeysLH)
Play_CPU_SetJoyKeys:
	ld   hl, iPlInfo_JoyKeys
	add  hl, bc
	ldi  [hl], a	; Write A to iPlInfo_JoyKeys, seek to iPlInfo_JoyNewKeysLH
	ld   [hl], d	; Write D to iPlInfo_JoyNewKeysLH
	ret
	
; =============== Play_CPU_ApplyCharInput ===============
; Makes the CPU perform a character-specific move input.
;
; How this works:
;
; Each character is assigned a list of move inputs (CPU_MoveInputList_*).
; The table at CPU_MoveListPtrTable assigns one for every character.
;
; Each MoveInputList itself is a table of 8 entries with 4 bytes each:
; - 0-1: Ptr to a MoveInput_* (iCPUMoveListItem_MoveInputPtr) for the old keypresses
; - 2: Current LH button input #0 + MoveInput type flag (CMLB_BTN) (iCPUMoveListItem_LastLHKeyA)
; - 3: Current LH button input #1 (iCPUMoveListItem_LastLHKeyB)
;
; The combination of MoveInput and button allows to define standard motions like:
; -> DF+B
; With MoveInput_DF defining DF and iCPUMoveListItem_LastLHKey* being KEP_B_LIGHT.
;
; The MoveInput data doesn't necessarily have to point to a d-pad motion.
; If in the second byte, iCPUMoveListItem_LastLHKeyA, the flag CML_BTN is set, the
; MoveInput is treated as a button-based input (ie: pressing B 3 times).
; Since this has to be defined manually, it should be consistent with the MoveInput. 
;
; Regardless of that, iCPUMoveListItem_LastLHKey* will always be a punch or kick input
; in LH format (for iPlInfo_JoyNewKeysLH), with the CML_BTN flag stripped out.
;
; Notice that there are two possible inputs the game can choose.
; Which one is picked depends on the C flag passed to the subroutine, which is arbitrary
; for every point that calls this.
; In practice, the input lists are set so that #0 is always a light button, and #1 is always an heavy.
; This means the C flag effectively determines the strength of the move.
;
; IN
; - A: ID of the CPU_MoveInputList_* entry, should be a random value
; - C flag: If set, use LH input #1 (heavy button, iCPUMoveListItem_LastLHKeyB).
;           If clear, use #0 (light button, iCPUMoveListItem_LastLHKeyA)
Play_CPU_ApplyCharInput:

	;
	; Seek to the character-specific input list (CPU_MoveInputList_*)
	; HL = CPU_MoveListPtrTable[iPlInfo_CharId]
	;
	push af
		; A = CharId
		ld   hl, iPlInfo_CharId
		add  hl, bc
		ld   a, [hl]		
		; HL = Base char table
		ld   hl, CPU_MoveListPtrTable
		; Index the table (HL += A)
		add  a, l			; Index it
		jp   nc, .noovf		; Did we overflow? (never happens)
		inc  h 				
	.noovf:
		ld   l, a			; Save it back
		ld   e, [hl]		; Read out the ptr to DE
		inc  hl
		ld   d, [hl]
		push de				; Move it to HL
		pop  hl
	pop  af
	
	
	;
	; Seek to the <A>'th entry of the list and read out its bytes:
	; - DE: iCPUMoveListItem_MoveInputPtr
	; - A: iCPUMoveListItem_LastLHKeyA
	; - HL: Ptr to iCPUMoveListItem_LastLHKeyA
	;
	push af
		; As each entry is 4 bytes long, A = A * 4
		sla  a				; A = A * 4
		sla  a
		; Offset the move list table (HL += A)
		add  a, l			; Index HL by that
		jp   nc, .noovf2
		inc  h
	.noovf2:
		ld   l, a
		
		; HL now points to the start of the iCPUMoveListItem entry.
		; Read out its initial data.
		
		; [byte0-1] DE = iCPUMoveListItem_MoveInputPtr
		ld   e, [hl]
		inc  hl
		ld   d, [hl]
		inc  hl
		; [byte2] A = iCPUMoveListItem_LastLHKeyA
		;         For now, this is strictly used for the CML_BTN flag,
		;         which tells if this or the next value should be used as iPlInfo_JoyNewKeysLH
		ld   a, [hl]		; Read out byte2 to A
		
		push hl ; Save the ptr to iCPUMoveListItem_LastLHKeyA
		
			;
			; Determine what kind of MoveInput we're dealing with.
			; If A has CMLB_BTN set, treat the input as contining LH punch/kick buttons (.inptBtn)
			; Otherwise, treat it as containing d-pad keys (.inptDir).
			;
			; Note that the Play_CPU_ApplyMoveInput* subroutine called is the only difference
			; between .inptDir and .inptBtn.
			; Everything below that call is identical.
			;
	

			; Move this to HL for Play_CPU_ApplyMoveInput*
			push de			
			pop  hl
	
			bit  CMLB_BTN, a	; Is the flag set?
			jp   nz, .inptBtn	; If so, jump		
		.inptDir:
			
			;
			; Apply MoveInput to iPlInfo_JoyDirBuffer
			;
			call Play_CPU_ApplyMoveInputDir
			
			;
			; Determine which LH input to use for the button, then filter it and apply it.
			;
			
			; After the pop, HL will point to input #0.
			; If the C flag passed to the subroutine is set, increment HL once
			; to make it point to input #1.
		pop  hl				; HL = Ptr to iCPUMoveListItem_LastLHKeyA (#0)
	pop  af					; C flag = If set, use input #1
	jp   nc, .inptDir_setLH	; Is it set? If not, skip (use #0)
	inc  hl					; Otherwise, seek to #1 (iCPUMoveListItem_LastLHKeyB)
.inptDir_setLH:
	ld   a, [hl]			; Read LH input value
	and  a, $FF^CML_BTN		; Remove CML_BTN flag since it has another purpose
	ld   d, a				; D = LH Input
	ld   a, KEY_NONE		; A = Nothing
	jp   Play_CPU_SetJoyKeys
	
.inptBtn:
			call Play_CPU_ApplyMoveInputBtn
			; Rest is identical to above
		pop  hl
	pop  af
	jp   nc, .inptBtn_setLH
	inc  hl
.inptBtn_setLH:
	ld   a, [hl]
	and  a, $FF^CML_BTN			
	ld   d, a
	ld   a, KEY_NONE
	jp   Play_CPU_SetJoyKeys
	
; =============== Play_CPU_ApplyMoveInputBtn ===============
; Writes the "old" joypad keys values for buttons.
;
; This copies the inputs from a MoveInfo to the input buffer of A/B button keys.
; IN
; - HL: Ptr to a MoveInput structure containing only button inputs.
Play_CPU_ApplyMoveInputBtn:
	push bc
		push de
			; Move the ptr to DE
			push hl		; DE = HL
			pop  de
			
			;
			; The iMoveInputItem entries are stored from last to first for ease of checking when handling player inputs.
			; However, since we're replacing the input buffer with inputs from a MoveInput, we have to write
			; them in reverse.
			;
			
			;
			; Make iPlInfo_JoyBtnBufferOffset point to where the last MoveInput entry would be written.
			;
			
			; A = (iMoveInput_Length - 1) * 2
			ld   a, [de]	; A = iPlInfo_JoyBtnBufferOffset
			dec  a			; -1 since we want the last entry
			sla  a			; *2 since each iMoveInputItem is 2 bytes long
			; Set it as iPlInfo_JoyBtnBufferOffset
			ld   hl, iPlInfo_JoyBtnBufferOffset
			add  hl, bc
			ld   [hl], a
			
			; 
			; HL = Ptr to the newly set buffer location.
			;
			ld   hl, iPlInfo_JoyBtnBuffer
			add  hl, bc			; HL = Ptr to iPlInfo_JoyBtnBuffer
			add  a, l			; L += iPlInfo_JoyBtnBufferOffset
			ld   l, a
			
			;
			; A = iMoveInput_Length
			;
			ld   a, [de]		
			inc  de			; Seek to first iMoveInputItem_JoyKeys entry
			jp   Play_CPU_ApplyMoveInputCustom
; =============== Play_CPU_ApplyMoveInputDir ===============
; Writes the "old" joypad keys values for d-pad keys.
;
; Copies the inputs from a MoveInfo to the input buffer of directional keys.
; See also: Play_CPU_ApplyMoveInputBtn
; IN
; - HL: Ptr to a MoveInput structure containing only directional key inputs.
Play_CPU_ApplyMoveInputDir:
	push bc
		push de
			; DE = HL
			push hl
			pop  de
			; A = (iMoveInput_Length - 1) * 2
			ld   a, [de]
			dec  a
			sla  a
			; iPlInfo_JoyBtnBufferOffset = A
			ld   hl, iPlInfo_JoyDirBufferOffset
			add  hl, bc
			ld   [hl], a
			; HL = iPlInfo_JoyDirBuffer + A
			ld   hl, iPlInfo_JoyDirBuffer
			add  hl, bc
			add  a, l
			ld   l, a
			; A = iMoveInput_Length
			ld   a, [de]
			inc  de			; Seek to first iMoveInputItem_JoyKeys entry
			
			; Fall-through

		; =============== Play_CPU_ApplyMoveInputCustom ===============			
		; Copies inputs from a list of iMoveInputItem_* to the specified buffer.
		; The copy operation is done backwards, starting at HL and moving backwards,
		; and must point to an exact location so the last iMoveInputItem write aligns
		; to the first entry of the buffer.
		;
		; IN
		; - A: iMoveInput_Length
		; - DE: Ptr to first iMoveInputItem_JoyKeys (byte0) of MenuInput
		; - HL: Ptr to destination buffer (somewhere in iPlInfo_JoyBtnBuffer or iPlInfo_JoyDirBuffer)
		Play_CPU_ApplyMoveInputCustom:
			
			; For every iMoveInputItem entry...
			push af				; Save remaining count
			
				;
				; Copy the keypress bitmask to byte0 of the iPlInfo_Joy*Buffer entry
				;
				ld   a, [de]	; A = iMoveInputItem_JoyKeys
				ldi  [hl], a	; Copy it over to byte0, and seek to byte1
				
				;
				; Copy the max keypress length to byte1 of the of the iPlInfo_Joy*Buffer entry
				;
				inc  de			; Seek to iMoveInputItem_JoyMaskKeys
				inc  de			; Seek to iMoveInputItem_MinLength
				inc  de			; Seek to iMoveInputItem_MaxLength
				ld   a, [de]	; A = iMoveInputItem_MaxLength
				ld   [hl], a	; Copy it over to byte1
				
				;
				; Advance to next iMoveInputItem entry (source)
				; and go back to byte0 of the previous iPlInfo_Joy*Buffer entry (destination)
				;
				inc  de			; Seek to iMoveInputItem_JoyKeys of next entry
				
				dec  hl			; Seek back to byte0 of current iPlInfo_Joy*Buffer entry
				dec  hl			; Seek back to byte1 of previous iPlInfo_Joy*Buffer entry
				dec  hl			; and to byte0
				
			;
			; Are we done?
			;
			pop  af				; Restore remaining count
			dec  a				; Copied all bytes?
			jp   nz, Play_CPU_ApplyMoveInputCustom	; If not, loop
		pop  de
	pop  bc
	ret
	
; =============== CPU_MoveListPtrTable ===============
; Assigns to each character a list of move inputs they can perform.
; Notes:
; - Chizuru and Kagura are almost identical and reuse the same move list.
; - O.Iori and O.Leona have special moves that are unique to them, so they get their own lists.
; - Mr.Karate reuses the same move list as Ryo.
CPU_MoveListPtrTable:
	dw CPU_MoveInputList_Kyo ; CHAR_ID_KYO
	dw CPU_MoveInputList_Daimon ; CHAR_ID_DAIMON
	dw CPU_MoveInputList_Terry ; CHAR_ID_TERRY
	dw CPU_MoveInputList_Andy ; CHAR_ID_ANDY
	dw CPU_MoveInputList_Ryo ; CHAR_ID_RYO
	dw CPU_MoveInputList_Robert ; CHAR_ID_ROBERT
	dw CPU_MoveInputList_Athena ; CHAR_ID_ATHENA
	dw CPU_MoveInputList_Mai ; CHAR_ID_MAI
	dw CPU_MoveInputList_Leona ; CHAR_ID_LEONA
	dw CPU_MoveInputList_Geese ; CHAR_ID_GEESE
	dw CPU_MoveInputList_Krauser ; CHAR_ID_KRAUSER
	dw CPU_MoveInputList_MrBig ; CHAR_ID_MRBIG
	dw CPU_MoveInputList_Iori ; CHAR_ID_IORI
	dw CPU_MoveInputList_Mature ; CHAR_ID_MATURE
	dw CPU_MoveInputList_Chizuru ; CHAR_ID_CHIZURU
	dw CPU_MoveInputList_Goenitz ; CHAR_ID_GOENITZ
	dw CPU_MoveInputList_Ryo ; CHAR_ID_MRKARATE
	dw CPU_MoveInputList_OIori ; CHAR_ID_OIORI
	dw CPU_MoveInputList_OLeona ; CHAR_ID_OLEONA
	dw CPU_MoveInputList_Chizuru ; CHAR_ID_KAGURA

; =============== CPU_MoveInputList_* ===============
; List of character-specific move inputs.
; See also: Play_CPU_ApplyCharInput for more info.
CPU_MoveInputList_Kyo: 
	; DF+P -> 114 Shiki Ara Kami
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> 100 Shiki Oni Yaki
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDB+K -> R.E.D. Kick
	dw MoveInput_BDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDB+K -> 212 Shiki Kototsuki You 
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DF+K -> 75 Shiki Kai
	dw MoveInput_DF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DB+P -> 910 Shiki Nue Tumi
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> 100 Shiki Oni Yaki
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+P -> Ura 108 Shiki Orochi Nagi
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Daimon:
	; FDF+P -> Jirai Shin
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+K -> Chou Ukemi
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDF+P -> Jirai Shin
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+K -> Chou Oosoto Gari
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P -> Cloud Tosser / Stump Throw
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDBF+P -> Heaven Drop
	dw MoveInput_FDBF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+P -> Cloud Tosser / Stump Throw
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDBx2+P -> Heaven to Hell Drop
	dw MoveInput_FDBFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Terry:
	; DF+P -> Power Wave
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> Rising Tackle
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Burn Knuckle
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+K -> Crack Shot
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDF+K -> Power Dunk
	dw MoveInput_FDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DB+P -> Burn Knuckle
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+K -> Power Dunk
	dw MoveInput_FDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DBDF+P -> Power Geyser
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Andy:
	; DB+P -> Hi Sho Ken
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> Sho Ryu Dan
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BF+P -> Zan Ei Ken
	dw MoveInput_BF_Fast
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+K -> Ku Ha Dan 
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P (close) -> Geki Heki Hai Sui Sho
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DF+K (air) -> Genei Shiranui
	dw MoveInput_DF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDF+P -> Sho Ryu Dan
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+K -> Cho Reppa Dan
	dw MoveInput_DBDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY

CPU_MoveInputList_Ryo:
	; DF+P -> Ko Ou Ken 
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> Ko Hou
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Mou Ko Rai Jin Gou
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+K -> Hien Shippu Kyaku
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P (close) -> Kyokuken Ryu Renbu Ken
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; ???
	dw MoveInput_FDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FBDF+P -> Haoh Shokoh Ken 
	dw MoveInput_FBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DFDB+P -> Ryu Ko Ranbu
	dw MoveInput_DFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Robert:
	; DF+P -> Ryuu Geki Ken	
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> Ryuu Ga
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; ???
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDB+K -> Hien Shippu Kyaku
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+K -> Kyokugen Ryu Ranbu Kyaku
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; ???
	dw MoveInput_FDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FBDF+P -> Haoh Shokoh Ken 
	dw MoveInput_FBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DFDB+P -> Ryu Ko Ranbu
	dw MoveInput_DFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Athena:
	; DB+P -> Psycho Ball (ground) / Phoenix Arrow (air)
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> Psycho Sword
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Psycho Ball (ground) / Phoenix Arrow (air)
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+K -> Psycho Reflector
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DF+K -> Psycho Teleport
	dw MoveInput_DF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDB+K -> Psycho Reflector
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DF+K -> Psycho Teleport
	dw MoveInput_DF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BFDB+P -> Shining Crystal Bit
	dw MoveInput_BFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Mai:
	; DF+P -> Ka Cho Sen
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+K -> Hisho Ryu En Jin
	dw MoveInput_FDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+K -> Hissatsu Shinobibachi
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DB+P -> Ryu En Bu (ground) / Kuuchuu Musasabi no Mai (air)
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+P -> Chijou Musasabi no Mai 
	dw MoveInput_FDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Ryu En Bu (ground) / Kuuchuu Musasabi no Mai (air)
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Ryu En Bu (ground) / Kuuchuu Musasabi no Mai (air)
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+K -> Cho Hissatsu Shinobibachi
	dw MoveInput_DBDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY

CPU_MoveInputList_Leona:
	; DU+K -> X-Calibur
	dw MoveInput_DU_Slow
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BF+K -> Grand Sabre
	dw MoveInput_BF_Slow
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DU+P -> Moon Slasher
	dw MoveInput_DU_Slow
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BF+P -> Baltic Launcher
	dw MoveInput_BF_Slow
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DU+K -> X-Calibur
	dw MoveInput_DU_Slow
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DU+P -> Moon Slasher
	dw MoveInput_DU_Slow
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DFDB+P (air) -> V Slasher
	dw MoveInput_DFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DFDB+P (air) -> V Slasher
	dw MoveInput_DFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_OLeona:
	; DU+K -> X-Calibur
	dw MoveInput_DU_Slow
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDB+P -> Storm Bringer
	dw MoveInput_FDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BF+K -> Grand Sabre
	dw MoveInput_BF_Slow
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DU+P -> Moon Slasher
	dw MoveInput_DU_Slow
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BF+P -> Baltic Launcher
	dw MoveInput_BF_Slow
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DU+K -> X-Calibur
	dw MoveInput_DU_Slow
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DFDB+P -> Super Moon Slasher (ground) / V Slasher (air)
	dw MoveInput_DFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DFDB+P -> Super Moon Slasher (ground) / V Slasher (air)
	dw MoveInput_DFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Geese:
	; DF+P -> Reppuken
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+K -> Atemi Nage
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_LIGHT
	; FDB+P -> Ja ei ken
	dw MoveInput_FDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> Hishou Nichirin Zan
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+K -> Atemi Nage
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DB+P (air) -> Shippu Ken
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P (air) -> Shippu Ken
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BFDBF+P -> Raging Storm
	dw MoveInput_BFDBF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Krauser:
	; DB+P -> High Blitz Ball
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DF+K -> Leg Tomahawk
	dw MoveInput_DF
	db KEP_A_HEAVY
	db KEP_A_HEAVY
	; FDF+K -> Kaiser Kick
	dw MoveInput_FDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+K -> Kaiser Duel Sobat
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DF+K -> Leg Tomahawk
	dw MoveInput_DF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDBF+P (close) -> Kaiser Suplex
	dw MoveInput_FDBF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+K -> Low Blitz Ball
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY;X
	; FBDF+P -> Kaiser Wave
	dw MoveInput_FBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_MrBig:
	; DF+P -> Ground Blaster
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> California Romance
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+P -> Cross Divingz
	dw MoveInput_FDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+K -> Spinning Lancer
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DF+P -> Ground Blaster
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; Px3 -> Crazy Drum Dram
	dw MoveInput_PPP
	db KEP_B_LIGHT|CML_BTN
	db KEP_B_HEAVY|CML_BTN
	; FDF+P -> California Romance
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DFDF+P -> Blaster Wave
	dw MoveInput_DFDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Iori:
	; DF+P -> 108 Shiki Yami-barai
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> 100 Shiki Oni Yaki
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> 127 Aoi Hana
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+K -> Shiki Koto Tsuki In
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P -> Scum Gale
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+K -> Shiki Koto Tsuki In
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDF+P -> 100 Shiki Oni Yaki
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+P -> Kin 1201 Shiki Ya Otome
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_OIori:
	; DF+P -> 108 Shiki Yami-barai
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> 100 Shiki Oni Yaki
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> 127 Aoi Hana
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+K -> Shiki Koto Tsuki In
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY;X
	; BDF+P -> Scum Gale
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+K -> Kin 1201 Shiki Ya Otome (Alt)
	dw MoveInput_DBDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; FDF+P -> 100 Shiki Oni Yaki
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+P -> Kin 1201 Shiki Ya Otome
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY

CPU_MoveInputList_Mature:
	; DF+P -> Despair
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+K -> Metal Massacre
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P -> Decide
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Death Row
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DF+P -> Despair
	dw MoveInput_DF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+P -> Decide
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+P -> Death Row
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+K -> Heaven's Gate
	dw MoveInput_DBDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY

CPU_MoveInputList_Chizuru:
	; BDF+P -> 108 Katsu Tamayura no Shitsune
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> 100 Katso Tenjin no Kotowari 
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+P -> 212 Katsu Shinsoku no Noroti (High)
	dw MoveInput_FDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDB+K -> 212 Katsu Shinsoku no Noroti (Low)
	dw MoveInput_FDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P -> 108 Katsu Tamayura no Shitsune
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDF+P -> 100 Katso Tenjin no Kotowari 
	dw MoveInput_FDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+P -> Ichimen Ikatsu San Rai no Fui Jin 
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDB+K -> Ichimen 85 Katsu Reigi no Ishizue 
	dw MoveInput_DBDB
	db KEP_A_LIGHT
	db KEP_A_HEAVY

CPU_MoveInputList_Goenitz:
	; BDF+P -> Yonokaze (Near)
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+P -> Shinyaotome Mizuchi / Shinyaotome Jissoukoku 
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; BDF+K -> Yonokaze (Far)
	dw MoveInput_BDF
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; BDF+P -> Yonokaze (Near)
	dw MoveInput_BDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DB+K -> Hyouga
	dw MoveInput_DB
	db KEP_A_LIGHT
	db KEP_A_HEAVY
	; DB+P -> Wanpyou Tokobuse
	dw MoveInput_DB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; FDBx2+P -> Yamidoukoku (Other super move)
	dw MoveInput_FDBFDB
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	; DBDF+P -> Shinyaotome Mizuchi / Shinyaotome Jissoukoku 
	dw MoveInput_DBDF
	db KEP_B_LIGHT
	db KEP_B_HEAVY
	
; 
; =============== END OF SUBMODULE Play->CPU ===============
;
	
; =============== END OF BANK ===============
; Junk area below.
L037E3B: db $00;X
L037E3C: db $34;X
L037E3D: db $40;X
L037E3E: db $02;X
L037E3F: db $00;X
L037E40: db $34;X
L037E41: db $40;X
L037E42: db $02;X
L037E43: db $00;X
L037E44: db $12;X
L037E45: db $42;X
L037E46: db $02;X
L037E47: db $00;X
L037E48: db $76;X
L037E49: db $40;X
L037E4A: db $02;X
L037E4B: db $00;X
L037E4C: db $D1;X
L037E4D: db $40;X
L037E4E: db $02;X
L037E4F: db $00;X
L037E50: db $38;X
L037E51: db $40;X
L037E52: db $02;X
L037E53: db $00;X
L037E54: db $CE;X
L037E55: db $42;X
L037E56: db $02;X
L037E57: db $00;X
L037E58: db $F2;X
L037E59: db $42;X
L037E5A: db $02;X
L037E5B: db $00;X
L037E5C: db $F2;X
L037E5D: db $42;X
L037E5E: db $02;X
L037E5F: db $00;X
L037E60: db $FD;X
L037E61: db $43;X
L037E62: db $02;X
L037E63: db $00;X
L037E64: db $70;X
L037E65: db $44;X
L037E66: db $02;X
L037E67: db $00;X
L037E68: db $CF;X
L037E69: db $44;X
L037E6A: db $02;X
L037E6B: db $00;X
L037E6C: db $CF;X
L037E6D: db $44;X
L037E6E: db $02;X
L037E6F: db $00;X
L037E70: db $CF;X
L037E71: db $44;X
L037E72: db $02;X
L037E73: db $00;X
L037E74: db $1B;X
L037E75: db $5E;X
L037E76: db $06;X
L037E77: db $00;X
L037E78: db $1B;X
L037E79: db $5E;X
L037E7A: db $06;X
L037E7B: db $00;X
L037E7C: db $55;X
L037E7D: db $42;X
L037E7E: db $02;X
L037E7F: db $00;X
L037E80: db $CE;X
L037E81: db $42;X
L037E82: db $02;X
L037E83: db $00;X
L037E84: db $55;X
L037E85: db $42;X
L037E86: db $02;X
L037E87: db $00;X
L037E88: db $CE;X
L037E89: db $42;X
L037E8A: db $02;X
L037E8B: db $00;X
L037E8C: db $55;X
L037E8D: db $42;X
L037E8E: db $02;X
L037E8F: db $00;X
L037E90: db $CE;X
L037E91: db $42;X
L037E92: db $02;X
L037E93: db $00;X
L037E94: db $55;X
L037E95: db $42;X
L037E96: db $02;X
L037E97: db $00;X
L037E98: db $CE;X
L037E99: db $42;X
L037E9A: db $02;X
L037E9B: db $00;X
L037E9C: db $CE;X
L037E9D: db $42;X
L037E9E: db $02;X
L037E9F: db $00;X
L037EA0: db $A1;X
L037EA1: db $41;X
L037EA2: db $02;X
L037EA3: db $00;X
L037EA4: db $A1;X
L037EA5: db $41;X
L037EA6: db $02;X
L037EA7: db $00;X
L037EA8: db $A1;X
L037EA9: db $41;X
L037EAA: db $02;X
L037EAB: db $00;X
L037EAC: db $ED;X
L037EAD: db $5F;X
L037EAE: db $06;X
L037EAF: db $00;X
L037EB0: db $ED;X
L037EB1: db $5F;X
L037EB2: db $06;X
L037EB3: db $00;X
L037EB4: db $2F;X
L037EB5: db $60;X
L037EB6: db $06;X
L037EB7: db $00;X
L037EB8: db $2F;X
L037EB9: db $60;X
L037EBA: db $06;X
L037EBB: db $00;X
L037EBC: db $1A;X
L037EBD: db $61;X
L037EBE: db $06;X
L037EBF: db $00;X
L037EC0: db $1A;X
L037EC1: db $61;X
L037EC2: db $06;X
L037EC3: db $00;X
L037EC4: db $B6;X
L037EC5: db $61;X
L037EC6: db $06;X
L037EC7: db $00;X
L037EC8: db $B6;X
L037EC9: db $61;X
L037ECA: db $06;X
L037ECB: db $00;X
L037ECC: db $B0;X
L037ECD: db $62;X
L037ECE: db $06;X
L037ECF: db $00;X
L037ED0: db $B0;X
L037ED1: db $62;X
L037ED2: db $06;X
L037ED3: db $00;X
L037ED4: db $F3;X
L037ED5: db $63;X
L037ED6: db $06;X
L037ED7: db $00;X
L037ED8: db $F3;X
L037ED9: db $63;X
L037EDA: db $06;X
L037EDB: db $00;X
L037EDC: db $ED;X
L037EDD: db $5F;X
L037EDE: db $06;X
L037EDF: db $00;X
L037EE0: db $ED;X
L037EE1: db $5F;X
L037EE2: db $06;X
L037EE3: db $00;X
L037EE4: db $8F;X
L037EE5: db $64;X
L037EE6: db $06;X
L037EE7: db $00;X
L037EE8: db $9C;X
L037EE9: db $65;X
L037EEA: db $06;X
L037EEB: db $00;X
L037EEC: db $8F;X
L037EED: db $64;X
L037EEE: db $06;X
L037EEF: db $00;X
L037EF0: db $9C;X
L037EF1: db $65;X
L037EF2: db $06;X
L037EF3: db $00;X
L037EF4: db $C9;X
L037EF5: db $5D;X
L037EF6: db $06;X
L037EF7: db $00;X
L037EF8: db $0F;X
L037EF9: db $40;X
L037EFA: db $02;X
L037EFB: db $00;X
L037EFC: db $C9;X
L037EFD: db $4F;X
L037EFE: db $02;X
L037EFF: db $00;X
L037F00: db $C9;X
L037F01: db $4F;X
L037F02: db $02;X
L037F03: db $00;X
L037F04: db $74;X
L037F05: db $54;X
L037F06: db $02;X
L037F07: db $00;X
L037F08: db $C9;X
L037F09: db $4F;X
L037F0A: db $02;X
L037F0B: db $00;X
L037F0C: db $C9;X
L037F0D: db $4F;X
L037F0E: db $02;X
L037F0F: db $00;X
L037F10: db $C9;X
L037F11: db $4F;X
L037F12: db $02;X
L037F13: db $00;X
L037F14: db $0E;X
L037F15: db $50;X
L037F16: db $02;X
L037F17: db $00;X
L037F18: db $60;X
L037F19: db $51;X
L037F1A: db $02;X
L037F1B: db $00;X
L037F1C: db $0E;X
L037F1D: db $52;X
L037F1E: db $02;X
L037F1F: db $00;X
L037F20: db $6A;X
L037F21: db $52;X
L037F22: db $02;X
L037F23: db $00;X
L037F24: db $93;X
L037F25: db $53;X
L037F26: db $02;X
L037F27: db $00;X
L037F28: db $ED;X
L037F29: db $53;X
L037F2A: db $02;X
L037F2B: db $00;X
L037F2C: db $AE;X
L037F2D: db $54;X
L037F2E: db $02;X
L037F2F: db $00;X
L037F30: db $AE;X
L037F31: db $54;X
L037F32: db $02;X
L037F33: db $00;X
L037F34: db $1C;X
L037F35: db $55;X
L037F36: db $02;X
L037F37: db $00;X
L037F38: db $60;X
L037F39: db $51;X
L037F3A: db $02;X
L037F3B: db $00;X
L037F3C: db $50;X
L037F3D: db $55;X
L037F3E: db $02;X
L037F3F: db $00;X
L037F40: db $50;X
L037F41: db $55;X
L037F42: db $02;X
L037F43: db $00;X
L037F44: db $AD;X
L037F45: db $55;X
L037F46: db $02;X
L037F47: db $00;X
L037F48: db $00;X
L037F49: db $40;X
L037F4A: db $02;X
L037F4B: db $00;X
L037F4C: db $0F;X
L037F4D: db $40;X
L037F4E: db $02;X
L037F4F: db $00;X
L037F50: db $2B;X
L037F51: db $40;X
L037F52: db $02;X
L037F53: db $00;X
L037F54: db $2B;X
L037F55: db $40;X
L037F56: db $02;X
L037F57: db $00;X
L037F58: db $34;X
L037F59: db $40;X
L037F5A: db $02;X
L037F5B: db $00;X
L037F5C: db $0A;X
L037F5D: db $31;X
L037F5E: db $02;X
L037F5F: db $00;X
L037F60: db $0A;X
L037F61: db $31;X
L037F62: db $02;X
L037F63: db $00;X
L037F64: db $0A;X
L037F65: db $31;X
L037F66: db $02;X
L037F67: db $00;X
L037F68: db $34;X
L037F69: db $40;X
L037F6A: db $02;X
L037F6B: db $00;X
L037F6C: db $34;X
L037F6D: db $40;X
L037F6E: db $02;X
L037F6F: db $00;X
L037F70: db $12;X
L037F71: db $42;X
L037F72: db $02;X
L037F73: db $00;X
L037F74: db $76;X
L037F75: db $40;X
L037F76: db $02;X
L037F77: db $00;X
L037F78: db $D1;X
L037F79: db $40;X
L037F7A: db $02;X
L037F7B: db $00;X
L037F7C: db $38;X
L037F7D: db $40;X
L037F7E: db $02;X
L037F7F: db $00;X
L037F80: db $CE;X
L037F81: db $42;X
L037F82: db $02;X
L037F83: db $00;X
L037F84: db $F2;X
L037F85: db $42;X
L037F86: db $02;X
L037F87: db $00;X
L037F88: db $F2;X
L037F89: db $42;X
L037F8A: db $02;X
L037F8B: db $00;X
L037F8C: db $FD;X
L037F8D: db $43;X
L037F8E: db $02;X
L037F8F: db $00;X
L037F90: db $70;X
L037F91: db $44;X
L037F92: db $02;X
L037F93: db $00;X
L037F94: db $CF;X
L037F95: db $44;X
L037F96: db $02;X
L037F97: db $00;X
L037F98: db $CF;X
L037F99: db $44;X
L037F9A: db $02;X
L037F9B: db $00;X
L037F9C: db $CF;X
L037F9D: db $44;X
L037F9E: db $02;X
L037F9F: db $00;X
L037FA0: db $A4;X
L037FA1: db $43;X
L037FA2: db $02;X
L037FA3: db $00;X
L037FA4: db $A4;X
L037FA5: db $43;X
L037FA6: db $02;X
L037FA7: db $00;X
L037FA8: db $55;X
L037FA9: db $42;X
L037FAA: db $02;X
L037FAB: db $00;X
L037FAC: db $CE;X
L037FAD: db $42;X
L037FAE: db $02;X
L037FAF: db $00;X
L037FB0: db $55;X
L037FB1: db $42;X
L037FB2: db $02;X
L037FB3: db $00;X
L037FB4: db $CE;X
L037FB5: db $42;X
L037FB6: db $02;X
L037FB7: db $00;X
L037FB8: db $55;X
L037FB9: db $42;X
L037FBA: db $02;X
L037FBB: db $00;X
L037FBC: db $CE;X
L037FBD: db $42;X
L037FBE: db $02;X
L037FBF: db $00;X
L037FC0: db $55;X
L037FC1: db $42;X
L037FC2: db $02;X
L037FC3: db $00;X
L037FC4: db $CE;X
L037FC5: db $42;X
L037FC6: db $02;X
L037FC7: db $00;X
L037FC8: db $68;X
L037FC9: db $40;X
L037FCA: db $06;X
L037FCB: db $00;X
L037FCC: db $A1;X
L037FCD: db $41;X
L037FCE: db $02;X
L037FCF: db $00;X
L037FD0: db $A1;X
L037FD1: db $41;X
L037FD2: db $02;X
L037FD3: db $00;X
L037FD4: db $A1;X
L037FD5: db $41;X
L037FD6: db $02;X
L037FD7: db $00;X
L037FD8: db $1F;X
L037FD9: db $55;X
L037FDA: db $06;X
L037FDB: db $00;X
L037FDC: db $1F;X
L037FDD: db $55;X
L037FDE: db $06;X
L037FDF: db $00;X
L037FE0: db $52;X
L037FE1: db $55;X
L037FE2: db $06;X
L037FE3: db $00;X
L037FE4: db $52;X
L037FE5: db $55;X
L037FE6: db $06;X
L037FE7: db $00;X
L037FE8: db $99;X
L037FE9: db $56;X
L037FEA: db $06;X
L037FEB: db $00;X
L037FEC: db $99;X
L037FED: db $56;X
L037FEE: db $06;X
L037FEF: db $00;X
L037FF0: db $9C;X
L037FF1: db $57;X
L037FF2: db $06;X
L037FF3: db $00;X
L037FF4: db $9C;X
L037FF5: db $57;X
L037FF6: db $06;X
L037FF7: db $00;X
L037FF8: db $1F;X
L037FF9: db $55;X
L037FFA: db $06;X
L037FFB: db $00;X
L037FFC: db $1F;X
L037FFD: db $55;X
L037FFE: db $06;X
